/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/worklet/js_audio_worklet.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/worklet/js_audio_worklet.js":
/*!*****************************************!*\
  !*** ./src/worklet/js_audio_worklet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
author: Hf.Platform.Seth.Wang
Date: July,2017

*/
function Queue() {
    this.a = [];
    this.b = 0;
    this.residue = null;
    //  this.key = key;
};
Queue.prototype.getLength = function() {
    return this.a.length - this.b
};
Queue.prototype.isEmpty = function() {
    return 0 == this.a.length
};
Queue.prototype.enqueue = function(data) {
    this.a.push(data)
};
Queue.prototype.dequeue = function() {
    if (0 != this.a.length) {
        var c = this.a[this.b];
        2 * ++this.b >= this.a.length && (this.a = this.a.slice(this.b), this.b = 0);
        return c
    }
    return null;
};
Queue.prototype.peek = function() {
    return 0 < this.a.length ? this.a[this.b] : void 0
}

function AudioQueueMGR() {

    this.ssrcQueueMap = new Map();
    AudioQueueMGR.prototype.AddQueue = function(key) {
        var queue = new Queue();
        this.ssrcQueueMap.set(key, queue);
        return queue;
    }
    AudioQueueMGR.prototype.DeleteQueue = function(key) {
        this.ssrcQueueMap.delete(key);
    }
    AudioQueueMGR.prototype.GetQueue = function(key) {
        var queue_ = this.ssrcQueueMap.get(key);
        return queue_;
    }
    AudioQueueMGR.prototype.GetQueueData = function(key) {
        var queue_ = this.ssrcQueueMap.get(key);
        return queue_.dequeue();
    }
    AudioQueueMGR.prototype.PutQueueData = function(key, data) {
        var queue_ = this.ssrcQueueMap.get(key);
        queue_.enqueue(data)
    }
    AudioQueueMGR.prototype.GetQueueLength = function(key) {
        var queue_ = this.ssrcQueueMap.get(key);
        if (queue_ !== null) {
            return queue_.getLength();
        }
        return 0;
    }

};

var AudioMGR = (function() {
    function AudioMGR() {
        this.map = new Map();
        this.AudioQueueMGR = new AudioQueueMGR();
        this.timemap = new Map();
    };
    AudioMGR.prototype.Add = function(ssrc, audio_webwork) {
        this.map.put(ssrc, audio_webwork);
        this.AudioQueueMGR.AddQueue(ssrc);
    }
    AudioMGR.prototype.Clear = function() {
        this.map.clear();
    }
    AudioMGR.prototype.Keys = function() {
        return this.map.keys();
    }
    AudioMGR.prototype.UpdateSSRCTimeMap = function(timestamp) {
        this.timemap = timestamp;
    }
    AudioMGR.prototype.GetSSRCTimeMap = function(ssrc) {
        if (this.timemap) {
            return this.timemap.get(ssrc);
        }
        return null;

    }
    return AudioMGR;
})();

function Get_Decoded_Audio_Buffer_Length(ssrc) {
    ssrc = 0;
    if (localAudioDecMGR) {
        return localAudioDecMGR.AudioQueueMGR.GetQueueLength(ssrc);
    }
    return 0;
}
// var Audio_Buffer = new Queue();
// var residue = null;
var start_play = false;
var localAudioDecMGR = new AudioMGR();
var audioBufferSize = 10;
var start_capture = false;
var current_ssrc = null;
var audio_count = 0;
var AUDIO_UPDATE_SSRC_TIME_INTERVAL = 23;
var LOG_PRINT_INTERVAL = 10000;
var log_count = 0;
var post_capture_audio_count = 0;
var AUDIO_CAPTURE_MAX_COUNT = 0;
var capture_audio_buffer = null;
var audioEncodePort;
var audioDecodePort;
var audioDecodePortWithVideo = null;
var ssrcNtpMap = new Map();
var residueOffset = 0;
function Put_Audio_Frame_Buffer(ssrc, buffer, time_stamp, that) {
    ssrc = 0;
    if (!start_play) {
        return;
    }
    if (localAudioDecMGR) {
        var ssrcqueue_ = localAudioDecMGR.AudioQueueMGR.GetQueue(ssrc); // need special ssrc, as audio had been Mixed.
        if (!ssrcqueue_) {
            ssrcqueue_ = localAudioDecMGR.AudioQueueMGR.AddQueue(ssrc);
        }
        // buffer = Uint8ToFloat32(buffer);
        if (time_stamp) {
            // var timemap = new Map();
            var numberOfSSRC = time_stamp.length / 12;
            var index = 0;
            var i = 0;
            for (index = 0; index < numberOfSSRC; index++) {
                var ssrc = 0;
                for (i = index * 12 + 0; i < index * 12 + 4; i++) {
                    ssrc += time_stamp[i] * Math.pow(256, (i - index * 12));
                }
                ssrc = ssrc >> 10;
                var ts = 0;
                for (i = index * 12 + 4; i < index * 12 + 12; i++) {
                    ts += time_stamp[i] * Math.pow(256, (i - index * 12 - 4));
                }
                ssrcNtpMap.set(ssrc, ts);
            }
            var message = buffer;
            Send_Buffer_Back_TO_Decode_Worker(time_stamp)
        } else {
            var message = buffer;
        }

        ssrcqueue_.enqueue(message);
        var audioqueuelength = Get_Decoded_Audio_Buffer_Length(ssrc);
        // console.log("audio queue length: "+audioqueuelength)
        if (audioqueuelength > 7) {
            if (audioDecodePort)
                audioDecodePort.postMessage({
                    status: "delay",
                });
        } else if (audioqueuelength > 50) {
            var diff = audioqueuelength - audioBufferSize;
            while (diff >= 0) {
                Delete_Decoded_Audio_Frame(ssrc);
                diff--;
            }
        }
    }
}

function Delete_Decoded_Audio_Frame(ssrc) {
    ssrc = 0;
    if (!localAudioDecMGR) {
        return;
    }
    var ssrc_queue_ = localAudioDecMGR.AudioQueueMGR.GetQueue(ssrc)
    if (ssrc_queue_) {
        var data_node = ssrc_queue_.dequeue();
        Send_Buffer_Back_TO_Decode_Worker(data_node);
        return data_node;
    }
    return null;
}

function Get_SSRC_Latest_Time(e) {
    e = e >> 10;
    if (localAudioDecMGR) {
        var t = ssrcNtpMap.get(e);
        if (!t) {
            return 0;
        } else {
            ssrcNtpMap.set(e, 0);
            return t;
        }
    }
}

function Send_Buffer_Back_TO_Decode_Worker(buff) {
    if (audioDecodePort) {
        var data = {
            status: "trash",
            data: buff
        };
        audioDecodePort.postMessage(data, [data.data.buffer]);
    }
}
function Get_Decoded_Audio_Frame(ssrc, time_stamp, Audio_Node_Buffer_Size, output) {
    if (!localAudioDecMGR) {
        return;
    }
    ssrc = 0;
    var ssrc_queue = localAudioDecMGR.AudioQueueMGR.GetQueue(ssrc);
    var audio_data = null;
    if (ssrc_queue) {
        if (ssrc_queue.residue) {
            let realLeft = ssrc_queue.residue.length - residueOffset;
            if (realLeft > Audio_Node_Buffer_Size) {
                // let local_residue_length = ssrc_queue.residue.buffer.length;
                // audio_data = ssrc_queue.residue.buffer.slice(0, Audio_Node_Buffer_Size);
                // ssrc_queue.residue.buffer = ssrc_queue.residue.buffer.slice(Audio_Node_Buffer_Size)
                output.set(ssrc_queue.residue.subarray(residueOffset, (residueOffset + Audio_Node_Buffer_Size)), (output.length - Audio_Node_Buffer_Size));
                residueOffset = residueOffset + Audio_Node_Buffer_Size;
                // Update_Audio_SSRC_Time(ssrc_queue.residue.ntptime);
                return ;
            } else if (realLeft === Audio_Node_Buffer_Size) {
                // audio_data = ssrc_queue.residue.buffer;
                // Update_Audio_SSRC_Time(ssrc_queue.residue.ntptime);
                output.set(ssrc_queue.residue.subarray(residueOffset, (residueOffset + Audio_Node_Buffer_Size)), (output.length - Audio_Node_Buffer_Size));
                Send_Buffer_Back_TO_Decode_Worker(ssrc_queue.residue);
                ssrc_queue.residue = null;
                residueOffset = 0;

                return ;
            } else {
                audio_data = ssrc_queue.residue;
                // Update_Audio_SSRC_Time(ssrc_queue.residue.ntptime);
                output.set(ssrc_queue.residue.subarray(residueOffset, audio_data.length), (output.length - Audio_Node_Buffer_Size));
                // oneAudioFrame.set(ssrc_queue.residue.buffer, residueOffset, audio_data.length);
                Send_Buffer_Back_TO_Decode_Worker(ssrc_queue.residue);
                ssrc_queue.residue = null;
                residueOffset = 0;
                Audio_Node_Buffer_Size = Audio_Node_Buffer_Size - realLeft;
            }
        }

        var data_node = ssrc_queue.dequeue();
        while (data_node && data_node.length < Audio_Node_Buffer_Size) {
            // Update_Audio_SSRC_Time(data_node.ntptime);
            // audio_data = Float32Concat(audio_data, data_node.buffer);
            output.set(data_node, output.length - Audio_Node_Buffer_Size);
            Send_Buffer_Back_TO_Decode_Worker(data_node);
            Audio_Node_Buffer_Size = Audio_Node_Buffer_Size - data_node.length
            data_node = ssrc_queue.dequeue();
        }

        if (data_node) {
            // Update_Audio_SSRC_Time(data_node.ntptime);
            if (data_node.length === Audio_Node_Buffer_Size) {
                // audio_data = Float32Concat(audio_data, data_node.buffer);
                output.set(data_node, output.length - Audio_Node_Buffer_Size);
                residueOffset = 0;
                Send_Buffer_Back_TO_Decode_Worker(data_node);
                return;
            } else if (data_node.length > Audio_Node_Buffer_Size) {
                // audio_data = Float32Concat(audio_data, data_node.buffer.slice(0, Audio_Node_Buffer_Size));
                output.set(data_node.subarray(0,Audio_Node_Buffer_Size), output.length - Audio_Node_Buffer_Size)
                ssrc_queue.residue = data_node;
                residueOffset = Audio_Node_Buffer_Size;
                return;
            }
        } else {
            // console.log("queue is empty")
        }
        // if (audio_data) {
        //     if (audio_data.length < audio_length) {
        //         ssrc_queue.residue = {
        //             buffer: audio_data,
        //             ntptime: null
        //         }
        //         return null;
        //     } else if (audio_data.length == audio_length) {
        //         return audio_data;
        //     }
        // }
    }
    return;
}

class ZoomAudioWorletProcessor extends AudioWorkletProcessor {

    // Custom AudioParams can be defined with this static getter.
    static get parameterDescriptors() {
        return [{ name: 'pcm', defaultValue: 1 }];
    }

    constructor() {
        // The super constructor call is required.
        super();
        this.port.onmessage = this.handleMessage.bind(this);
        this.sampleRate_ = 0;
        this.tenMilliSecondsLength_ = 0;
    }

    handleMessage(event) {
        // console.log('[Processor:Received] "' + event.data.message +
        //     '" (' + event.data.timeStamp + ')');
        var data = event.data;
        switch (data.status) {
            case "data":
            {
                if (start_play) {
                    // Audio_Buffer.enqueue(Uint8ToFloat32(data.data));
                    Put_Audio_Frame_Buffer(data.data.ssrc, data.data.data, data.data.time, this);
                    current_ssrc = data.data.ssrc;
                    // if(!current_ssrc){
                    //     current_ssrc = data.data.ssrc;
                    // }
                }
            }
                break;
            case "stopPlayAudio":
            {
                start_play = false;
            }
                break;
            case "startPlayAudio":
            {
                start_play = true;
            }
                break;
            case "close":
            {
                // close();
            }
                break;
            case "StartCaptureAudio":
            {
                start_capture = true;
                post_capture_audio_count = 0;
            }
                break;
            case "CurrentSSRC":
            {
                current_ssrc = data.data;
            }
                break;
            case "encodeAudioPort":
            {
                if(audioEncodePort){
                    audioEncodePort.close();
                }
                audioEncodePort = event.ports[0];
            }
                break;
            case "decodeAudioPort": {
                var that = this;
                if (audioDecodePort) {
                    audioDecodePort.close();
                }
                audioDecodePort = event.ports[0];
                audioDecodePort.onmessage = function (e) {
                    if (start_play) {
                        // Audio_Buffer.enqueue(Uint8ToFloat32(data.data));
                        Put_Audio_Frame_Buffer(e.data.ssrc, e.data.data, e.data.time, that);
                        current_ssrc = e.data.ssrc;
                    }
                    if (start_capture&&false) {
                        var data = {
                            command: "EchoCancel",
                            data: e.data.aec,
                            channels: e.data.channels,
                            sampleHz: e.data.sampleHz
                        };
                        audioEncodePort.postMessage(data, [data.data.buffer]);
                    }
                }
            }
                break;
            case "decodeAudioPortWithVideo": {
                audioDecodePortWithVideo = event.ports[0];
            }
                break;
            case "sampleRate": {
                this.sampleRate_ = data.data;
                //this.sampleRate /100 == 10ms
                //8000hz is base line for audio app.
                if (this.sampleRate_ >= 8000) {
                    this.tenMilliSecondsLength_ = this.sampleRate_ / 100;
                    //the maximum buffer delay set to be 30ms.
                    AUDIO_CAPTURE_MAX_COUNT = Math.ceil(((this.tenMilliSecondsLength_) * 3) / 128);
                    capture_audio_buffer = new Float32Array(128 * AUDIO_CAPTURE_MAX_COUNT);
                }
            }
                break;
        }
    }

    process(inputs, outputs, parameters) {
        let input = inputs[0];
        let output = outputs[0];

        if (!this.sampleRate_ || !output[0]) {
          return true;
        }
        Get_Decoded_Audio_Frame(0, 0, output[0].length, output[0])

        if (input[0] && start_capture) {
            capture_audio_buffer.set(input[0],post_capture_audio_count * 128);
            post_capture_audio_count++;
            if(post_capture_audio_count == AUDIO_CAPTURE_MAX_COUNT){
                post_capture_audio_count = 0;
                audioEncodePort.postMessage({
                    command:"EncodeAudioFrame",
                    data:capture_audio_buffer
                })
            }
        }

        if(current_ssrc){
            audio_count++;
            if (audio_count == AUDIO_UPDATE_SSRC_TIME_INTERVAL) {
                audio_count = 0;
                var time = Get_SSRC_Latest_Time(current_ssrc);
                if(time){
                    if(audioDecodePortWithVideo){
                        audioDecodePortWithVideo.postMessage({
                            data: time
                        })
                    }else{
                        this.port.postMessage({
                            status: "InstantAudioTime",
                            data: time
                        });
                    }
                }
            }
        }

        for (let channel = 1; channel < output.length; ++channel) {
            let outputChannel = output[channel];
            outputChannel.set(output[0]);
        }

        return true;
    }
}

registerProcessor('zoomAudioWorklet', ZoomAudioWorletProcessor);


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,