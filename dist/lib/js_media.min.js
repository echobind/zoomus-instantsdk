(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["JsMediaSDK_Instance"] = factory();
	else
		root["JsMediaSDK_Instance"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@babel/runtime/core-js/array/from.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/array/from.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/array/from */ "./node_modules/core-js/library/fn/array/from.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/is-iterable.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/is-iterable.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/is-iterable */ "./node_modules/core-js/library/fn/is-iterable.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/json/stringify.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/json/stringify.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/json/stringify */ "./node_modules/core-js/library/fn/json/stringify.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/map.js":
/*!****************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/map.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/map */ "./node_modules/core-js/library/fn/map.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/object/assign.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/object/assign.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/object/assign */ "./node_modules/core-js/library/fn/object/assign.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/object/create.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/object/create.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/object/create */ "./node_modules/core-js/library/fn/object/create.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/object/define-property.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/object/define-property.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/object/define-property */ "./node_modules/core-js/library/fn/object/define-property.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/object/get-own-property-descriptor.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/object/get-own-property-descriptor.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/object/get-own-property-descriptor */ "./node_modules/core-js/library/fn/object/get-own-property-descriptor.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/object/get-prototype-of.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/object/get-prototype-of.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/object/get-prototype-of */ "./node_modules/core-js/library/fn/object/get-prototype-of.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/object/keys.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/object/keys.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/object/keys */ "./node_modules/core-js/library/fn/object/keys.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/object/set-prototype-of.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/object/set-prototype-of.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/object/set-prototype-of */ "./node_modules/core-js/library/fn/object/set-prototype-of.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/promise.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/promise.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/promise */ "./node_modules/core-js/library/fn/promise.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/symbol.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/symbol.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/symbol */ "./node_modules/core-js/library/fn/symbol/index.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/core-js/symbol/iterator.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/core-js/symbol/iterator.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! core-js/library/fn/symbol/iterator */ "./node_modules/core-js/library/fn/symbol/iterator.js");

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Promise = __webpack_require__(/*! ../core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    _Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new _Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Object$defineProperty = __webpack_require__(/*! ../core-js/object/define-property */ "./node_modules/@babel/runtime/core-js/object/define-property.js");

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;

    _Object$defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Object$getPrototypeOf = __webpack_require__(/*! ../core-js/object/get-prototype-of */ "./node_modules/@babel/runtime/core-js/object/get-prototype-of.js");

var _Object$setPrototypeOf = __webpack_require__(/*! ../core-js/object/set-prototype-of */ "./node_modules/@babel/runtime/core-js/object/set-prototype-of.js");

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = _Object$setPrototypeOf ? _Object$getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || _Object$getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inherits.js":
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Object$create = __webpack_require__(/*! ../core-js/object/create */ "./node_modules/@babel/runtime/core-js/object/create.js");

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = _Object$create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Object$getOwnPropertyDescriptor = __webpack_require__(/*! ../core-js/object/get-own-property-descriptor */ "./node_modules/@babel/runtime/core-js/object/get-own-property-descriptor.js");

var _Object$defineProperty = __webpack_require__(/*! ../core-js/object/define-property */ "./node_modules/@babel/runtime/core-js/object/define-property.js");

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = _Object$defineProperty && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            _Object$defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Array$from = __webpack_require__(/*! ../core-js/array/from */ "./node_modules/@babel/runtime/core-js/array/from.js");

var _isIterable = __webpack_require__(/*! ../core-js/is-iterable */ "./node_modules/@babel/runtime/core-js/is-iterable.js");

function _iterableToArray(iter) {
  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === "[object Arguments]") return _Array$from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ../helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Object$setPrototypeOf = __webpack_require__(/*! ../core-js/object/set-prototype-of */ "./node_modules/@babel/runtime/core-js/object/set-prototype-of.js");

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = _Object$setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/@babel/runtime/helpers/iterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _Symbol$iterator = __webpack_require__(/*! ../core-js/symbol/iterator */ "./node_modules/@babel/runtime/core-js/symbol/iterator.js");

var _Symbol = __webpack_require__(/*! ../core-js/symbol */ "./node_modules/@babel/runtime/core-js/symbol.js");

function _typeof2(obj) { if (typeof _Symbol === "function" && typeof _Symbol$iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof _Symbol === "function" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof _Symbol === "function" && _typeof2(_Symbol$iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof _Symbol === "function" && obj.constructor === _Symbol && obj !== _Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(/*! ./runtime */ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),

/***/ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js");


/***/ }),

/***/ "./node_modules/core-js/library/fn/array/from.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/fn/array/from.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.string.iterator */ "./node_modules/core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../../modules/es6.array.from */ "./node_modules/core-js/library/modules/es6.array.from.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Array.from;


/***/ }),

/***/ "./node_modules/core-js/library/fn/is-iterable.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/library/fn/is-iterable.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/core-js/library/modules/web.dom.iterable.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/core-js/library/modules/es6.string.iterator.js");
module.exports = __webpack_require__(/*! ../modules/core.is-iterable */ "./node_modules/core-js/library/modules/core.is-iterable.js");


/***/ }),

/***/ "./node_modules/core-js/library/fn/json/stringify.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/library/fn/json/stringify.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js");
var $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
module.exports = function stringify(it) { // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};


/***/ }),

/***/ "./node_modules/core-js/library/fn/map.js":
/*!************************************************!*\
  !*** ./node_modules/core-js/library/fn/map.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es6.object.to-string */ "./node_modules/core-js/library/modules/es6.object.to-string.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/core-js/library/modules/web.dom.iterable.js");
__webpack_require__(/*! ../modules/es6.map */ "./node_modules/core-js/library/modules/es6.map.js");
__webpack_require__(/*! ../modules/es7.map.to-json */ "./node_modules/core-js/library/modules/es7.map.to-json.js");
__webpack_require__(/*! ../modules/es7.map.of */ "./node_modules/core-js/library/modules/es7.map.of.js");
__webpack_require__(/*! ../modules/es7.map.from */ "./node_modules/core-js/library/modules/es7.map.from.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Map;


/***/ }),

/***/ "./node_modules/core-js/library/fn/object/assign.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/assign.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.assign */ "./node_modules/core-js/library/modules/es6.object.assign.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Object.assign;


/***/ }),

/***/ "./node_modules/core-js/library/fn/object/create.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/create.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.create */ "./node_modules/core-js/library/modules/es6.object.create.js");
var $Object = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),

/***/ "./node_modules/core-js/library/fn/object/define-property.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/define-property.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.define-property */ "./node_modules/core-js/library/modules/es6.object.define-property.js");
var $Object = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),

/***/ "./node_modules/core-js/library/fn/object/get-own-property-descriptor.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/get-own-property-descriptor.js ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.get-own-property-descriptor */ "./node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js");
var $Object = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Object;
module.exports = function getOwnPropertyDescriptor(it, key) {
  return $Object.getOwnPropertyDescriptor(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/library/fn/object/get-prototype-of.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/get-prototype-of.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.get-prototype-of */ "./node_modules/core-js/library/modules/es6.object.get-prototype-of.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Object.getPrototypeOf;


/***/ }),

/***/ "./node_modules/core-js/library/fn/object/keys.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/keys.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.keys */ "./node_modules/core-js/library/modules/es6.object.keys.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Object.keys;


/***/ }),

/***/ "./node_modules/core-js/library/fn/object/set-prototype-of.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/fn/object/set-prototype-of.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.object.set-prototype-of */ "./node_modules/core-js/library/modules/es6.object.set-prototype-of.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Object.setPrototypeOf;


/***/ }),

/***/ "./node_modules/core-js/library/fn/promise.js":
/*!****************************************************!*\
  !*** ./node_modules/core-js/library/fn/promise.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../modules/es6.object.to-string */ "./node_modules/core-js/library/modules/es6.object.to-string.js");
__webpack_require__(/*! ../modules/es6.string.iterator */ "./node_modules/core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../modules/web.dom.iterable */ "./node_modules/core-js/library/modules/web.dom.iterable.js");
__webpack_require__(/*! ../modules/es6.promise */ "./node_modules/core-js/library/modules/es6.promise.js");
__webpack_require__(/*! ../modules/es7.promise.finally */ "./node_modules/core-js/library/modules/es7.promise.finally.js");
__webpack_require__(/*! ../modules/es7.promise.try */ "./node_modules/core-js/library/modules/es7.promise.try.js");
module.exports = __webpack_require__(/*! ../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Promise;


/***/ }),

/***/ "./node_modules/core-js/library/fn/symbol/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/fn/symbol/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.symbol */ "./node_modules/core-js/library/modules/es6.symbol.js");
__webpack_require__(/*! ../../modules/es6.object.to-string */ "./node_modules/core-js/library/modules/es6.object.to-string.js");
__webpack_require__(/*! ../../modules/es7.symbol.async-iterator */ "./node_modules/core-js/library/modules/es7.symbol.async-iterator.js");
__webpack_require__(/*! ../../modules/es7.symbol.observable */ "./node_modules/core-js/library/modules/es7.symbol.observable.js");
module.exports = __webpack_require__(/*! ../../modules/_core */ "./node_modules/core-js/library/modules/_core.js").Symbol;


/***/ }),

/***/ "./node_modules/core-js/library/fn/symbol/iterator.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/fn/symbol/iterator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../../modules/es6.string.iterator */ "./node_modules/core-js/library/modules/es6.string.iterator.js");
__webpack_require__(/*! ../../modules/web.dom.iterable */ "./node_modules/core-js/library/modules/web.dom.iterable.js");
module.exports = __webpack_require__(/*! ../../modules/_wks-ext */ "./node_modules/core-js/library/modules/_wks-ext.js").f('iterator');


/***/ }),

/***/ "./node_modules/core-js/library/modules/_a-function.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_a-function.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_add-to-unscopables.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_add-to-unscopables.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function () { /* empty */ };


/***/ }),

/***/ "./node_modules/core-js/library/modules/_an-instance.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_an-instance.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_an-object.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_an-object.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_array-from-iterable.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_array-from-iterable.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/library/modules/_for-of.js");

module.exports = function (iter, ITERATOR) {
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_array-includes.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_array-includes.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/library/modules/_to-iobject.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/library/modules/_to-length.js");
var toAbsoluteIndex = __webpack_require__(/*! ./_to-absolute-index */ "./node_modules/core-js/library/modules/_to-absolute-index.js");
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_array-methods.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_array-methods.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/library/modules/_iobject.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/library/modules/_to-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/library/modules/_to-length.js");
var asc = __webpack_require__(/*! ./_array-species-create */ "./node_modules/core-js/library/modules/_array-species-create.js");
module.exports = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || asc;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IObject(O);
    var f = ctx(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_array-species-constructor.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_array-species-constructor.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/library/modules/_is-array.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('species');

module.exports = function (original) {
  var C;
  if (isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_array-species-create.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_array-species-create.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(/*! ./_array-species-constructor */ "./node_modules/core-js/library/modules/_array-species-constructor.js");

module.exports = function (original, length) {
  return new (speciesConstructor(original))(length);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_classof.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_classof.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/library/modules/_cof.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_cof.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_cof.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_collection-strong.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_collection-strong.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js").f;
var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/library/modules/_object-create.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/library/modules/_redefine-all.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/library/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/library/modules/_for-of.js");
var $iterDefine = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/library/modules/_iter-define.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/library/modules/_iter-step.js");
var setSpecies = __webpack_require__(/*! ./_set-species */ "./node_modules/core-js/library/modules/_set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js");
var fastKey = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/library/modules/_meta.js").fastKey;
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/library/modules/_validate-collection.js");
var SIZE = DESCRIPTORS ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

module.exports = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = validate(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        validate(this, NAME);
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(validate(this, NAME), key);
      }
    });
    if (DESCRIPTORS) dP(C.prototype, 'size', {
      get: function () {
        return validate(this, NAME)[SIZE];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function (iterated, kind) {
      this._t = validate(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if (kind == 'keys') return step(0, entry.k);
      if (kind == 'values') return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_collection-to-json.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_collection-to-json.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/library/modules/_classof.js");
var from = __webpack_require__(/*! ./_array-from-iterable */ "./node_modules/core-js/library/modules/_array-from-iterable.js");
module.exports = function (NAME) {
  return function toJSON() {
    if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_collection.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_collection.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var meta = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/library/modules/_meta.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js");
var redefineAll = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/library/modules/_redefine-all.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/library/modules/_for-of.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/library/modules/_an-instance.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/library/modules/_set-to-string-tag.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js").f;
var each = __webpack_require__(/*! ./_array-methods */ "./node_modules/core-js/library/modules/_array-methods.js")(0);
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js");

module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function (target, iterable) {
      anInstance(target, C, NAME, '_c');
      target._c = new Base();
      if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
        anInstance(this, C, KEY);
        if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    IS_WEAK || dP(C.prototype, 'size', {
      get: function () {
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_core.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_core.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/library/modules/_create-property.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_create-property.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/library/modules/_property-desc.js");

module.exports = function (object, index, value) {
  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_ctx.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ctx.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/library/modules/_a-function.js");
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_defined.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_defined.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_descriptors.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_descriptors.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js")(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/_dom-create.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_dom-create.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js").document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_enum-bug-keys.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_enum-bug-keys.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');


/***/ }),

/***/ "./node_modules/core-js/library/modules/_enum-keys.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_enum-keys.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/library/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/library/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/library/modules/_object-pie.js");
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_export.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_export.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && has(exports, key)) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;


/***/ }),

/***/ "./node_modules/core-js/library/modules/_fails.js":
/*!********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_fails.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_for-of.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_for-of.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/library/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/library/modules/_is-array-iter.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/library/modules/_to-length.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/library/modules/core.get-iterator-method.js");
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;


/***/ }),

/***/ "./node_modules/core-js/library/modules/_global.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_global.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),

/***/ "./node_modules/core-js/library/modules/_has.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_has.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_hide.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_hide.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/library/modules/_property-desc.js");
module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_html.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_html.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var document = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js").document;
module.exports = document && document.documentElement;


/***/ }),

/***/ "./node_modules/core-js/library/modules/_ie8-dom-define.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_ie8-dom-define.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") && !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js")(function () {
  return Object.defineProperty(__webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/library/modules/_dom-create.js")('div'), 'a', { get: function () { return 7; } }).a != 7;
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/_invoke.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_invoke.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_iobject.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iobject.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/library/modules/_cof.js");
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_is-array-iter.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-array-iter.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/library/modules/_iterators.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('iterator');
var ArrayProto = Array.prototype;

module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_is-array.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-array.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/library/modules/_cof.js");
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_is-object.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_is-object.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_iter-call.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-call.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
module.exports = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) anObject(ret.call(iterator));
    throw e;
  }
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_iter-create.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-create.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/library/modules/_object-create.js");
var descriptor = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/library/modules/_property-desc.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/library/modules/_set-to-string-tag.js");
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js")(IteratorPrototype, __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_iter-define.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-define.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/library/modules/_library.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/library/modules/_redefine.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/library/modules/_iterators.js");
var $iterCreate = __webpack_require__(/*! ./_iter-create */ "./node_modules/core-js/library/modules/_iter-create.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/library/modules/_set-to-string-tag.js");
var getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/library/modules/_object-gpo.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_iter-detect.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-detect.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

module.exports = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_iter-step.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iter-step.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (done, value) {
  return { value: value, done: !!done };
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_iterators.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_iterators.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_library.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_library.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = true;


/***/ }),

/***/ "./node_modules/core-js/library/modules/_meta.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_meta.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/library/modules/_uid.js")('meta');
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");
var setDesc = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js").f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js")(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_microtask.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_microtask.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var macrotask = __webpack_require__(/*! ./_task */ "./node_modules/core-js/library/modules/_task.js").set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = __webpack_require__(/*! ./_cof */ "./node_modules/core-js/library/modules/_cof.js")(process) == 'process';

module.exports = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(global.navigator && global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_new-promise-capability.js":
/*!*************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_new-promise-capability.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 25.4.1.5 NewPromiseCapability(C)
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/library/modules/_a-function.js");

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject = aFunction(reject);
}

module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-assign.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-assign.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/library/modules/_object-keys.js");
var gOPS = __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/library/modules/_object-gops.js");
var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/library/modules/_object-pie.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/library/modules/_to-object.js");
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/library/modules/_iobject.js");
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js")(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-create.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-create.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var dPs = __webpack_require__(/*! ./_object-dps */ "./node_modules/core-js/library/modules/_object-dps.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/library/modules/_enum-bug-keys.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/library/modules/_shared-key.js")('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/library/modules/_dom-create.js")('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(/*! ./_html */ "./node_modules/core-js/library/modules/_html.js").appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-dp.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-dp.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/library/modules/_ie8-dom-define.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/library/modules/_to-primitive.js");
var dP = Object.defineProperty;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-dps.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-dps.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var getKeys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/library/modules/_object-keys.js");

module.exports = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-gopd.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopd.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/library/modules/_object-pie.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/library/modules/_property-desc.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/library/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/library/modules/_to-primitive.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ./_ie8-dom-define */ "./node_modules/core-js/library/modules/_ie8-dom-define.js");
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js") ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-gopn-ext.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopn-ext.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/library/modules/_to-iobject.js");
var gOPN = __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/library/modules/_object-gopn.js").f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-gopn.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gopn.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/library/modules/_object-keys-internal.js");
var hiddenKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/library/modules/_enum-bug-keys.js").concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-gops.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gops.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-gpo.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-gpo.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/library/modules/_to-object.js");
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/library/modules/_shared-key.js")('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-keys-internal.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-keys-internal.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/library/modules/_to-iobject.js");
var arrayIndexOf = __webpack_require__(/*! ./_array-includes */ "./node_modules/core-js/library/modules/_array-includes.js")(false);
var IE_PROTO = __webpack_require__(/*! ./_shared-key */ "./node_modules/core-js/library/modules/_shared-key.js")('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-keys.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-keys.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = __webpack_require__(/*! ./_object-keys-internal */ "./node_modules/core-js/library/modules/_object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ./_enum-bug-keys */ "./node_modules/core-js/library/modules/_enum-bug-keys.js");

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-pie.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-pie.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;


/***/ }),

/***/ "./node_modules/core-js/library/modules/_object-sap.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_object-sap.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js");
var fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js");
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_perform.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_perform.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_promise-resolve.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_promise-resolve.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/library/modules/_new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_property-desc.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_property-desc.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_redefine-all.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_redefine-all.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js");
module.exports = function (target, src, safe) {
  for (var key in src) {
    if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_redefine.js":
/*!***********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_redefine.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js");


/***/ }),

/***/ "./node_modules/core-js/library/modules/_set-collection-from.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-collection-from.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/library/modules/_a-function.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/library/modules/_for-of.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {
    var mapFn = arguments[1];
    var mapping, A, n, cb;
    aFunction(this);
    mapping = mapFn !== undefined;
    if (mapping) aFunction(mapFn);
    if (source == undefined) return new this();
    A = [];
    if (mapping) {
      n = 0;
      cb = ctx(mapFn, arguments[2], 2);
      forOf(source, false, function (nextItem) {
        A.push(cb(nextItem, n++));
      });
    } else {
      forOf(source, false, A.push, A);
    }
    return new this(A);
  } });
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_set-collection-of.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-collection-of.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://tc39.github.io/proposal-setmap-offrom/
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");

module.exports = function (COLLECTION) {
  $export($export.S, COLLECTION, { of: function of() {
    var length = arguments.length;
    var A = new Array(length);
    while (length--) A[length] = arguments[length];
    return new this(A);
  } });
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_set-proto.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-proto.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js")(Function.call, __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/library/modules/_object-gopd.js").f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_set-species.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-species.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js");
var dP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('species');

module.exports = function (KEY) {
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
    configurable: true,
    get: function () { return this; }
  });
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_set-to-string-tag.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_set-to-string-tag.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js").f;
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");
var TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_shared-key.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_shared-key.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/library/modules/_shared.js")('keys');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/library/modules/_uid.js");
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_shared.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_shared.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: core.version,
  mode: __webpack_require__(/*! ./_library */ "./node_modules/core-js/library/modules/_library.js") ? 'pure' : 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/_species-constructor.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_species-constructor.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/library/modules/_a-function.js");
var SPECIES = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('species');
module.exports = function (O, D) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_string-at.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_string-at.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/library/modules/_to-integer.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/library/modules/_defined.js");
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_task.js":
/*!*******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_task.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var invoke = __webpack_require__(/*! ./_invoke */ "./node_modules/core-js/library/modules/_invoke.js");
var html = __webpack_require__(/*! ./_html */ "./node_modules/core-js/library/modules/_html.js");
var cel = __webpack_require__(/*! ./_dom-create */ "./node_modules/core-js/library/modules/_dom-create.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (__webpack_require__(/*! ./_cof */ "./node_modules/core-js/library/modules/_cof.js")(process) == 'process') {
    defer = function (id) {
      process.nextTick(ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
    defer = function (id) {
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set: setTask,
  clear: clearTask
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_to-absolute-index.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-absolute-index.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/library/modules/_to-integer.js");
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_to-integer.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-integer.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_to-iobject.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-iobject.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(/*! ./_iobject */ "./node_modules/core-js/library/modules/_iobject.js");
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/library/modules/_defined.js");
module.exports = function (it) {
  return IObject(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_to-length.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-length.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(/*! ./_to-integer */ "./node_modules/core-js/library/modules/_to-integer.js");
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_to-object.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-object.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(/*! ./_defined */ "./node_modules/core-js/library/modules/_defined.js");
module.exports = function (it) {
  return Object(defined(it));
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_to-primitive.js":
/*!***************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_to-primitive.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_uid.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_uid.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_user-agent.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_user-agent.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var navigator = global.navigator;

module.exports = navigator && navigator.userAgent || '';


/***/ }),

/***/ "./node_modules/core-js/library/modules/_validate-collection.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_validate-collection.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
module.exports = function (it, TYPE) {
  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_wks-define.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks-define.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js");
var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/library/modules/_library.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/library/modules/_wks-ext.js");
var defineProperty = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js").f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/_wks-ext.js":
/*!**********************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks-ext.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js");


/***/ }),

/***/ "./node_modules/core-js/library/modules/_wks.js":
/*!******************************************************!*\
  !*** ./node_modules/core-js/library/modules/_wks.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var store = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/library/modules/_shared.js")('wks');
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/library/modules/_uid.js");
var Symbol = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js").Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;


/***/ }),

/***/ "./node_modules/core-js/library/modules/core.get-iterator-method.js":
/*!**************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/core.get-iterator-method.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/library/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/library/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js").getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/core.is-iterable.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/core.is-iterable.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/library/modules/_classof.js");
var ITERATOR = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('iterator');
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/library/modules/_iterators.js");
module.exports = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js").isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.array.from.js":
/*!****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.array.from.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/library/modules/_to-object.js");
var call = __webpack_require__(/*! ./_iter-call */ "./node_modules/core-js/library/modules/_iter-call.js");
var isArrayIter = __webpack_require__(/*! ./_is-array-iter */ "./node_modules/core-js/library/modules/_is-array-iter.js");
var toLength = __webpack_require__(/*! ./_to-length */ "./node_modules/core-js/library/modules/_to-length.js");
var createProperty = __webpack_require__(/*! ./_create-property */ "./node_modules/core-js/library/modules/_create-property.js");
var getIterFn = __webpack_require__(/*! ./core.get-iterator-method */ "./node_modules/core-js/library/modules/core.get-iterator-method.js");

$export($export.S + $export.F * !__webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/library/modules/_iter-detect.js")(function (iter) { Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = getIterFn(O);
    var length, result, step, iterator;
    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for (result = new C(length); length > index; index++) {
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.array.iterator.js":
/*!********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.array.iterator.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(/*! ./_add-to-unscopables */ "./node_modules/core-js/library/modules/_add-to-unscopables.js");
var step = __webpack_require__(/*! ./_iter-step */ "./node_modules/core-js/library/modules/_iter-step.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/library/modules/_iterators.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/library/modules/_to-iobject.js");

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/library/modules/_iter-define.js")(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.map.js":
/*!*********************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.map.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(/*! ./_collection-strong */ "./node_modules/core-js/library/modules/_collection-strong.js");
var validate = __webpack_require__(/*! ./_validate-collection */ "./node_modules/core-js/library/modules/_validate-collection.js");
var MAP = 'Map';

// 23.1 Map Objects
module.exports = __webpack_require__(/*! ./_collection */ "./node_modules/core-js/library/modules/_collection.js")(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = strong.getEntry(validate(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
  }
}, strong, true);


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.object.assign.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.assign.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");

$export($export.S + $export.F, 'Object', { assign: __webpack_require__(/*! ./_object-assign */ "./node_modules/core-js/library/modules/_object-assign.js") });


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.object.create.js":
/*!*******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.create.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/library/modules/_object-create.js") });


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.object.define-property.js":
/*!****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.define-property.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js"), 'Object', { defineProperty: __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js").f });


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/library/modules/_to-iobject.js");
var $getOwnPropertyDescriptor = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/library/modules/_object-gopd.js").f;

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/library/modules/_object-sap.js")('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.object.get-prototype-of.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.get-prototype-of.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/library/modules/_to-object.js");
var $getPrototypeOf = __webpack_require__(/*! ./_object-gpo */ "./node_modules/core-js/library/modules/_object-gpo.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/library/modules/_object-sap.js")('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return $getPrototypeOf(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.object.keys.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.keys.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(/*! ./_to-object */ "./node_modules/core-js/library/modules/_to-object.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/library/modules/_object-keys.js");

__webpack_require__(/*! ./_object-sap */ "./node_modules/core-js/library/modules/_object-sap.js")('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.object.set-prototype-of.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.set-prototype-of.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(/*! ./_set-proto */ "./node_modules/core-js/library/modules/_set-proto.js").set });


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.object.to-string.js":
/*!**********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.object.to-string.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.promise.js":
/*!*************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.promise.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY = __webpack_require__(/*! ./_library */ "./node_modules/core-js/library/modules/_library.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var ctx = __webpack_require__(/*! ./_ctx */ "./node_modules/core-js/library/modules/_ctx.js");
var classof = __webpack_require__(/*! ./_classof */ "./node_modules/core-js/library/modules/_classof.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var aFunction = __webpack_require__(/*! ./_a-function */ "./node_modules/core-js/library/modules/_a-function.js");
var anInstance = __webpack_require__(/*! ./_an-instance */ "./node_modules/core-js/library/modules/_an-instance.js");
var forOf = __webpack_require__(/*! ./_for-of */ "./node_modules/core-js/library/modules/_for-of.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/library/modules/_species-constructor.js");
var task = __webpack_require__(/*! ./_task */ "./node_modules/core-js/library/modules/_task.js").set;
var microtask = __webpack_require__(/*! ./_microtask */ "./node_modules/core-js/library/modules/_microtask.js")();
var newPromiseCapabilityModule = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/library/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/library/modules/_perform.js");
var userAgent = __webpack_require__(/*! ./_user-agent */ "./node_modules/core-js/library/modules/_user-agent.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/library/modules/_promise-resolve.js");
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[__webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(global, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(/*! ./_redefine-all */ "./node_modules/core-js/library/modules/_redefine-all.js")($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject = ctx($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
__webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/library/modules/_set-to-string-tag.js")($Promise, PROMISE);
__webpack_require__(/*! ./_set-species */ "./node_modules/core-js/library/modules/_set-species.js")(PROMISE);
Wrapper = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js")[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(/*! ./_iter-detect */ "./node_modules/core-js/library/modules/_iter-detect.js")(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.string.iterator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.string.iterator.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at = __webpack_require__(/*! ./_string-at */ "./node_modules/core-js/library/modules/_string-at.js")(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(/*! ./_iter-define */ "./node_modules/core-js/library/modules/_iter-define.js")(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "./node_modules/core-js/library/modules/es6.symbol.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es6.symbol.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var has = __webpack_require__(/*! ./_has */ "./node_modules/core-js/library/modules/_has.js");
var DESCRIPTORS = __webpack_require__(/*! ./_descriptors */ "./node_modules/core-js/library/modules/_descriptors.js");
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var redefine = __webpack_require__(/*! ./_redefine */ "./node_modules/core-js/library/modules/_redefine.js");
var META = __webpack_require__(/*! ./_meta */ "./node_modules/core-js/library/modules/_meta.js").KEY;
var $fails = __webpack_require__(/*! ./_fails */ "./node_modules/core-js/library/modules/_fails.js");
var shared = __webpack_require__(/*! ./_shared */ "./node_modules/core-js/library/modules/_shared.js");
var setToStringTag = __webpack_require__(/*! ./_set-to-string-tag */ "./node_modules/core-js/library/modules/_set-to-string-tag.js");
var uid = __webpack_require__(/*! ./_uid */ "./node_modules/core-js/library/modules/_uid.js");
var wks = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js");
var wksExt = __webpack_require__(/*! ./_wks-ext */ "./node_modules/core-js/library/modules/_wks-ext.js");
var wksDefine = __webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/library/modules/_wks-define.js");
var enumKeys = __webpack_require__(/*! ./_enum-keys */ "./node_modules/core-js/library/modules/_enum-keys.js");
var isArray = __webpack_require__(/*! ./_is-array */ "./node_modules/core-js/library/modules/_is-array.js");
var anObject = __webpack_require__(/*! ./_an-object */ "./node_modules/core-js/library/modules/_an-object.js");
var isObject = __webpack_require__(/*! ./_is-object */ "./node_modules/core-js/library/modules/_is-object.js");
var toIObject = __webpack_require__(/*! ./_to-iobject */ "./node_modules/core-js/library/modules/_to-iobject.js");
var toPrimitive = __webpack_require__(/*! ./_to-primitive */ "./node_modules/core-js/library/modules/_to-primitive.js");
var createDesc = __webpack_require__(/*! ./_property-desc */ "./node_modules/core-js/library/modules/_property-desc.js");
var _create = __webpack_require__(/*! ./_object-create */ "./node_modules/core-js/library/modules/_object-create.js");
var gOPNExt = __webpack_require__(/*! ./_object-gopn-ext */ "./node_modules/core-js/library/modules/_object-gopn-ext.js");
var $GOPD = __webpack_require__(/*! ./_object-gopd */ "./node_modules/core-js/library/modules/_object-gopd.js");
var $DP = __webpack_require__(/*! ./_object-dp */ "./node_modules/core-js/library/modules/_object-dp.js");
var $keys = __webpack_require__(/*! ./_object-keys */ "./node_modules/core-js/library/modules/_object-keys.js");
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(/*! ./_object-gopn */ "./node_modules/core-js/library/modules/_object-gopn.js").f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(/*! ./_object-pie */ "./node_modules/core-js/library/modules/_object-pie.js").f = $propertyIsEnumerable;
  __webpack_require__(/*! ./_object-gops */ "./node_modules/core-js/library/modules/_object-gops.js").f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(/*! ./_library */ "./node_modules/core-js/library/modules/_library.js")) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js")($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.map.from.js":
/*!**************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.map.from.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
__webpack_require__(/*! ./_set-collection-from */ "./node_modules/core-js/library/modules/_set-collection-from.js")('Map');


/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.map.of.js":
/*!************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.map.of.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
__webpack_require__(/*! ./_set-collection-of */ "./node_modules/core-js/library/modules/_set-collection-of.js")('Map');


/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.map.to-json.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.map.to-json.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");

$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(/*! ./_collection-to-json */ "./node_modules/core-js/library/modules/_collection-to-json.js")('Map') });


/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.promise.finally.js":
/*!*********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.promise.finally.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// https://github.com/tc39/proposal-promise-finally

var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var core = __webpack_require__(/*! ./_core */ "./node_modules/core-js/library/modules/_core.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var speciesConstructor = __webpack_require__(/*! ./_species-constructor */ "./node_modules/core-js/library/modules/_species-constructor.js");
var promiseResolve = __webpack_require__(/*! ./_promise-resolve */ "./node_modules/core-js/library/modules/_promise-resolve.js");

$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {
  var C = speciesConstructor(this, core.Promise || global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });


/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.promise.try.js":
/*!*****************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.promise.try.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// https://github.com/tc39/proposal-promise-try
var $export = __webpack_require__(/*! ./_export */ "./node_modules/core-js/library/modules/_export.js");
var newPromiseCapability = __webpack_require__(/*! ./_new-promise-capability */ "./node_modules/core-js/library/modules/_new-promise-capability.js");
var perform = __webpack_require__(/*! ./_perform */ "./node_modules/core-js/library/modules/_perform.js");

$export($export.S, 'Promise', { 'try': function (callbackfn) {
  var promiseCapability = newPromiseCapability.f(this);
  var result = perform(callbackfn);
  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
  return promiseCapability.promise;
} });


/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.symbol.async-iterator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.symbol.async-iterator.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/library/modules/_wks-define.js")('asyncIterator');


/***/ }),

/***/ "./node_modules/core-js/library/modules/es7.symbol.observable.js":
/*!***********************************************************************!*\
  !*** ./node_modules/core-js/library/modules/es7.symbol.observable.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./_wks-define */ "./node_modules/core-js/library/modules/_wks-define.js")('observable');


/***/ }),

/***/ "./node_modules/core-js/library/modules/web.dom.iterable.js":
/*!******************************************************************!*\
  !*** ./node_modules/core-js/library/modules/web.dom.iterable.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./es6.array.iterator */ "./node_modules/core-js/library/modules/es6.array.iterator.js");
var global = __webpack_require__(/*! ./_global */ "./node_modules/core-js/library/modules/_global.js");
var hide = __webpack_require__(/*! ./_hide */ "./node_modules/core-js/library/modules/_hide.js");
var Iterators = __webpack_require__(/*! ./_iterators */ "./node_modules/core-js/library/modules/_iterators.js");
var TO_STRING_TAG = __webpack_require__(/*! ./_wks */ "./node_modules/core-js/library/modules/_wks.js")('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}


/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "./node_modules/lodash/before.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/before.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(/*! ./toInteger */ "./node_modules/lodash/toInteger.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
function before(n, func) {
  var result;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  n = toInteger(n);
  return function() {
    if (--n > 0) {
      result = func.apply(this, arguments);
    }
    if (n <= 1) {
      func = undefined;
    }
    return result;
  };
}

module.exports = before;


/***/ }),

/***/ "./node_modules/lodash/debounce.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/debounce.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    now = __webpack_require__(/*! ./now */ "./node_modules/lodash/now.js"),
    toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Creates a debounced function that delays invoking `func` until after `wait`
 * milliseconds have elapsed since the last time the debounced function was
 * invoked. The debounced function comes with a `cancel` method to cancel
 * delayed `func` invocations and a `flush` method to immediately invoke them.
 * Provide `options` to indicate whether `func` should be invoked on the
 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
 * with the last arguments provided to the debounced function. Subsequent
 * calls to the debounced function return the result of the last `func`
 * invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the debounced function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.debounce` and `_.throttle`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to debounce.
 * @param {number} [wait=0] The number of milliseconds to delay.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=false]
 *  Specify invoking on the leading edge of the timeout.
 * @param {number} [options.maxWait]
 *  The maximum time `func` is allowed to be delayed before it's invoked.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new debounced function.
 * @example
 *
 * // Avoid costly calculations while the window size is in flux.
 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
 *
 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
 * jQuery(element).on('click', _.debounce(sendMail, 300, {
 *   'leading': true,
 *   'trailing': false
 * }));
 *
 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
 * var source = new EventSource('/stream');
 * jQuery(source).on('message', debounced);
 *
 * // Cancel the trailing debounced invocation.
 * jQuery(window).on('popstate', debounced.cancel);
 */
function debounce(func, wait, options) {
  var lastArgs,
      lastThis,
      maxWait,
      result,
      timerId,
      lastCallTime,
      lastInvokeTime = 0,
      leading = false,
      maxing = false,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = 'maxWait' in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }

  function invokeFunc(time) {
    var args = lastArgs,
        thisArg = lastThis;

    lastArgs = lastThis = undefined;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }

  function leadingEdge(time) {
    // Reset any `maxWait` timer.
    lastInvokeTime = time;
    // Start the timer for the trailing edge.
    timerId = setTimeout(timerExpired, wait);
    // Invoke the leading edge.
    return leading ? invokeFunc(time) : result;
  }

  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime,
        timeWaiting = wait - timeSinceLastCall;

    return maxing
      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
      : timeWaiting;
  }

  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime,
        timeSinceLastInvoke = time - lastInvokeTime;

    // Either this is the first call, activity has stopped and we're at the
    // trailing edge, the system time has gone backwards and we're treating
    // it as the trailing edge, or we've hit the `maxWait` limit.
    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
  }

  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    // Restart the timer.
    timerId = setTimeout(timerExpired, remainingWait(time));
  }

  function trailingEdge(time) {
    timerId = undefined;

    // Only invoke if we have `lastArgs` which means `func` has been
    // debounced at least once.
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = undefined;
    return result;
  }

  function cancel() {
    if (timerId !== undefined) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = undefined;
  }

  function flush() {
    return timerId === undefined ? result : trailingEdge(now());
  }

  function debounced() {
    var time = now(),
        isInvoking = shouldInvoke(time);

    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;

    if (isInvoking) {
      if (timerId === undefined) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        // Handle invocations in a tight loop.
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === undefined) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}

module.exports = debounce;


/***/ }),

/***/ "./node_modules/lodash/isBoolean.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/isBoolean.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var boolTag = '[object Boolean]';

/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */
function isBoolean(value) {
  return value === true || value === false ||
    (isObjectLike(value) && baseGetTag(value) == boolTag);
}

module.exports = isBoolean;


/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "./node_modules/lodash/isNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isNumber.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;


/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "./node_modules/lodash/now.js":
/*!************************************!*\
  !*** ./node_modules/lodash/now.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;


/***/ }),

/***/ "./node_modules/lodash/once.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/once.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var before = __webpack_require__(/*! ./before */ "./node_modules/lodash/before.js");

/**
 * Creates a function that is restricted to invoking `func` once. Repeat calls
 * to the function return the value of the first invocation. The `func` is
 * invoked with the `this` binding and arguments of the created function.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var initialize = _.once(createApplication);
 * initialize();
 * initialize();
 * // => `createApplication` is invoked once
 */
function once(func) {
  return before(2, func);
}

module.exports = once;


/***/ }),

/***/ "./node_modules/lodash/throttle.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/throttle.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var debounce = __webpack_require__(/*! ./debounce */ "./node_modules/lodash/debounce.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a throttled function that only invokes `func` at most once per
 * every `wait` milliseconds. The throttled function comes with a `cancel`
 * method to cancel delayed `func` invocations and a `flush` method to
 * immediately invoke them. Provide `options` to indicate whether `func`
 * should be invoked on the leading and/or trailing edge of the `wait`
 * timeout. The `func` is invoked with the last arguments provided to the
 * throttled function. Subsequent calls to the throttled function return the
 * result of the last `func` invocation.
 *
 * **Note:** If `leading` and `trailing` options are `true`, `func` is
 * invoked on the trailing edge of the timeout only if the throttled function
 * is invoked more than once during the `wait` timeout.
 *
 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
 *
 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
 * for details over the differences between `_.throttle` and `_.debounce`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to throttle.
 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
 * @param {Object} [options={}] The options object.
 * @param {boolean} [options.leading=true]
 *  Specify invoking on the leading edge of the timeout.
 * @param {boolean} [options.trailing=true]
 *  Specify invoking on the trailing edge of the timeout.
 * @returns {Function} Returns the new throttled function.
 * @example
 *
 * // Avoid excessively updating the position while scrolling.
 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
 *
 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
 * jQuery(element).on('click', throttled);
 *
 * // Cancel the trailing throttled invocation.
 * jQuery(window).on('popstate', throttled.cancel);
 */
function throttle(func, wait, options) {
  var leading = true,
      trailing = true;

  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = 'leading' in options ? !!options.leading : leading;
    trailing = 'trailing' in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    'leading': leading,
    'maxWait': wait,
    'trailing': trailing
  });
}

module.exports = throttle;


/***/ }),

/***/ "./node_modules/lodash/toFinite.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toFinite.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;


/***/ }),

/***/ "./node_modules/lodash/toInteger.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/toInteger.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toFinite = __webpack_require__(/*! ./toFinite */ "./node_modules/lodash/toFinite.js");

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;


/***/ }),

/***/ "./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "./node_modules/pubsub-js/src/pubsub.js":
/*!**********************************************!*\
  !*** ./node_modules/pubsub-js/src/pubsub.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {/**
 * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk
 * License: MIT - http://mrgnrdrck.mit-license.org
 *
 * https://github.com/mroderick/PubSubJS
 */

(function (root, factory){
    'use strict';

    var PubSub = {};
    root.PubSub = PubSub;

    var define = root.define;

    factory(PubSub);

    // AMD support
    if (typeof define === 'function' && define.amd){
        define(function() { return PubSub; });

        // CommonJS and Node.js module support
    } else if (true){
        if (module !== undefined && module.exports) {
            exports = module.exports = PubSub; // Node.js specific `module.exports`
        }
        exports.PubSub = PubSub; // CommonJS module 1.1.1 spec
        module.exports = exports = PubSub; // CommonJS
    }

}(( typeof window === 'object' && window ) || this, function (PubSub){
    'use strict';

    var messages = {},
        lastUid = -1;

    function hasKeys(obj){
        var key;

        for (key in obj){
            if ( obj.hasOwnProperty(key) ){
                return true;
            }
        }
        return false;
    }

    /**
     * Returns a function that throws the passed exception, for use as argument for setTimeout
     * @alias throwException
     * @function
     * @param { Object } ex An Error object
     */
    function throwException( ex ){
        return function reThrowException(){
            throw ex;
        };
    }

    function callSubscriberWithDelayedExceptions( subscriber, message, data ){
        try {
            subscriber( message, data );
        } catch( ex ){
            setTimeout( throwException( ex ), 0);
        }
    }

    function callSubscriberWithImmediateExceptions( subscriber, message, data ){
        subscriber( message, data );
    }

    function deliverMessage( originalMessage, matchedMessage, data, immediateExceptions ){
        var subscribers = messages[matchedMessage],
            callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,
            s;

        if ( !messages.hasOwnProperty( matchedMessage ) ) {
            return;
        }

        for (s in subscribers){
            if ( subscribers.hasOwnProperty(s)){
                callSubscriber( subscribers[s], originalMessage, data );
            }
        }
    }

    function createDeliveryFunction( message, data, immediateExceptions ){
        return function deliverNamespaced(){
            var topic = String( message ),
                position = topic.lastIndexOf( '.' );

            // deliver the message as it is now
            deliverMessage(message, message, data, immediateExceptions);

            // trim the hierarchy and deliver message to each level
            while( position !== -1 ){
                topic = topic.substr( 0, position );
                position = topic.lastIndexOf('.');
                deliverMessage( message, topic, data, immediateExceptions );
            }
        };
    }

    function messageHasSubscribers( message ){
        var topic = String( message ),
            found = Boolean(messages.hasOwnProperty( topic ) && hasKeys(messages[topic])),
            position = topic.lastIndexOf( '.' );

        while ( !found && position !== -1 ){
            topic = topic.substr( 0, position );
            position = topic.lastIndexOf( '.' );
            found = Boolean(messages.hasOwnProperty( topic ) && hasKeys(messages[topic]));
        }

        return found;
    }

    function publish( message, data, sync, immediateExceptions ){
        var deliver = createDeliveryFunction( message, data, immediateExceptions ),
            hasSubscribers = messageHasSubscribers( message );

        if ( !hasSubscribers ){
            return false;
        }

        if ( sync === true ){
            deliver();
        } else {
            setTimeout( deliver, 0 );
        }
        return true;
    }

    /**
     * Publishes the message, passing the data to it's subscribers
     * @function
     * @alias publish
     * @param { String } message The message to publish
     * @param {} data The data to pass to subscribers
     * @return { Boolean }
     */
    PubSub.publish = function( message, data ){
        return publish( message, data, false, PubSub.immediateExceptions );
    };

    /**
     * Publishes the the message synchronously, passing the data to it's subscribers
     * @function
     * @alias publishSync
     * @param { String } message The message to publish
     * @param {} data The data to pass to subscribers
     * @return { Boolean }
     */
    PubSub.publishSync = function( message, data ){
        return publish( message, data, true, PubSub.immediateExceptions );
    };

    /**
     * Subscribes the passed function to the passed message. Every returned token is unique and should be stored if you need to unsubscribe
     * @function
     * @alias subscribe
     * @param { String } message The message to subscribe to
     * @param { Function } func The function to call when a new message is published
     * @return { String }
     */
    PubSub.subscribe = function( message, func ){
        if ( typeof func !== 'function'){
            return false;
        }

        // message is not registered yet
        if ( !messages.hasOwnProperty( message ) ){
            messages[message] = {};
        }

        // forcing token as String, to allow for future expansions without breaking usage
        // and allow for easy use as key names for the 'messages' object
        var token = 'uid_' + String(++lastUid);
        messages[message][token] = func;

        // return token for unsubscribing
        return token;
    };

    /**
     * Subscribes the passed function to the passed message once
     * @function
     * @alias subscribeOnce
     * @param { String } message The message to subscribe to
     * @param { Function } func The function to call when a new message is published
     * @return { PubSub }
     */
    PubSub.subscribeOnce = function( message, func ){
        var token = PubSub.subscribe( message, function(){
            // before func apply, unsubscribe message
            PubSub.unsubscribe( token );
            func.apply( this, arguments );
        });
        return PubSub;
    };

    /**
     * Clears all subscriptions
     * @function
     * @public
     * @alias clearAllSubscriptions
     */
    PubSub.clearAllSubscriptions = function clearAllSubscriptions(){
        messages = {};
    };

    /**
     * Clear subscriptions by the topic
     * @function
     * @public
     * @alias clearAllSubscriptions
     */
    PubSub.clearSubscriptions = function clearSubscriptions(topic){
        var m;
        for (m in messages){
            if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0){
                delete messages[m];
            }
        }
    };

    /**
     * Removes subscriptions
     *
     * - When passed a token, removes a specific subscription.
     *
	 * - When passed a function, removes all subscriptions for that function
     *
	 * - When passed a topic, removes all subscriptions for that topic (hierarchy)
     * @function
     * @public
     * @alias subscribeOnce
     * @param { String | Function } value A token, function or topic to unsubscribe from
     * @example // Unsubscribing with a token
     * var token = PubSub.subscribe('mytopic', myFunc);
     * PubSub.unsubscribe(token);
     * @example // Unsubscribing with a function
     * PubSub.unsubscribe(myFunc);
     * @example // Unsubscribing from a topic
     * PubSub.unsubscribe('mytopic');
     */
    PubSub.unsubscribe = function(value){
        var descendantTopicExists = function(topic) {
                var m;
                for ( m in messages ){
                    if ( messages.hasOwnProperty(m) && m.indexOf(topic) === 0 ){
                        // a descendant of the topic exists:
                        return true;
                    }
                }

                return false;
            },
            isTopic    = typeof value === 'string' && ( messages.hasOwnProperty(value) || descendantTopicExists(value) ),
            isToken    = !isTopic && typeof value === 'string',
            isFunction = typeof value === 'function',
            result = false,
            m, message, t;

        if (isTopic){
            PubSub.clearSubscriptions(value);
            return;
        }

        for ( m in messages ){
            if ( messages.hasOwnProperty( m ) ){
                message = messages[m];

                if ( isToken && message[value] ){
                    delete message[value];
                    result = value;
                    // tokens are unique, so we can just stop here
                    break;
                }

                if (isFunction) {
                    for ( t in message ){
                        if (message.hasOwnProperty(t) && message[t] === value){
                            delete message[t];
                            result = true;
                        }
                    }
                }
            }
        }

        return result;
    };
}));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/utf8/utf8.js":
/*!***********************************!*\
  !*** ./node_modules/utf8/utf8.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*! https://mths.be/utf8js v3.0.0 by @mathias */
;(function(root) {

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			throw Error(
				'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
				' is not a scalar value'
			);
		}
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			checkScalarValue(codePoint);
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string) {
		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				checkScalarValue(codePoint);
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	root.version = '3.0.0';
	root.encode = utf8encode;
	root.decode = utf8decode;

}( false ? undefined : exports));


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/common/Error.js":
/*!*****************************!*\
  !*** ./src/common/Error.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CameraOccupiedError = CameraOccupiedError;

/**
 * you can add your custom exception/error in this file.
 */

/**
 * the computer camera is occupied, then no mediaStream obtained
 * @param message
 * @constructor
 */
function CameraOccupiedError(message) {
  this.name = 'CameraOccupiedError';
  this.message = message;
  this.stack = new Error().stack;
}

CameraOccupiedError.prototype = new Error();

/***/ }),

/***/ "./src/common/RTCPeerConnectionUtil.js":
/*!*********************************************!*\
  !*** ./src/common/RTCPeerConnectionUtil.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RTCPeerConnectionUtil = void 0;

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _stringify = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/json/stringify */ "./node_modules/@babel/runtime/core-js/json/stringify.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _log = _interopRequireDefault(__webpack_require__(/*! ./log.js */ "./src/common/log.js"));

var _pubSub = _interopRequireDefault(__webpack_require__(/*! ./pubSub */ "./src/common/pubSub.js"));

var _jsEvent = __webpack_require__(/*! ./jsEvent */ "./src/common/jsEvent.js");

var _Monitor = _interopRequireWildcard(__webpack_require__(/*! ../inside/Monitor */ "./src/inside/Monitor.js"));

var _throttle = _interopRequireDefault(__webpack_require__(/*! lodash/throttle */ "./node_modules/lodash/throttle.js"));

var _Constant = __webpack_require__(/*! ./constant/Constant */ "./src/common/constant/Constant.js");

var log = (0, _log.default)("sdk.rtcUtil");

var RTCPeerConnectionUtil =
/*#__PURE__*/
function () {
  function RTCPeerConnectionUtil() {
    var _this = this;

    (0, _classCallCheck2.default)(this, RTCPeerConnectionUtil);
    this.rtcPeerConnection = null;
    this.dataChannel = null;
    /**
     * indicate this is video dataChannel or audio dataChannel
     * @type {null}
     */

    this.dataChannelLabel = null;
    this.messageListener = null;
    this.rtcPeerConnectionCreatedListener = null;
    this.reconnectCount = 0;
    this.reconnectMax = 10;
    this.reconnectCountBetweenCloseAndOpenAndSetTo0WhenDCOpen = 0;
    this.connectionID = null;
    this.pubSubTokenList = [];
    this.isForceClosed = false;
    this.SEND_VIDEO_PUB_SUB_EVENT = "RTCPeerConnectionUtil.VIDEO.SENDDATA";
    this.reconnectRTCPeerConnectionThrottle = (0, _throttle.default)(function () {
      _this.reconnectRTCPeerConnection();
    }, 2000);
    this.timeoutThenCloseInterval = null;
    this.userid = null;
    this.connectionType = null;
  }

  (0, _createClass2.default)(RTCPeerConnectionUtil, [{
    key: "setUserid",
    value: function setUserid(userid) {
      this.userid = userid;
    }
  }, {
    key: "setConnectionType",
    value: function setConnectionType(connectionType) {
      this.connectionType = connectionType;
    }
  }, {
    key: "isSupportDataChannel",
    value: function isSupportDataChannel() {
      return !!window.RTCDataChannel;
    }
  }, {
    key: "initConnection",
    value: function () {
      var _initConnection = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee2(connectionID) {
        var _this2 = this;

        var dataChannelLabel,
            _args2 = arguments;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                dataChannelLabel = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 'ZoomWebclientVideoDataChannel';

                _Monitor.default.add_monitor("DCCONN");

                if (this.isSupportDataChannel()) {
                  _context2.next = 4;
                  break;
                }

                return _context2.abrupt("return");

              case 4:
                this.dataChannelLabel = dataChannelLabel;
                this.connectionID = connectionID;
                this.rtcPeerConnection = new RTCPeerConnection({
                  iceCandidatePoolSize: 1
                });
                this.rtcPeerConnection.addEventListener("close", function (ev) {
                  log("rtcPeerConnection.onclose", ev);

                  _this2.clear();

                  _this2.close();

                  _this2.reconnectRTCPeerConnectionThrottle();
                });
                this.rtcPeerConnection.addEventListener("icecandidate", function (ev) {
                  log("onicecandidate", ev);
                });
                this.rtcPeerConnection.addEventListener("iceconnectionstatechange", function (ev) {
                  var rtc = _this2.rtcPeerConnection;

                  if (rtc.iceConnectionState === "failed" || rtc.iceConnectionState === "disconnected" || rtc.iceConnectionState === "closed") {
                    log("".concat(_this2.dataChannelLabel, " iceconnectionstatechange"), rtc.iceConnectionState);

                    _Monitor.default.add_monitor("ICECONNSTATECHANGE:" + _this2.dataChannelLabel);

                    rtc.close();
                  }
                });
                this.createDataChannel(); // this.addDataChannelSpeedMonitor();

                _context2.next = 13;
                return this.rtcPeerConnection.createOffer().then(
                /*#__PURE__*/
                function () {
                  var _ref = (0, _asyncToGenerator2.default)(
                  /*#__PURE__*/
                  _regenerator.default.mark(function _callee(offer) {
                    return _regenerator.default.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            log('original offer', (0, _stringify.default)(offer));
                            offer.sdp = offer.sdp.replace(/a=ice-ufrag:.+/g, "a=ice-ufrag:".concat(connectionID));
                            log('modified offer', offer);
                            return _context.abrupt("return", _this2.rtcPeerConnection.setLocalDescription(offer));

                          case 4:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));

                  return function (_x2) {
                    return _ref.apply(this, arguments);
                  };
                }()).then(function () {
                  _this2.rtcPeerConnectionCreatedListener.call(null, _this2.rtcPeerConnection);
                });

              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function initConnection(_x) {
        return _initConnection.apply(this, arguments);
      };
    }()
  }, {
    key: "close",
    value: function close() {
      _Monitor.default.add_monitor("RTCPeerConnUtil.CLOSE");

      try {
        try {
          this.dataChannel.close();
        } catch (ex) {
          log(ex);
        }

        this.rtcPeerConnection.close();
      } catch (ex) {
        log(ex);
      } finally {
        this.dataChannel = null;
        this.rtcPeerConnection = null;
      }
    }
  }, {
    key: "forceClose",
    value: function forceClose() {
      _Monitor.default.add_monitor("DCFORCECLOSE:" + this.dataChannelLabel);

      log("forceClose : " + this.dataChannelLabel);
      this.isForceClosed = true;
      this.clear();
      this.close();
    }
  }, {
    key: "clear",
    value: function clear() {
      clearInterval(this.timeoutThenCloseInterval);
      this.messageListener = null;
      this.pubSubTokenList.forEach(function (token) {
        _pubSub.default.unsubscribe(token);
      });
      this.pubSubTokenList = [];
    }
  }, {
    key: "onConnectionCreated",
    value: function onConnectionCreated(fn) {
      this.rtcPeerConnectionCreatedListener = fn;
    }
  }, {
    key: "reconnectRTCPeerConnection",
    value: function reconnectRTCPeerConnection() {
      var _this3 = this;

      if (this.isForceClosed) return;

      if (this.reconnectCount < this.reconnectMax && this.reconnectCountBetweenCloseAndOpenAndSetTo0WhenDCOpen < this.reconnectMax) {
        log("".concat(this.dataChannelLabel, " reconnect reconnectTotalCount  : ").concat(this.reconnectCount, "; reconnectCountBetweenCloseAndOpenAndSetTo0WhenDCOpen : ").concat(this.reconnectCountBetweenCloseAndOpenAndSetTo0WhenDCOpen, ", reconnectMax : ").concat(this.reconnectMax));
        this.reconnectCount += 1;
        this.reconnectCountBetweenCloseAndOpenAndSetTo0WhenDCOpen += 1; // reconnect sleep seconds 2s,4s,8s,16s,32s,64s...

        setTimeout(function () {
          _this3.initConnection(_this3.connectionID, _this3.dataChannelLabel);
        }, Math.pow(2, this.reconnectCountBetweenCloseAndOpenAndSetTo0WhenDCOpen) * 1000);
      }
    }
  }, {
    key: "addDataChannelSpeedMonitor",
    value: function addDataChannelSpeedMonitor() {
      var _this4 = this;

      var deltaTime = 0;
      var peroid_start_time = 0;
      var last_peroid_speed = null;
      var peroid_total_amount = 0;
      var initialSpeed = 800 * 1000; //  unit : bit/second

      var monitor_video_send_buffer = 0;
      var peroid_speed = 0;

      var token = _pubSub.default.on(this.SEND_VIDEO_PUB_SUB_EVENT, function (message, data) {
        if (!peroid_start_time) {
          peroid_total_amount = 0;
          peroid_start_time = new Date().getTime() / 1000;
        } else {
          var nowTime = new Date().getTime() / 1000;
          deltaTime = nowTime - peroid_start_time;

          if (deltaTime > 10) {
            var deltaAmount = peroid_total_amount - _this4.dataChannel.bufferedAmount;

            if (_this4.dataChannel.bufferedAmount == 0) {
              if (last_peroid_speed) {
                last_peroid_speed = 0.8 * last_peroid_speed + 0.2 * initialSpeed;
              } else {
                last_peroid_speed = initialSpeed;
              }
            } else {
              monitor_video_send_buffer = deltaAmount;
              peroid_speed = deltaAmount * 8 / (deltaTime * 1);

              if (!last_peroid_speed) {
                last_peroid_speed = initialSpeed;
              } else {
                last_peroid_speed = 0.8 * last_peroid_speed + 0.2 * peroid_speed;
              }
            }

            _pubSub.default.publish(_jsEvent.PUBSUB_EVT.VIDEO_DATACHANNEL_SPEED, last_peroid_speed);

            peroid_total_amount = peroid_total_amount - deltaAmount;
            peroid_start_time = nowTime;
          }
        }

        peroid_total_amount += data.length;
      });

      this.pubSubTokenList.push(token);
    }
    /**
     * some logs for "datachannel status dashboard", they (dashboard developers) need "one line for one single log"
     * @param log
     */

  }, {
    key: "oneSingleLineLog",
    value: function oneSingleLineLog(log) {
      setTimeout(function () {
        _Monitor.default.send_instant_monitor();

        _Monitor.default.add_monitor(log);

        _Monitor.default.send_instant_monitor();
      }, 0);
    }
  }, {
    key: "createDataChannel",
    value: function createDataChannel() {
      var _this5 = this;

      if (this.dataChannel) {
        try {
          this.dataChannel.close();
        } catch (e) {
          log("close before createDataChannel error", e);
        }
      }
      /**
       * MDN Docs here : https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel
       * ordered : Indicates whether or not messages sent on the RTCDataChannel are required to arrive at their destination in the same order in which they were sent (true), or if they're allowed to arrive out-of-order (false). Default: true.
       * maxRetransmits : The maximum number of times the user agent should attempt to retransmit a message which fails the first time in unreliable mode. While this value is a16-bit unsigned number, each user agent may clamp it to whatever maximum it deems appropriate. Default: null
       */


      var dataChannel = this.rtcPeerConnection.createDataChannel(this.dataChannelLabel, {
        ordered: false,
        maxRetransmits: 5,
        reliable: false
      });
      dataChannel.binaryType = 'arraybuffer';
      dataChannel.addEventListener("open", function (ev) {
        _this5.reconnectCountBetweenCloseAndOpenAndSetTo0WhenDCOpen = 0;
        clearInterval(_this5.timeoutThenCloseInterval);

        _Monitor.default.add_monitor("DCOPEN:" + _this5.dataChannelLabel);

        _this5.oneSingleLineLog("".concat(_Constant.MONITOR_LOG_DASHBOARD_DATACHANNEL_PARSE_SEPARATOR, ",").concat(_this5.userid, ",").concat(_this5.connectionType, ",DCOPEN,").concat(_Constant.MONITOR_LOG_DASHBOARD_DATACHANNEL_PARSE_SEPARATOR));

        log("dataChannel.onopen", ev);
      });
      dataChannel.addEventListener("close", function (ev) {
        clearInterval(_this5.timeoutThenCloseInterval);
        log("dataChannel.onclose", ev);

        _Monitor.default.add_monitor("DCCLOSE:" + _this5.dataChannelLabel);

        _this5.oneSingleLineLog("".concat(_Constant.MONITOR_LOG_DASHBOARD_DATACHANNEL_PARSE_SEPARATOR, ",").concat(_this5.userid, ",").concat(_this5.connectionType, ",DCCLOSE,").concat(_Constant.MONITOR_LOG_DASHBOARD_DATACHANNEL_PARSE_SEPARATOR));

        _this5.clear();

        _this5.close();

        _this5.reconnectRTCPeerConnectionThrottle();
      });
      dataChannel.addEventListener("error", function (ev) {
        clearInterval(_this5.timeoutThenCloseInterval);

        _Monitor.default.add_monitor("DCERROR:".concat(_this5.dataChannelLabel, ":") + ev.message);

        log("dataChannel.onerror", ev);
      });
      dataChannel.addEventListener("message", function (ev) {
        if (_this5.messageListener) {
          _this5.messageListener.call(null, ev.data);
        }
      });
      this.dataChannel = dataChannel;
    }
    /**
     * only support one message listener, because message will be transfered ownership to worker
     * @param fn
     */

  }, {
    key: "onMessage",
    value: function onMessage(fn) {
      this.messageListener = fn;
    }
  }, {
    key: "waitForAnswerFromRWG",
    value: function waitForAnswerFromRWG(pubSubEvent) {
      var _this6 = this;

      return new _promise.default(function (resolve, reject) {
        var token = _pubSub.default.on(pubSubEvent, function (msg, data) {
          resolve(data);
        });

        _this6.pubSubTokenList.push(token);
      });
    }
  }, {
    key: "setRemoteDescription",
    value: function setRemoteDescription(answer) {
      // answer.sdp = answer.sdp.replace(/a=candidate:.+[\\r\\n]/, "");
      log("setRemoteDescription", answer);
      this.rtcPeerConnection.setRemoteDescription(new RTCSessionDescription({
        type: "answer",
        sdp: answer.sdp
      }));
    }
  }, {
    key: "closeIfTimeout",
    value: function closeIfTimeout() {
      var _this7 = this;

      clearInterval(this.timeoutThenCloseInterval);
      this.timeoutThenCloseInterval = setTimeout(function () {
        log("closeIfTimeout");

        _this7.close();
      }, 10 * 1000);
    }
  }, {
    key: "addIceCandidate",
    value: function addIceCandidate(candidate) {
      this.rtcPeerConnection.addIceCandidate(new RTCIceCandidate({
        candidate: candidate,
        sdpMLineIndex: 0,
        sdpMid: "0"
      }));
    }
  }, {
    key: "sendVideoData",
    value: function sendVideoData(data) {
      try {
        this.dataChannel.send(data);
      } catch (ex) {
        log.error("sendVideoData", ex);
      }

      _pubSub.default.publish(this.SEND_VIDEO_PUB_SUB_EVENT, data);
    }
  }, {
    key: "sendAudioData",
    value: function sendAudioData(data) {
      try {
        this.dataChannel.send(data);
      } catch (ex) {
        log.error("sendVideoData", ex);
      }
    }
  }, {
    key: "listenOnDataAndSend",
    value: function listenOnDataAndSend(subscribeEventName) {
      var _this8 = this;

      var token = _pubSub.default.on(subscribeEventName, function (msg, data) {
        _this8.sendVideoData(data);
      });

      this.pubSubTokenList.push(token);
    }
  }, {
    key: "listenOnDataAndSendAudio",
    value: function listenOnDataAndSendAudio(subscribeEventName) {
      var _this9 = this;

      var token = _pubSub.default.on(subscribeEventName, function (msg, data) {
        _this9.sendAudioData(data);
      });

      this.pubSubTokenList.push(token);
    }
  }]);
  return RTCPeerConnectionUtil;
}();

exports.RTCPeerConnectionUtil = RTCPeerConnectionUtil;

/***/ }),

/***/ "./src/common/WebGLCanvas.js":
/*!***********************************!*\
  !*** ./src/common/WebGLCanvas.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

//
//  Copyright (c) 2014 Sam Leitch. All rights reserved.
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to
//  deal in the Software without restriction, including without limitation the
//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
//  sell copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
//  IN THE SOFTWARE.
//
// modified by Matthias Behrens (github.com/soliton4) for Broadway.js

/**
 * This class can be used to render output pictures from an H264bsdDecoder to a canvas element.
 * If available the content is rendered using WebGL.
 */
function H264bsdCanvas(canvas, forceNoGL, contextOptions) {
  this.canvasElement = canvas;
  this.contextOptions = contextOptions;
  this.glInitSucceed = 0;
  H264bsdCanvas.prototype.ROTATION_CLOCK0 = 0;
  H264bsdCanvas.prototype.ROTATION_CLOCK90 = 1;
  H264bsdCanvas.prototype.ROTATION_CLOCK180 = 2;
  H264bsdCanvas.prototype.ROTATION_CLOCK270 = 3;
  if (!forceNoGL) this.initContextGL();

  if (this.contextGL) {
    this.webGLContextLostProtect();
    this.initProgram();
    this.initBuffers();
    this.initTextures();
    var a = new ArrayBuffer(4);
    this.dummpyCursor = new Uint8Array(a);
    this.dummpyWaterMark = new Uint8Array(a);
    this.glInitSucceed = this.contextGL.getError() ? 0 : 1;
    this.cursorWidth = 0;
    this.cursorHeight = 0;
    this.hasCursor = 0;
    this.hasWaterMark = 0;
    this.hasWholeFrame = 0;
    this.croppingParams = {};
    this.croppingParams.top = 0;
    this.croppingParams.left = 0;
    this.croppingParams.width = 0;
    this.croppingParams.height = 0;
    this.textureWidth = 0;
    this.textureHeight = 0;
    this.canvasWidth = 0;
    this.canvasHeight = 0;
    this.picRotation = -1;
    this.bgColor = [0, 0, 0];
    this.cx = 0;
    this.cy = 0;
    this.cw = 0;
    this.ch = 0;
    this.colorRange = -1; // 0: limited , 1 full
  }

  ;
}

;

H264bsdCanvas.prototype.webGLContextLostProtect = function () {
  var _this = this;

  var canvas = this.canvasElement;
  canvas.addEventListener("webglcontextlost", function (event) {
    event.preventDefault();
    _this.contextOptions && _this.contextOptions.webglcontextlostCallback && _this.contextOptions.webglcontextlostCallback(event, _this.contextOptions.params);
  }, {
    capture: false,
    once: true
  });
  canvas.addEventListener("webglcontextrestored", function (event) {
    _this.contextOptions && _this.contextOptions.webglcontextrestoredCallback && _this.contextOptions.webglcontextrestoredCallback(event, _this.contextOptions.params);
  }, {
    capture: false,
    once: true
  });
};
/**
 * Returns true if the canvas supports WebGL
 */


H264bsdCanvas.prototype.isWebGL = function () {
  return this.contextGL;
};
/**
 * Create the GL context from the canvas element
 */


H264bsdCanvas.prototype.initContextGL = function () {
  var canvas = this.canvasElement;
  var gl = null;
  var validContextNames = ["webgl", "experimental-webgl", "moz-webgl", "webkit-3d"];
  var nameIndex = 0;

  while (!gl && nameIndex < validContextNames.length) {
    var contextName = validContextNames[nameIndex];

    try {
      if (this.contextOptions) {
        gl = canvas.getContext(contextName, this.contextOptions);
      } else {
        gl = canvas.getContext(contextName);
      }

      ;
    } catch (e) {
      gl = null;
    }

    if (!gl || typeof gl.getParameter !== "function") {
      gl = null;
    }

    ++nameIndex;
  }

  ;
  this.contextGL = gl;
};
/**
 * Initialize GL shader program
 */


H264bsdCanvas.prototype.initProgram = function () {
  var gl = this.contextGL;
  var vertexShaderScript = ['attribute vec4 vertexPos;', 'attribute vec4 texturePos;', 'varying vec2 textureCoord;', 'void main()', '{', 'gl_Position = vertexPos;', 'textureCoord = texturePos.xy;', '}'].join('\n');
  var fragmentShaderScript = ['precision highp float;', 'varying highp vec2 textureCoord;', 'uniform sampler2D ySampler;', 'uniform sampler2D uSampler;', 'uniform sampler2D vSampler;', 'uniform sampler2D cursorSampler;', 'uniform sampler2D waterMarkSampler;', 'uniform vec4 cursorInfo;', 'uniform int colorRange;', 'const mat4 YUV2RGB_L = mat4', '(', '1.1643828125, 0, 1.59602734375, -.87078515625,', '1.1643828125, -.39176171875, -.81296875, .52959375,', '1.1643828125, 2.017234375, 0, -1.081390625,', '0, 0, 0, 1', ');', 'const mat4 YUV2RGB_F = mat4', '(', '1.0, 0, 1.402, -.701,', '1.0, -.34413, -.71414, .529135,', '1.0, 1.772, 0, -.886,', '0, 0, 0, 1', ');', 'void main(void) {', 'highp float y = texture2D(ySampler,  textureCoord).r;', 'highp float u = texture2D(uSampler,  textureCoord).r;', 'highp float v = texture2D(vSampler,  textureCoord).r;', 'vec4 c;', 'if (colorRange == 0)', '{', '  c = vec4(y, u, v, 1) * YUV2RGB_L;', '} else {', '  c = vec4(y, u, v, 1) * YUV2RGB_F;', '}', 'if (cursorInfo.z > 0.0 && textureCoord.x >= cursorInfo.x && textureCoord.y >= cursorInfo.y && ', '    textureCoord.x < cursorInfo.x+cursorInfo.z && textureCoord.y < cursorInfo.y+cursorInfo.w ){', ' vec2 cursorCoord = textureCoord - cursorInfo.xy;', ' cursorCoord /= cursorInfo.zw;', ' vec4 cursor = texture2D(cursorSampler, cursorCoord);', ' c = c*(1.0-cursor.a) + cursor*cursor.a;', '}', ' vec4 waterMark = texture2D(waterMarkSampler, textureCoord);', 'if(waterMark.r != 0.0 || waterMark.g != 0.0 || waterMark.b != 0.0){', ' //waterMark.a = 0.5', ' c = waterMark* waterMark.a+ c*(1.0-waterMark.a);', '}', 'c.a = 1.0;', 'gl_FragColor = c;', '}'].join('\n');
  var vertexShader = gl.createShader(gl.VERTEX_SHADER);
  gl.shaderSource(vertexShader, vertexShaderScript);
  gl.compileShader(vertexShader);

  if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
    console.log('Vertex shader failed to compile: ' + gl.getShaderInfoLog(vertexShader));
  }

  var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
  gl.shaderSource(fragmentShader, fragmentShaderScript);
  gl.compileShader(fragmentShader);

  if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
    console.log('Fragment shader failed to compile: ' + gl.getShaderInfoLog(fragmentShader));
  }

  var program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);

  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.log('Program failed to compile: ' + gl.getProgramInfoLog(program));
  }

  gl.useProgram(program);
  this.shaderProgram = program;
};
/**
 * Initialize vertex buffers and attach to shader program
 */


H264bsdCanvas.prototype.initBuffers = function () {
  var gl = this.contextGL;
  var program = this.shaderProgram;
  var vertexPosBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, -1, 1, 1, -1, -1, -1]), gl.STATIC_DRAW);
  var vertexPosRef = gl.getAttribLocation(program, 'vertexPos');
  gl.enableVertexAttribArray(vertexPosRef);
  gl.vertexAttribPointer(vertexPosRef, 2, gl.FLOAT, false, 0, 0);
  this.vertexPosBuffer = vertexPosBuffer;
  var texturePosBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 0, 0, 0, 1, 1, 0, 1]), gl.STATIC_DRAW);
  var texturePosRef = gl.getAttribLocation(program, 'texturePos');
  gl.enableVertexAttribArray(texturePosRef);
  gl.vertexAttribPointer(texturePosRef, 2, gl.FLOAT, false, 0, 0);
  this.texturePosBuffer = texturePosBuffer;
};
/**
 * Initialize GL textures and attach to shader program
 */


H264bsdCanvas.prototype.initTextures = function () {
  var gl = this.contextGL;
  var program = this.shaderProgram;
  gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
  var yTextureRef = this.initTexture();
  var ySamplerRef = gl.getUniformLocation(program, 'ySampler');
  gl.uniform1i(ySamplerRef, 0);
  this.yTextureRef = yTextureRef;
  var uTextureRef = this.initTexture();
  var uSamplerRef = gl.getUniformLocation(program, 'uSampler');
  gl.uniform1i(uSamplerRef, 1);
  this.uTextureRef = uTextureRef;
  var vTextureRef = this.initTexture();
  var vSamplerRef = gl.getUniformLocation(program, 'vSampler');
  gl.uniform1i(vSamplerRef, 2);
  this.vTextureRef = vTextureRef;
  var cursorTextureRef = this.initTexture();
  var cursorSamplerRef = gl.getUniformLocation(program, 'cursorSampler');
  gl.uniform1i(cursorSamplerRef, 3);
  this.cursorTextureRef = cursorTextureRef;
  var waterMarkTextureRef = this.initTexture();
  var waterMarkSamplerRef = gl.getUniformLocation(program, 'waterMarkSampler');
  gl.uniform1i(waterMarkSamplerRef, 4);
  this.waterMarkTextureRef = waterMarkTextureRef;
  var cursorInfoRef = gl.getUniformLocation(program, 'cursorInfo');
  this.cursorInfoRef = cursorInfoRef;
  var colorRangeRef = gl.getUniformLocation(program, 'colorRange');
  this.colorRangeRef = colorRangeRef;
};
/**
 * Create and configure a single texture
 */


H264bsdCanvas.prototype.initTexture = function () {
  var gl = this.contextGL;
  var textureRef = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, textureRef);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.bindTexture(gl.TEXTURE_2D, null);
  return textureRef;
};

H264bsdCanvas.prototype.cleanup = function () {
  if (this.glInitSucceed) {
    var gl = this.contextGL;
    gl.deleteProgram(this.program);
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.activeTexture(gl.TEXTURE2);
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.activeTexture(gl.TEXTURE3);
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    gl.deleteTexture(this.yTextureRef);
    gl.deleteTexture(this.uTextureRef);
    gl.deleteTexture(this.vTextureRef);
    gl.deleteTexture(this.cursorTextureRef);
    gl.deleteTexture(this.waterMarkTextureRef);
    gl.deleteBuffer(this.vertexPosBuffer);
    gl.deleteBuffer(this.texturePosBuffer);
    this.contextGL = null;
    this.glInitSucceed = 0;
  }
};
/**
 * Draw picture data to the canvas.
 * If this object is using WebGL, the data must be an I420 formatted ArrayBuffer,
 * Otherwise, data must be an RGBA formatted ArrayBuffer.
 */


H264bsdCanvas.prototype.drawNextOutputPicture = function (width, height, croppingParams, data) {
  var colorRange = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var gl = this.contextGL;

  if (gl) {
    this.drawNextOuptutPictureGL(width, height, croppingParams, data, colorRange);
  } else {
    this.drawNextOuptutPictureRGBA(width, height, croppingParams, data);
  }
};

function updateVertexInfo(glCanvas, picWidth, picHeight, rotation) {
  var gl = glCanvas.contextGL;
  var w = rotation == glCanvas.ROTATION_CLOCK90 || rotation == glCanvas.ROTATION_CLOCK270 ? picHeight : picWidth;
  var h = rotation == glCanvas.ROTATION_CLOCK90 || rotation == glCanvas.ROTATION_CLOCK270 ? picWidth : picHeight;
  var left, top, right, bottom;
  var dw = w / h * gl.canvas.height;
  var dh = h / w * gl.canvas.width;

  if (dw > gl.canvas.width) {
    left = 0;
    right = 1;
    top = (gl.canvas.height - dh) / 2 / gl.canvas.height;
    bottom = 1 - top;
  } else {
    top = 0;
    bottom = 1;
    left = (gl.canvas.width - dw) / 2 / gl.canvas.width;
    right = 1 - left;
  }

  left = left * 2 - 1;
  right = right * 2 - 1;
  top = 1 - top * 2;
  bottom = 1 - bottom * 2;
  var vertexPosValues = new Float32Array([right, top, left, top, right, bottom, left, bottom]);
  gl.bindBuffer(gl.ARRAY_BUFFER, glCanvas.vertexPosBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, vertexPosValues, gl.DYNAMIC_DRAW);
}

function updateTextureInfo(glCanvas, width, height, croppingParams, rotation) {
  var gl = glCanvas.contextGL;
  var tTop = croppingParams.top / height;
  var tLeft = croppingParams.left / width;
  var tBottom = tTop + croppingParams.height / height;
  var tRight = tLeft + croppingParams.width / width;
  var texInfo = [tLeft, tTop, tRight, tTop, tRight, tBottom, tLeft, tBottom];

  if (rotation == glCanvas.ROTATION_CLOCK90) {
    texInfo.unshift(texInfo[6], texInfo[7]);
    texInfo = texInfo.slice(0, 8);
  }

  if (rotation == glCanvas.ROTATION_CLOCK180) {
    texInfo.unshift(texInfo[4], texInfo[5], texInfo[6], texInfo[7]);
    texInfo = texInfo.slice(0, 8);
  }

  if (rotation == glCanvas.ROTATION_CLOCK270) {
    texInfo.push(texInfo[0], texInfo[1]);
    texInfo = texInfo.slice(2);
  }

  var a = texInfo[0];
  var b = texInfo[1];
  texInfo[0] = texInfo[2];
  texInfo[1] = texInfo[3];
  texInfo[2] = a;
  texInfo[3] = b;
  var texturePosValues = new Float32Array(texInfo);
  gl.bindBuffer(gl.ARRAY_BUFFER, glCanvas.texturePosBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);
}
/**
 * Draw the next output picture using WebGL
 */


H264bsdCanvas.prototype.drawNextOuptutPictureGL = function (width, height, croppingParams, data, rotation) {
  var limitedColorRange = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
  var gl = this.contextGL;
  var texturePosBuffer = this.texturePosBuffer;
  var yTextureRef = this.yTextureRef;
  var uTextureRef = this.uTextureRef;
  var vTextureRef = this.vTextureRef;
  gl.enable(gl.BLEND);
  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

  if (!gl || !this.glInitSucceed) {
    return;
  }

  if (width <= 0 || height <= 0 || !data || !data.length || data.length != width * height * 3 / 2 || croppingParams && (croppingParams.top < 0 || croppingParams.left < 0 || croppingParams.left + croppingParams.width > width || croppingParams.top + croppingParams.height > height)) {
    return;
  }

  rotation = rotation ? rotation : this.ROTATION_CLOCK0;
  croppingParams = croppingParams ? croppingParams : {
    "top": 0,
    "left": 0,
    "width": width,
    "height": height
  };
  var picSizeChange = croppingParams.width != this.croppingParams.width || croppingParams.height != this.croppingParams.height;
  var picPosChange = croppingParams.top != this.croppingParams.top || croppingParams.left != this.croppingParams.left;
  var canvasSizeChange = gl.canvas.width != this.canvasWidth || gl.canvas.height != this.canvasHeight;
  var texSizeChange = width != this.textureWidth || height != this.textureHeight;
  var rotationChange = rotation != this.picRotation;

  if (picSizeChange || canvasSizeChange || rotationChange) {
    updateVertexInfo(this, croppingParams.width, croppingParams.height, rotation);
  }

  if (picSizeChange || picPosChange || texSizeChange || rotationChange) {
    updateTextureInfo(this, width, height, croppingParams, rotation);
  }

  var colorRange = limitedColorRange ? 0 : 1;

  if (colorRange != this.colorRange) {
    gl.uniform1i(this.colorRangeRef, colorRange);
    this.colorRange = colorRange;
  }

  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
  this.croppingParams = croppingParams;
  this.textureWidth = width;
  this.textureHeight = height;
  this.picRotation = rotation;
  this.canvasWidth = gl.canvas.width;
  this.canvasHeight = gl.canvas.height; // if (croppingParams === null) {
  //     gl.viewport(0, 0, width, height);
  // } else {
  //     gl.viewport(0, 0, croppingParams.width, croppingParams.height);
  //     var tTop = croppingParams.top / height;
  //     var tLeft = croppingParams.left / width;
  //     var tBottom = croppingParams.height / height;
  //     var tRight = croppingParams.width / width;
  //     var texturePosValues = new Float32Array([tRight, tTop, tLeft, tTop, tRight, tBottom, tLeft, tBottom]);
  //     gl.bindBuffer(gl.ARRAY_BUFFER, texturePosBuffer);
  //     gl.bufferData(gl.ARRAY_BUFFER, texturePosValues, gl.DYNAMIC_DRAW);
  // }

  gl.clearColor(this.bgColor[0], this.bgColor[1], this.bgColor[2], 255);
  gl.clear(gl.COLOR_BUFFER_BIT);
  var i420Data = data;
  var yDataLength = width * height;
  var yData = i420Data.subarray(0, yDataLength);
  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, yTextureRef);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width, height, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, yData);
  var cbDataLength = width / 2 * height / 2;
  var cbData = i420Data.subarray(yDataLength, yDataLength + cbDataLength);
  gl.activeTexture(gl.TEXTURE1);
  gl.bindTexture(gl.TEXTURE_2D, uTextureRef);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width / 2, height / 2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, cbData);
  var crDataLength = cbDataLength;
  var crData = i420Data.subarray(yDataLength + cbDataLength, yDataLength + cbDataLength + crDataLength);
  gl.activeTexture(gl.TEXTURE2);
  gl.bindTexture(gl.TEXTURE_2D, vTextureRef);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.LUMINANCE, width / 2, height / 2, 0, gl.LUMINANCE, gl.UNSIGNED_BYTE, crData);
  gl.activeTexture(gl.TEXTURE3);
  gl.bindTexture(gl.TEXTURE_2D, this.cursorTextureRef);

  if (!this.hasCursor) {
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.dummpyCursor);
  }

  gl.activeTexture(gl.TEXTURE4);
  gl.bindTexture(gl.TEXTURE_2D, this.waterMarkTextureRef);

  if (!this.hasWaterMark) {
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.dummpyWaterMark);
  }

  gl.uniform4f(this.cursorInfoRef, this.cx, this.cy, this.cw, this.ch);
  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  this.hasWholeFrame = 1;
};

H264bsdCanvas.prototype.updateTextureBlock = function (width, height, x, y, data) {
  var gl = this.contextGL;

  if (gl && this.glInitSucceed) {
    var i420Data = data;

    if (!this.hasWholeFrame || width <= 0 || height <= 0 || x < 0 || y < 0 || x + width > this.textureWidth || y + height > this.textureHeight || !data || data.length != width * height * 3 / 2) {
      return;
    }

    var yTextureRef = this.yTextureRef;
    var uTextureRef = this.uTextureRef;
    var vTextureRef = this.vTextureRef;
    var yDataLength = width * height;
    var yData = i420Data.subarray(0, yDataLength);
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, yTextureRef);
    gl.texSubImage2D(gl.TEXTURE_2D, 0, x, y, width, height, gl.LUMINANCE, gl.UNSIGNED_BYTE, yData);
    var cbDataLength = width / 2 * height / 2;
    var cbData = i420Data.subarray(yDataLength, yDataLength + cbDataLength);
    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, uTextureRef);
    gl.texSubImage2D(gl.TEXTURE_2D, 0, x / 2, y / 2, width / 2, height / 2, gl.LUMINANCE, gl.UNSIGNED_BYTE, cbData);
    var crDataLength = cbDataLength;
    var crData = i420Data.subarray(yDataLength + cbDataLength, yDataLength + cbDataLength + crDataLength);
    gl.activeTexture(gl.TEXTURE2);
    gl.bindTexture(gl.TEXTURE_2D, vTextureRef);
    gl.texSubImage2D(gl.TEXTURE_2D, 0, x / 2, y / 2, width / 2, height / 2, gl.LUMINANCE, gl.UNSIGNED_BYTE, crData);
  } else {
    return;
  }
};

H264bsdCanvas.prototype.updateCursor = function (width, height, data) {
  var gl = this.contextGL;

  if (gl && this.glInitSucceed) {
    if (width <= 0 || height <= 0 || !data || data.length != width * height * 4) {
      return;
    }

    gl.activeTexture(gl.TEXTURE3);
    gl.bindTexture(gl.TEXTURE_2D, this.cursorTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
    this.cursorWidth = width;
    this.cursorHeight = height;
    this.hasCursor = 1;
  } else {
    return;
  }
};

H264bsdCanvas.prototype.updateWatherMark = function (width, height, data) {
  var gl = this.contextGL; // debugger

  if (gl && this.glInitSucceed) {
    if (width <= 0 || height <= 0 || !data || data.length != width * height * 4) {
      return;
    }

    gl.activeTexture(gl.TEXTURE4);
    gl.bindTexture(gl.TEXTURE_2D, this.waterMarkTextureRef);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data); // gl.generateMipmap(gl.TEXTURE_2D)
    // this.cursorWidth = width;
    // this.cursorHeight = height;

    this.hasWaterMark = 1;
  } else {
    return;
  }
};

H264bsdCanvas.prototype.draw = function (withCursor, cursorX, cursorY, cursorLogicWidth, cursorLogicHeight) {
  var gl = this.contextGL;

  if (gl && this.glInitSucceed) {
    if (!this.hasWholeFrame || withCursor && (cursorLogicWidth < 0 || cursorLogicHeight < 0)) {
      return;
    }

    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    var texturePosBuffer = this.texturePosBuffer;
    var yTextureRef = this.yTextureRef;
    var uTextureRef = this.uTextureRef;
    var vTextureRef = this.vTextureRef;
    var cursorTextureRef = this.cursorTextureRef;
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, yTextureRef);
    gl.activeTexture(gl.TEXTURE1);
    gl.bindTexture(gl.TEXTURE_2D, uTextureRef);
    gl.activeTexture(gl.TEXTURE2);
    gl.bindTexture(gl.TEXTURE_2D, vTextureRef);
    gl.activeTexture(gl.TEXTURE3);
    gl.bindTexture(gl.TEXTURE_2D, cursorTextureRef);
    gl.activeTexture(gl.TEXTURE4);
    gl.bindTexture(gl.TEXTURE_2D, this.waterMarkTextureRef);

    if (!this.hasWaterMark) {
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.dummpyWaterMark);
    }

    if (withCursor && this.hasCursor) {
      var cx = cursorX / this.croppingParams.width;
      var cy = cursorY / this.croppingParams.height;
      var cw = cursorLogicWidth / this.croppingParams.width;
      var ch = cursorLogicHeight / this.croppingParams.height;
      this.cx = cx;
      this.cy = cy;
      this.cw = cw;
      this.ch = ch;
      gl.uniform4f(this.cursorInfoRef, cx, cy, cw, ch);
    } else {
      gl.uniform4f(this.cursorInfoRef, 0, 0, 0, 0);
    }

    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  } else {
    return;
  }
};

H264bsdCanvas.prototype.clear = function () {
  var gl = this.contextGL;

  if (gl && this.glInitSucceed) {
    gl.clearColor(this.bgColor[0], this.bgColor[1], this.bgColor[2], 255);
    gl.clear(gl.COLOR_BUFFER_BIT);
    this.hasWholeFrame = 0;
    this.hasCursor = 0;
  }
};

H264bsdCanvas.prototype.test_changeColorRange = function (limitedColorRange) {
  var gl = this.contextGL;

  if (gl && this.glInitSucceed) {
    colorRange = limitedColorRange ? 0 : 1;

    if (colorRange != this.colorRange) {
      gl.uniform1i(this.colorRangeRef, colorRange);
      this.colorRange = colorRange;
      this.draw(0);
    }
  }
};
/**
 * Draw next output picture using ARGB data on a 2d canvas.
 */


H264bsdCanvas.prototype.drawNextOuptutPictureRGBA = function (width, height, croppingParams, data) {
  var canvas = this.canvasElement;
  var croppingParams = null;
  var argbData = data;
  var ctx = canvas.getContext('2d');
  var imageData = ctx.getImageData(0, 0, width, height);
  imageData.data.set(argbData);

  if (croppingParams === null) {
    ctx.putImageData(imageData, 0, 0);
  } else {
    ctx.putImageData(imageData, -croppingParams.left, -croppingParams.top, 0, 0, croppingParams.width, croppingParams.height);
  }
};

var _default = H264bsdCanvas;
exports.default = _default;

/***/ }),

/***/ "./src/common/constant/Constant.js":
/*!*****************************************!*\
  !*** ./src/common/constant/Constant.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MONITOR_LOG_DASHBOARD_DATACHANNEL_PARSE_SEPARATOR = exports.CONFIG = exports.default = void 0;
var _default = {
  SOCKET_CLOSE_TIMEOUT: 4000 // 4000ms

  /**
   * Some configuration that helps the SDK incrementally enhance
   */

};
exports.default = _default;
var CONFIG = {
  IS_SUPPORT_VIDEO_DATACHANNEL: true
};
exports.CONFIG = CONFIG;
var MONITOR_LOG_DASHBOARD_DATACHANNEL_PARSE_SEPARATOR = "{[WLCCONT]}";
exports.MONITOR_LOG_DASHBOARD_DATACHANNEL_PARSE_SEPARATOR = MONITOR_LOG_DASHBOARD_DATACHANNEL_PARSE_SEPARATOR;

/***/ }),

/***/ "./src/common/detectWasmFeatures.js":
/*!******************************************!*\
  !*** ./src/common/detectWasmFeatures.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var wasmfeature = function wasmfeature() {};

wasmfeature.prototype = {
  threads: function () {
    var _threads = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2() {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", function () {
                var _ref = (0, _asyncToGenerator2.default)(
                /*#__PURE__*/
                _regenerator.default.mark(function _callee(e) {
                  return _regenerator.default.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (WebAssembly.validate(e)) {
                            _context.next = 2;
                            break;
                          }

                          return _context.abrupt("return", !1);

                        case 2:
                          _context.prev = 2;
                          return _context.abrupt("return", (new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), !0));

                        case 6:
                          _context.prev = 6;
                          _context.t0 = _context["catch"](2);
                          return _context.abrupt("return", !1);

                        case 9:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, this, [[2, 6]]);
                }));

                return function (_x) {
                  return _ref.apply(this, arguments);
                };
              }()(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11])));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function threads() {
      return _threads.apply(this, arguments);
    };
  }(),
  simd: function () {
    var _simd = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3() {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11])));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function simd() {
      return _simd.apply(this, arguments);
    };
  }()
};

var _default = new wasmfeature();

exports.default = _default;

/***/ }),

/***/ "./src/common/enums/CommonEnums.js":
/*!*****************************************!*\
  !*** ./src/common/enums/CommonEnums.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MAIN_WORKER_COMMAND = exports.WORKER_TYPE = exports.workerStartTypeToDevToolWorkerNameEnum = exports.OS_ENUM = exports.ConnectionType = exports.EncodeDecodeEnum = exports.ZOOM_CONNECTION_TYPE = void 0;
// this file would be used in web worker
// Notice : safe api in web worker, some js api are not supported in web worker
// Not supported Api Example : localStorage, DomNode, ...
var ZOOM_CONNECTION_TYPE = {
  ZOOM_CONNECTION_COMMAND: 0,
  ZOOM_CONNECTION_AUDIO: 1,
  ZOOM_CONNECTION_VIDEO: 2,
  ZOOM_CONNECTION_SHARING_JPEG: 3,
  ZOOM_CONNECTION_SHARING_VIDEO: 4,
  ZOOM_CONNECTION_MEDIA_LOG: 5,
  //FOR DEBUG ONLY
  ZOOM_CONNECTION_SHARING_REMOTE_CONTROL: 6,
  ZOOM_CONNECTION_UNKNOW: 7
};
/**
 * encode could be videoEncode, audioEncode, sharingEncode ...
 */

exports.ZOOM_CONNECTION_TYPE = ZOOM_CONNECTION_TYPE;
var EncodeDecodeEnum = {
  encode: 1,
  decode: 2
};
/**
 * integrate with monitor log server
 * in monitor log server 1 means audio, and ...
 * @type {{AUDIO: number, SHARING: number, VIDEO: number}}
 */

exports.EncodeDecodeEnum = EncodeDecodeEnum;
var ConnectionType = {
  AUDIO: 1,
  SHARING: 2,
  VIDEO: 3
};
/**
 * operation system enums
 * rwg command websocket will return this information, evt is 7937
 */

exports.ConnectionType = ConnectionType;
var OS_ENUM = {
  UNKNOWN: 0,
  WIN: 1,
  MAC: 2,
  PAD: 3,
  MOBILE: 4,
  CALL_IN: 5,
  LINUX: 6,
  WEB: 7,
  CHROME: 8
};
/**
 * Example:
 *  md5("videoEnc-zoom") = 27D10C2BC0312F11BE79BF9AA0668220
 *  md5("videoDec-zoom") = D5AC365D95ACF72EE1E8D0FED594C0CD
 */

exports.OS_ENUM = OS_ENUM;
var workerStartTypeToDevToolWorkerNameEnum = {
  "0": "27D10C2BC0312F11BE79BF9AA0668220",
  "1": "D5AC365D95ACF72EE1E8D0FED594C0CD",
  "2": "AEF36FC5C22CE7AAF5DC05913633EDF7",
  "3": "BD3DF97B715748F6B6A5F59271A2D1A0",
  "4": "D0AEDC804599C31391A946904C74595F",
  "5": "65DEAF0AA73F220ED401B90CFFCDFF23"
};
exports.workerStartTypeToDevToolWorkerNameEnum = workerStartTypeToDevToolWorkerNameEnum;
var WORKER_TYPE = {
  VIDEO_ENCODE: "0",
  VIDEO_DECODE: "1",
  AUDIO_ENCODE: "2",
  AUDIO_DECODE: "3",
  SHARING_ENCODE: "4",
  SHARING_DECODE: "5"
};
/**
 * Previously, the main thread sent to the thread's command is all hard-coded,
 * from 2020-4-15, unified management
 */

exports.WORKER_TYPE = WORKER_TYPE;
var MAIN_WORKER_COMMAND = {
  SET_USER_NODE_LIST: "SET_USER_NODE_LIST"
};
exports.MAIN_WORKER_COMMAND = MAIN_WORKER_COMMAND;

/***/ }),

/***/ "./src/common/jsEvent.js":
/*!*******************************!*\
  !*** ./src/common/jsEvent.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.INIT_SUCCESS_AUDIO = exports.INIT_SUCCESS_VIDEO = exports.INIT_SUCCESS = exports.Video_Enc_WebSocket_FAILED = exports.Sharing_Dec_WebSocket_FAILED = exports.Sharing_Handle_FAILED = exports.Audio_Mute = exports.Sharing_Dec_WASM_FAILED = exports.Video_Enc_Handle_FAILED = exports.Video_Enc_WASM_FAILED = exports.Video_Dec_WebSocket_FAILED = exports.Video_Dec_Handle_FAILED = exports.Video_Dec_WASM_FAILED = exports.Audio_Enc_Handle_FAILED = exports.Audio_Enc_WASM_FAILED = exports.Audio_Dec_WebSocket_FAILED = exports.Audio_Dec_Handle_FAILED = exports.Audio_Dec_WASM_FAILED = exports.CURRENT_SSRC_TIME = exports.AES_GCM_IV_CALLBACK_FROM_WASM = exports.AES_GCM_IV_TO_WASM = exports.SHARING_GET_IMAGE_DATA_WRONG = exports.SHARING_RENDER_MONITOR_LOG = exports.Sharing_Width_And_Height_Info = exports.VIDEO_RENDER_MONITOR_LOG = exports.VIDEO_RESOLUTION_UPDATE = exports.AUDIO_ENCODED_DATA = exports.VIDEO_DATA_DROP_RATIO = exports.VIDEO_DROP_RATIO_FROM_WCL = exports.VIDEO_ENCODED_DATA = exports.SHARING_DECODE_MESSAGE = exports.MOUSE_DATA_VIDEO_MODE = exports.SHARING_DATA_VIDEO_MODE = exports.WCL_TROUBLESHOOTING_INFO = exports.DELTA_S = exports.DELTA_C = exports.DELTA_D = exports.APP_TROUBLESHOOTING_INFO = exports.DOWNLOAD_WASM_FROM_MAIN_THREAD = exports.MONITOR_MESSAGE = exports.Video_Capture_Tick = exports.Video_Enc_WebSocket_OK = exports.DECODE_MESSAGE = exports.Sharing_Data = exports.Sharing_Handle_OK = exports.Sharing_Dec_WebSocket_OK = exports.AUDIO_DELAY = exports.Sharing_Dec_PICTURE = exports.Sharing_Dec_WASM_OK = exports.Video_Enc_Handle_OK = exports.Video_Enc_WASM_OK = exports.Video_Dec_WebSocket_OK = exports.Video_Dec_Handle_OK = exports.Video_Dec_WASM_OK = exports.Audio_Enc_Handle_OK = exports.Audio_Enc_WASM_OK = exports.Audio_Dec_WebSocket_OK = exports.Audio_Dec_Handle_OK = exports.Audio_Dec_WASM_OK = exports.USER_NODE_LIST = exports.AES_GCM_IV_VALUE = exports.RESEND_REMOTE_CONTROL_POSITION_PDU = exports.COMMAND_SOCKET_MESSAGE_NOTIFY = exports.CHANGE_CURRENT_SHARING_ACTIVE_SSRC = exports.SWITCH_CANVAS_FOR_SHARING_CAPTURE = exports.CHECK_CHROME_SHARING_EXTENSION = exports.RESUME_DESKTOP_SHARING = exports.PAUSE_DESKTOP_SHARING = exports.STOP_DESKTOP_SHARING = exports.START_DESKTOP_SHARING = exports.UPDATE_SUBSCRIBE_VIDEO = exports.CANCEL_REMOTE_CONTROL = exports.UPDATE_REMOTE_CONTROL_PROPERTIES = exports.START_REMOTE_CONTROL = exports.SWITCH_CANVAS_FOR_VIDEO_CAPTURE = exports.STOP_SHARING = exports.START_SHARING = exports.JOIN_COMPUTER_AUDIO = exports.LEAVE_COMPUTER_AUDIO = exports.REMOVE_RENDER_AUDIO = exports.WEBRTC_RESTART = exports.CHANGE_AUDIO_MIC = exports.END_MEDIA = exports.MEETING_FAIL_OVER = exports.LEAVE_MEETING = exports.REMOVE_AUDIO_CAPTURE = exports.CHANGE_CURRENT_ACTIVE_SSRC = exports.CHANGE_VIDEO_CAPTURE_DEVICE = exports.CHANGE_AUDIO_SPEAKER = exports.CHANGE_VIDEO_RESOLUTION = exports.CHANGE_FRAME_RATE = exports.MUTE_AUDIO = exports.UNMUTE_AUDIO = exports.STOP_RENDER_AUDIO = exports.ADD_RENDER_AUDIO = exports.STOP_CAPTURE_VIDEO = exports.START_CAPTURE_VIDEO = exports.STOP_RENDER_VIDEO = exports.ADD_RENDER_VIDEO = exports.START_MEDIA = void 0;
exports.MEDIA_VIDEO_REPORT_RTT = exports.MEDIA_VIDEO_REPORT_DROP_RATIO = exports.PUBSUB_EVT = exports.EVT_TYPE_WS_VIDEO_DATACHANNEL_ANSWER = exports.ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT = exports.ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT = exports.ZOOM_CONNECTION_VIDEO_OFFER_EVT = exports.VIDEO_ENCODE_DATA_FROM_WORKER = exports.AUDIO_DATA_FROM_WORKER = exports.VIDEO_DATA_FROM_WORKER = exports.SHARING_PARAM_INFO_FROM_SOCKET = exports.AUDIO_ILLEGAL = exports.AUDIO_REMOVE = exports.AUDIO_START = exports.AUDIO_STOP = exports.AUDIO_CLIPPING = exports.DESKTOP_SHARING_SYSTEM_ERROR = exports.AUDIO_SPEAKER_SET_ERROR = exports.DESKTOP_SHARING_ERROR = exports.DESKTOP_SHARING_TIME_OUT = exports.DESKTOP_SHARING_PERMISSION_DENIED = exports.DESKTOP_SHARING_CHROME_EXTENSION_UNINSTALLED = exports.USER_CANCEL_PERMISSION_REQUEST = exports.USER_STOP_DESKTOP_SHARING = exports.REMOTE_CONTROL_PASTE_TEXT_LENGTH_OVERFLOW = exports.CANCEL_REMOTE_CONTROL_FAILED = exports.START_REMOTE_CONTROL_FAILED = exports.STOP_VIDEO_CAPTURE_FAILED = exports.USER_CAMERA_IS_TAKEN_BY_OTHER_PROGRAMS = exports.USER_FORBIDDED_CAPTURE_VIDEO = exports.AUDIO_CTX_SAMPLERATE = exports.AUDIO_ZERO_DATA = exports.SHARING_DEC_THREAD_FAILED = exports.VIDEO_WEBSOCKET_BROKEN = exports.AUDIO_WEBSOCKET_BROKEN = exports.USER_FORBIDDED_CAPTURE_AUDIO = exports.INIT_FAILED_SHARING = exports.INIT_FAILED_AUDIO = exports.INIT_FAILED_VIDEO = exports.INIT_FAILED = exports.AES_GCM_IV_RESPONSE = exports.SEND_MESSAGE_TO_RWG = exports.SHARING_DECODE_MAX_SIZE = exports.CHECK_CHROME_SHARING_EXTENSION_RESPONSE = exports.DESKTOP_SHARING_CAPTURE_SUCCESS = exports.CURRENT_DESKTOP_SHARING_WIDTH_HEIGHT = exports.MONITOR_LOG = exports.REMOTE_CONTROL_COPIED_TEXT_NOTIFY = exports.CANCEL_REMOTE_CONTROL_SUCCESS = exports.START_REMOTE_CONTROL_SUCCESS = exports.STOP_VIDEO_CAPTURE_SUCCESS = exports.START_VIDEO_CAPTURE_SUCCESS = exports.CURRENT_CAPTURE_VIDEO_WIDTH_HEIGHT = exports.VIDEO_DECODE_MAX_SIZE = exports.SHARING_PARA = exports.SHARING_DATA = exports.SHARING_DEC_THREAD_OK = exports.CURRENT_VIDEO_RESOLUTION = exports.USER_GRANT_CAPTURE_AUDIO = exports.INIT_SUCCESS_SHARING = void 0;
//Notify_SDK
var START_MEDIA = 0;
exports.START_MEDIA = START_MEDIA;
var ADD_RENDER_VIDEO = 1;
exports.ADD_RENDER_VIDEO = ADD_RENDER_VIDEO;
var STOP_RENDER_VIDEO = 2;
exports.STOP_RENDER_VIDEO = STOP_RENDER_VIDEO;
var START_CAPTURE_VIDEO = 3;
exports.START_CAPTURE_VIDEO = START_CAPTURE_VIDEO;
var STOP_CAPTURE_VIDEO = 4;
exports.STOP_CAPTURE_VIDEO = STOP_CAPTURE_VIDEO;
var ADD_RENDER_AUDIO = 5;
exports.ADD_RENDER_AUDIO = ADD_RENDER_AUDIO;
var STOP_RENDER_AUDIO = 6;
exports.STOP_RENDER_AUDIO = STOP_RENDER_AUDIO;
var UNMUTE_AUDIO = 7;
exports.UNMUTE_AUDIO = UNMUTE_AUDIO;
var MUTE_AUDIO = 8;
exports.MUTE_AUDIO = MUTE_AUDIO;
var CHANGE_FRAME_RATE = 9;
exports.CHANGE_FRAME_RATE = CHANGE_FRAME_RATE;
var CHANGE_VIDEO_RESOLUTION = 10;
exports.CHANGE_VIDEO_RESOLUTION = CHANGE_VIDEO_RESOLUTION;
var CHANGE_AUDIO_SPEAKER = 11;
exports.CHANGE_AUDIO_SPEAKER = CHANGE_AUDIO_SPEAKER;
var CHANGE_VIDEO_CAPTURE_DEVICE = 12;
exports.CHANGE_VIDEO_CAPTURE_DEVICE = CHANGE_VIDEO_CAPTURE_DEVICE;
var CHANGE_CURRENT_ACTIVE_SSRC = 13;
exports.CHANGE_CURRENT_ACTIVE_SSRC = CHANGE_CURRENT_ACTIVE_SSRC;
var REMOVE_AUDIO_CAPTURE = 14;
exports.REMOVE_AUDIO_CAPTURE = REMOVE_AUDIO_CAPTURE;
var LEAVE_MEETING = 15;
exports.LEAVE_MEETING = LEAVE_MEETING;
var MEETING_FAIL_OVER = 16;
exports.MEETING_FAIL_OVER = MEETING_FAIL_OVER;
var END_MEDIA = 17;
exports.END_MEDIA = END_MEDIA;
var CHANGE_AUDIO_MIC = 18;
exports.CHANGE_AUDIO_MIC = CHANGE_AUDIO_MIC;
var WEBRTC_RESTART = 19;
exports.WEBRTC_RESTART = WEBRTC_RESTART;
var REMOVE_RENDER_AUDIO = 20;
exports.REMOVE_RENDER_AUDIO = REMOVE_RENDER_AUDIO;
var LEAVE_COMPUTER_AUDIO = 21;
exports.LEAVE_COMPUTER_AUDIO = LEAVE_COMPUTER_AUDIO;
var JOIN_COMPUTER_AUDIO = 22;
exports.JOIN_COMPUTER_AUDIO = JOIN_COMPUTER_AUDIO;
var START_SHARING = 23;
exports.START_SHARING = START_SHARING;
var STOP_SHARING = 24; // Video capture can be passed into multiple canvas, and the developer may need to output video source to any of them
// Therefore, it is necessary to support developers to switch video source output to the specified canvas

exports.STOP_SHARING = STOP_SHARING;
var SWITCH_CANVAS_FOR_VIDEO_CAPTURE = 25; // remote control when other people is sharing

exports.SWITCH_CANVAS_FOR_VIDEO_CAPTURE = SWITCH_CANVAS_FOR_VIDEO_CAPTURE;
var START_REMOTE_CONTROL = 26;
exports.START_REMOTE_CONTROL = START_REMOTE_CONTROL;
var UPDATE_REMOTE_CONTROL_PROPERTIES = 27;
exports.UPDATE_REMOTE_CONTROL_PROPERTIES = UPDATE_REMOTE_CONTROL_PROPERTIES;
var CANCEL_REMOTE_CONTROL = 28;
exports.CANCEL_REMOTE_CONTROL = CANCEL_REMOTE_CONTROL;
var UPDATE_SUBSCRIBE_VIDEO = 29;
exports.UPDATE_SUBSCRIBE_VIDEO = UPDATE_SUBSCRIBE_VIDEO;
var START_DESKTOP_SHARING = 30;
exports.START_DESKTOP_SHARING = START_DESKTOP_SHARING;
var STOP_DESKTOP_SHARING = 31;
exports.STOP_DESKTOP_SHARING = STOP_DESKTOP_SHARING;
var PAUSE_DESKTOP_SHARING = 32;
exports.PAUSE_DESKTOP_SHARING = PAUSE_DESKTOP_SHARING;
var RESUME_DESKTOP_SHARING = 33;
exports.RESUME_DESKTOP_SHARING = RESUME_DESKTOP_SHARING;
var CHECK_CHROME_SHARING_EXTENSION = 34;
exports.CHECK_CHROME_SHARING_EXTENSION = CHECK_CHROME_SHARING_EXTENSION;
var SWITCH_CANVAS_FOR_SHARING_CAPTURE = 35;
exports.SWITCH_CANVAS_FOR_SHARING_CAPTURE = SWITCH_CANVAS_FOR_SHARING_CAPTURE;
var CHANGE_CURRENT_SHARING_ACTIVE_SSRC = 36;
exports.CHANGE_CURRENT_SHARING_ACTIVE_SSRC = CHANGE_CURRENT_SHARING_ACTIVE_SSRC;
var COMMAND_SOCKET_MESSAGE_NOTIFY = 40;
exports.COMMAND_SOCKET_MESSAGE_NOTIFY = COMMAND_SOCKET_MESSAGE_NOTIFY;
var RESEND_REMOTE_CONTROL_POSITION_PDU = 41;
exports.RESEND_REMOTE_CONTROL_POSITION_PDU = RESEND_REMOTE_CONTROL_POSITION_PDU;
var AES_GCM_IV_VALUE = 42;
exports.AES_GCM_IV_VALUE = AES_GCM_IV_VALUE;
var USER_NODE_LIST = 43; //export const E2E_ENCRYPT = 30;
//web work
//success

exports.USER_NODE_LIST = USER_NODE_LIST;
var Audio_Dec_WASM_OK = 1;
exports.Audio_Dec_WASM_OK = Audio_Dec_WASM_OK;
var Audio_Dec_Handle_OK = 2;
exports.Audio_Dec_Handle_OK = Audio_Dec_Handle_OK;
var Audio_Dec_WebSocket_OK = 3;
exports.Audio_Dec_WebSocket_OK = Audio_Dec_WebSocket_OK;
var Audio_Enc_WASM_OK = 4;
exports.Audio_Enc_WASM_OK = Audio_Enc_WASM_OK;
var Audio_Enc_Handle_OK = 5;
exports.Audio_Enc_Handle_OK = Audio_Enc_Handle_OK;
var Video_Dec_WASM_OK = 7;
exports.Video_Dec_WASM_OK = Video_Dec_WASM_OK;
var Video_Dec_Handle_OK = 8;
exports.Video_Dec_Handle_OK = Video_Dec_Handle_OK;
var Video_Dec_WebSocket_OK = 9;
exports.Video_Dec_WebSocket_OK = Video_Dec_WebSocket_OK;
var Video_Enc_WASM_OK = 10;
exports.Video_Enc_WASM_OK = Video_Enc_WASM_OK;
var Video_Enc_Handle_OK = 11;
exports.Video_Enc_Handle_OK = Video_Enc_Handle_OK;
var Sharing_Dec_WASM_OK = 12;
exports.Sharing_Dec_WASM_OK = Sharing_Dec_WASM_OK;
var Sharing_Dec_PICTURE = 13;
exports.Sharing_Dec_PICTURE = Sharing_Dec_PICTURE;
var AUDIO_DELAY = 14;
exports.AUDIO_DELAY = AUDIO_DELAY;
var Sharing_Dec_WebSocket_OK = 15;
exports.Sharing_Dec_WebSocket_OK = Sharing_Dec_WebSocket_OK;
var Sharing_Handle_OK = 16;
exports.Sharing_Handle_OK = Sharing_Handle_OK;
var Sharing_Data = 17;
exports.Sharing_Data = Sharing_Data;
var DECODE_MESSAGE = 18;
exports.DECODE_MESSAGE = DECODE_MESSAGE;
var Video_Enc_WebSocket_OK = 19;
exports.Video_Enc_WebSocket_OK = Video_Enc_WebSocket_OK;
var Video_Capture_Tick = 20;
exports.Video_Capture_Tick = Video_Capture_Tick;
var MONITOR_MESSAGE = 21;
exports.MONITOR_MESSAGE = MONITOR_MESSAGE;
var DOWNLOAD_WASM_FROM_MAIN_THREAD = 30;
exports.DOWNLOAD_WASM_FROM_MAIN_THREAD = DOWNLOAD_WASM_FROM_MAIN_THREAD;
var APP_TROUBLESHOOTING_INFO = 31; //delta for download wasm;

exports.APP_TROUBLESHOOTING_INFO = APP_TROUBLESHOOTING_INFO;
var DELTA_D = 32; //delta for complile wasm;

exports.DELTA_D = DELTA_D;
var DELTA_C = 33;
exports.DELTA_C = DELTA_C;
var DELTA_S = 34;
exports.DELTA_S = DELTA_S;
var WCL_TROUBLESHOOTING_INFO = 35;
exports.WCL_TROUBLESHOOTING_INFO = WCL_TROUBLESHOOTING_INFO;
var SHARING_DATA_VIDEO_MODE = 36;
exports.SHARING_DATA_VIDEO_MODE = SHARING_DATA_VIDEO_MODE;
var MOUSE_DATA_VIDEO_MODE = 37;
exports.MOUSE_DATA_VIDEO_MODE = MOUSE_DATA_VIDEO_MODE;
var SHARING_DECODE_MESSAGE = 38;
exports.SHARING_DECODE_MESSAGE = SHARING_DECODE_MESSAGE;
var VIDEO_ENCODED_DATA = 39;
exports.VIDEO_ENCODED_DATA = VIDEO_ENCODED_DATA;
var VIDEO_DROP_RATIO_FROM_WCL = 40;
exports.VIDEO_DROP_RATIO_FROM_WCL = VIDEO_DROP_RATIO_FROM_WCL;
var VIDEO_DATA_DROP_RATIO = 41;
exports.VIDEO_DATA_DROP_RATIO = VIDEO_DATA_DROP_RATIO;
var AUDIO_ENCODED_DATA = 42;
exports.AUDIO_ENCODED_DATA = AUDIO_ENCODED_DATA;
var VIDEO_RESOLUTION_UPDATE = 50;
exports.VIDEO_RESOLUTION_UPDATE = VIDEO_RESOLUTION_UPDATE;
var VIDEO_RENDER_MONITOR_LOG = 51;
exports.VIDEO_RENDER_MONITOR_LOG = VIDEO_RENDER_MONITOR_LOG;
var Sharing_Width_And_Height_Info = 52;
exports.Sharing_Width_And_Height_Info = Sharing_Width_And_Height_Info;
var SHARING_RENDER_MONITOR_LOG = 53;
exports.SHARING_RENDER_MONITOR_LOG = SHARING_RENDER_MONITOR_LOG;
var SHARING_GET_IMAGE_DATA_WRONG = 54;
exports.SHARING_GET_IMAGE_DATA_WRONG = SHARING_GET_IMAGE_DATA_WRONG;
var AES_GCM_IV_TO_WASM = 55;
exports.AES_GCM_IV_TO_WASM = AES_GCM_IV_TO_WASM;
var AES_GCM_IV_CALLBACK_FROM_WASM = 56;
exports.AES_GCM_IV_CALLBACK_FROM_WASM = AES_GCM_IV_CALLBACK_FROM_WASM;
var CURRENT_SSRC_TIME = 57; //failed

exports.CURRENT_SSRC_TIME = CURRENT_SSRC_TIME;
var Audio_Dec_WASM_FAILED = -1;
exports.Audio_Dec_WASM_FAILED = Audio_Dec_WASM_FAILED;
var Audio_Dec_Handle_FAILED = -2;
exports.Audio_Dec_Handle_FAILED = Audio_Dec_Handle_FAILED;
var Audio_Dec_WebSocket_FAILED = -3;
exports.Audio_Dec_WebSocket_FAILED = Audio_Dec_WebSocket_FAILED;
var Audio_Enc_WASM_FAILED = -4;
exports.Audio_Enc_WASM_FAILED = Audio_Enc_WASM_FAILED;
var Audio_Enc_Handle_FAILED = -5;
exports.Audio_Enc_Handle_FAILED = Audio_Enc_Handle_FAILED;
var Video_Dec_WASM_FAILED = -7;
exports.Video_Dec_WASM_FAILED = Video_Dec_WASM_FAILED;
var Video_Dec_Handle_FAILED = -8;
exports.Video_Dec_Handle_FAILED = Video_Dec_Handle_FAILED;
var Video_Dec_WebSocket_FAILED = -9;
exports.Video_Dec_WebSocket_FAILED = Video_Dec_WebSocket_FAILED;
var Video_Enc_WASM_FAILED = -10;
exports.Video_Enc_WASM_FAILED = Video_Enc_WASM_FAILED;
var Video_Enc_Handle_FAILED = -11;
exports.Video_Enc_Handle_FAILED = Video_Enc_Handle_FAILED;
var Sharing_Dec_WASM_FAILED = -12;
exports.Sharing_Dec_WASM_FAILED = Sharing_Dec_WASM_FAILED;
var Audio_Mute = -13;
exports.Audio_Mute = Audio_Mute;
var Sharing_Handle_FAILED = -14;
exports.Sharing_Handle_FAILED = Sharing_Handle_FAILED;
var Sharing_Dec_WebSocket_FAILED = -15;
exports.Sharing_Dec_WebSocket_FAILED = Sharing_Dec_WebSocket_FAILED;
var Video_Enc_WebSocket_FAILED = -16; // export const AUDIO_CLIPPING = -16;
//NOTIFY_APP
//success

exports.Video_Enc_WebSocket_FAILED = Video_Enc_WebSocket_FAILED;
var INIT_SUCCESS = 1;
exports.INIT_SUCCESS = INIT_SUCCESS;
var INIT_SUCCESS_VIDEO = 1.1;
exports.INIT_SUCCESS_VIDEO = INIT_SUCCESS_VIDEO;
var INIT_SUCCESS_AUDIO = 1.2;
exports.INIT_SUCCESS_AUDIO = INIT_SUCCESS_AUDIO;
var INIT_SUCCESS_SHARING = 1.3;
exports.INIT_SUCCESS_SHARING = INIT_SUCCESS_SHARING;
var USER_GRANT_CAPTURE_AUDIO = 2;
exports.USER_GRANT_CAPTURE_AUDIO = USER_GRANT_CAPTURE_AUDIO;
var CURRENT_VIDEO_RESOLUTION = 3;
exports.CURRENT_VIDEO_RESOLUTION = CURRENT_VIDEO_RESOLUTION;
var SHARING_DEC_THREAD_OK = 4;
exports.SHARING_DEC_THREAD_OK = SHARING_DEC_THREAD_OK;
var SHARING_DATA = 5;
exports.SHARING_DATA = SHARING_DATA;
var SHARING_PARA = 6;
exports.SHARING_PARA = SHARING_PARA;
var VIDEO_DECODE_MAX_SIZE = 7;
/**
 * Returns the width and height of the video stream that's from camera (videoWidth, videoHeight)
 * @type {number}
 */

exports.VIDEO_DECODE_MAX_SIZE = VIDEO_DECODE_MAX_SIZE;
var CURRENT_CAPTURE_VIDEO_WIDTH_HEIGHT = 8;
exports.CURRENT_CAPTURE_VIDEO_WIDTH_HEIGHT = CURRENT_CAPTURE_VIDEO_WIDTH_HEIGHT;
var START_VIDEO_CAPTURE_SUCCESS = 9;
exports.START_VIDEO_CAPTURE_SUCCESS = START_VIDEO_CAPTURE_SUCCESS;
var STOP_VIDEO_CAPTURE_SUCCESS = 10;
exports.STOP_VIDEO_CAPTURE_SUCCESS = STOP_VIDEO_CAPTURE_SUCCESS;
var START_REMOTE_CONTROL_SUCCESS = 11;
exports.START_REMOTE_CONTROL_SUCCESS = START_REMOTE_CONTROL_SUCCESS;
var CANCEL_REMOTE_CONTROL_SUCCESS = 12;
/**
 * return copied text from websocket/internet/the other side computer
 * @type {number}
 */

exports.CANCEL_REMOTE_CONTROL_SUCCESS = CANCEL_REMOTE_CONTROL_SUCCESS;
var REMOTE_CONTROL_COPIED_TEXT_NOTIFY = 13;
exports.REMOTE_CONTROL_COPIED_TEXT_NOTIFY = REMOTE_CONTROL_COPIED_TEXT_NOTIFY;
var MONITOR_LOG = 14;
exports.MONITOR_LOG = MONITOR_LOG;
var CURRENT_DESKTOP_SHARING_WIDTH_HEIGHT = 15;
exports.CURRENT_DESKTOP_SHARING_WIDTH_HEIGHT = CURRENT_DESKTOP_SHARING_WIDTH_HEIGHT;
var DESKTOP_SHARING_CAPTURE_SUCCESS = 16;
exports.DESKTOP_SHARING_CAPTURE_SUCCESS = DESKTOP_SHARING_CAPTURE_SUCCESS;
var CHECK_CHROME_SHARING_EXTENSION_RESPONSE = 17;
exports.CHECK_CHROME_SHARING_EXTENSION_RESPONSE = CHECK_CHROME_SHARING_EXTENSION_RESPONSE;
var SHARING_DECODE_MAX_SIZE = 18;
exports.SHARING_DECODE_MAX_SIZE = SHARING_DECODE_MAX_SIZE;
var SEND_MESSAGE_TO_RWG = 20;
exports.SEND_MESSAGE_TO_RWG = SEND_MESSAGE_TO_RWG;
var AES_GCM_IV_RESPONSE = 21; //failed

exports.AES_GCM_IV_RESPONSE = AES_GCM_IV_RESPONSE;
var INIT_FAILED = -1;
exports.INIT_FAILED = INIT_FAILED;
var INIT_FAILED_VIDEO = -1.1;
exports.INIT_FAILED_VIDEO = INIT_FAILED_VIDEO;
var INIT_FAILED_AUDIO = -1.2;
exports.INIT_FAILED_AUDIO = INIT_FAILED_AUDIO;
var INIT_FAILED_SHARING = -1.3;
exports.INIT_FAILED_SHARING = INIT_FAILED_SHARING;
var USER_FORBIDDED_CAPTURE_AUDIO = -2;
exports.USER_FORBIDDED_CAPTURE_AUDIO = USER_FORBIDDED_CAPTURE_AUDIO;
var AUDIO_WEBSOCKET_BROKEN = -3;
exports.AUDIO_WEBSOCKET_BROKEN = AUDIO_WEBSOCKET_BROKEN;
var VIDEO_WEBSOCKET_BROKEN = -4;
exports.VIDEO_WEBSOCKET_BROKEN = VIDEO_WEBSOCKET_BROKEN;
var SHARING_DEC_THREAD_FAILED = -5;
exports.SHARING_DEC_THREAD_FAILED = SHARING_DEC_THREAD_FAILED;
var AUDIO_ZERO_DATA = -6;
exports.AUDIO_ZERO_DATA = AUDIO_ZERO_DATA;
var AUDIO_CTX_SAMPLERATE = -7;
exports.AUDIO_CTX_SAMPLERATE = AUDIO_CTX_SAMPLERATE;
var USER_FORBIDDED_CAPTURE_VIDEO = -8;
exports.USER_FORBIDDED_CAPTURE_VIDEO = USER_FORBIDDED_CAPTURE_VIDEO;
var USER_CAMERA_IS_TAKEN_BY_OTHER_PROGRAMS = -9;
exports.USER_CAMERA_IS_TAKEN_BY_OTHER_PROGRAMS = USER_CAMERA_IS_TAKEN_BY_OTHER_PROGRAMS;
var STOP_VIDEO_CAPTURE_FAILED = -10;
exports.STOP_VIDEO_CAPTURE_FAILED = STOP_VIDEO_CAPTURE_FAILED;
var START_REMOTE_CONTROL_FAILED = -11;
exports.START_REMOTE_CONTROL_FAILED = START_REMOTE_CONTROL_FAILED;
var CANCEL_REMOTE_CONTROL_FAILED = -12;
exports.CANCEL_REMOTE_CONTROL_FAILED = CANCEL_REMOTE_CONTROL_FAILED;
var REMOTE_CONTROL_PASTE_TEXT_LENGTH_OVERFLOW = -14;
exports.REMOTE_CONTROL_PASTE_TEXT_LENGTH_OVERFLOW = REMOTE_CONTROL_PASTE_TEXT_LENGTH_OVERFLOW;
var USER_STOP_DESKTOP_SHARING = -15;
exports.USER_STOP_DESKTOP_SHARING = USER_STOP_DESKTOP_SHARING;
var USER_CANCEL_PERMISSION_REQUEST = -16;
exports.USER_CANCEL_PERMISSION_REQUEST = USER_CANCEL_PERMISSION_REQUEST;
var DESKTOP_SHARING_CHROME_EXTENSION_UNINSTALLED = -17;
exports.DESKTOP_SHARING_CHROME_EXTENSION_UNINSTALLED = DESKTOP_SHARING_CHROME_EXTENSION_UNINSTALLED;
var DESKTOP_SHARING_PERMISSION_DENIED = -18;
exports.DESKTOP_SHARING_PERMISSION_DENIED = DESKTOP_SHARING_PERMISSION_DENIED;
var DESKTOP_SHARING_TIME_OUT = -19;
exports.DESKTOP_SHARING_TIME_OUT = DESKTOP_SHARING_TIME_OUT;
var DESKTOP_SHARING_ERROR = -20;
exports.DESKTOP_SHARING_ERROR = DESKTOP_SHARING_ERROR;
var AUDIO_SPEAKER_SET_ERROR = -21;
exports.AUDIO_SPEAKER_SET_ERROR = AUDIO_SPEAKER_SET_ERROR;
var DESKTOP_SHARING_SYSTEM_ERROR = -22;
exports.DESKTOP_SHARING_SYSTEM_ERROR = DESKTOP_SHARING_SYSTEM_ERROR;
var AUDIO_CLIPPING = -23; //Audio Status

exports.AUDIO_CLIPPING = AUDIO_CLIPPING;
var AUDIO_STOP = 0;
exports.AUDIO_STOP = AUDIO_STOP;
var AUDIO_START = 1;
exports.AUDIO_START = AUDIO_START;
var AUDIO_REMOVE = 2;
exports.AUDIO_REMOVE = AUDIO_REMOVE;
var AUDIO_ILLEGAL = -1; // sdk inside emitted event  subscribe/publish

exports.AUDIO_ILLEGAL = AUDIO_ILLEGAL;
var SHARING_PARAM_INFO_FROM_SOCKET = "SHARING_PARAM_INFO_FROM_SOCKET";
exports.SHARING_PARAM_INFO_FROM_SOCKET = SHARING_PARAM_INFO_FROM_SOCKET;
var VIDEO_DATA_FROM_WORKER = "VIDEO_DATA_FROM_WORKER";
exports.VIDEO_DATA_FROM_WORKER = VIDEO_DATA_FROM_WORKER;
var AUDIO_DATA_FROM_WORKER = "AUDIO_DATA_FROM_WORKER";
exports.AUDIO_DATA_FROM_WORKER = AUDIO_DATA_FROM_WORKER;
var VIDEO_ENCODE_DATA_FROM_WORKER = "VIDEO_ENCODE_DATA_FROM_WORKER"; // RWG/Command Socket  message evt enums

exports.VIDEO_ENCODE_DATA_FROM_WORKER = VIDEO_ENCODE_DATA_FROM_WORKER;
var ZOOM_CONNECTION_VIDEO_OFFER_EVT = 1 | 0x5000 | 0x0F00; // 24321

exports.ZOOM_CONNECTION_VIDEO_OFFER_EVT = ZOOM_CONNECTION_VIDEO_OFFER_EVT;
var ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT = 2 | 0x5000 | 0x0F00; // 24322

exports.ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT = ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT;
var ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT = 2 | 0x5000 | 0x0F00; // 24322

exports.ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT = ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT;
var EVT_TYPE_WS_VIDEO_DATACHANNEL_ANSWER = 24322; // publish/subscribe event name

exports.EVT_TYPE_WS_VIDEO_DATACHANNEL_ANSWER = EVT_TYPE_WS_VIDEO_DATACHANNEL_ANSWER;
var PUBSUB_EVT = {
  ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT: "ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT",
  ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT: "ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT",
  END_MEDIA: "END_MEDIA",
  DESTROY: "DESTROY",
  "VIDEO_DATACHANNEL_SPEED": "VIDEO_DATACHANNEL_SPEED",
  DC_COMING_MESSAGE: "DC_COMING_MESSAGE"
};
exports.PUBSUB_EVT = PUBSUB_EVT;
var MEDIA_VIDEO_REPORT_DROP_RATIO = 100;
exports.MEDIA_VIDEO_REPORT_DROP_RATIO = MEDIA_VIDEO_REPORT_DROP_RATIO;
var MEDIA_VIDEO_REPORT_RTT = 101;
exports.MEDIA_VIDEO_REPORT_RTT = MEDIA_VIDEO_REPORT_RTT;

/***/ }),

/***/ "./src/common/lock_es6.js":
/*!********************************!*\
  !*** ./src/common/lock_es6.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Lock = void 0;

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var UNLOCKED = 0;
var LOCKED_NO_WAITERS = 1;
var LOCKED_POSSIBLE_WAITERS = 2; // Number of shared Int32 locations needed by the lock.

var NUMINTS = 1;

var Lock =
/*#__PURE__*/
function () {
  // Create a lock object.
  //
  // 'iab' must be a Int32Array mapping shared memory.
  // 'ibase' must be a valid index in iab, the first of NUMINTS reserved for the lock.
  //
  // iab and ibase will be exposed on Lock.
  function Lock(iab, ibase) {
    (0, _classCallCheck2.default)(this, Lock);

    if (!(iab instanceof Int32Array && ibase | 0 === ibase && ibase >= 0 && ibase + NUMINTS <= iab.length)) {
      throw new Error("Bad arguments to Lock constructor: ".concat(iab, " ").concat(ibase));
    }

    this.iab = iab;
    this.ibase = ibase;
  } // Initialize shared memory for a lock, before constructing the
  // worker-local Lock objects on that memory.
  //
  // 'iab' must be an Int32Array mapping shared memory.
  // 'ibase' must be a valid index in iab, the first of NUMINTS reserved
  // for the lock.
  //
  // Returns 'ibase'.


  (0, _createClass2.default)(Lock, [{
    key: "lock",
    // Acquire the lock, or block until we can.  Locking is not recursive:
    // you must not hold the lock when calling this.
    value: function lock() {
      var iab = this.iab;
      var stateIdx = this.ibase;
      var c;

      if ((c = Atomics.compareExchange(iab, stateIdx, UNLOCKED, LOCKED_NO_WAITERS)) !== UNLOCKED) {
        do {
          if (c === LOCKED_POSSIBLE_WAITERS || Atomics.compareExchange(iab, stateIdx, LOCKED_NO_WAITERS, LOCKED_POSSIBLE_WAITERS) !== UNLOCKED) {
            Atomics.wait(iab, stateIdx, LOCKED_POSSIBLE_WAITERS, Number.POSITIVE_INFINITY);
          }
        } while ((c = Atomics.compareExchange(iab, stateIdx, UNLOCKED, LOCKED_POSSIBLE_WAITERS)) !== UNLOCKED);
      }
    } // Attempt to acquire the lock, return true if it was acquired, false
    // if not.  Locking is not recursive: you must not hold the lock when
    // calling this.

  }, {
    key: "tryLock",
    value: function tryLock() {
      var iab = this.iab;
      var stateIdx = this.ibase;
      return Atomics.compareExchange(iab, stateIdx, UNLOCKED, LOCKED_NO_WAITERS) === UNLOCKED;
    } // Unlock a lock that is held.  Anyone can unlock a lock that is held;
    // nobody can unlock a lock that is not held.

  }, {
    key: "unlock",
    value: function unlock() {
      var iab = this.iab;
      var stateIdx = this.ibase;
      var v0 = Atomics.sub(iab, stateIdx, 1); // Wake up a waiter if there are any

      if (v0 !== LOCKED_NO_WAITERS) {
        Atomics.store(iab, stateIdx, UNLOCKED);
        Atomics.wake(iab, stateIdx, 1);
      }
    }
  }, {
    key: "toString",
    value: function toString() {
      return "Lock:{ibase:" + this.ibase + "}";
    }
  }], [{
    key: "initialize",
    value: function initialize(iab, ibase) {
      if (!(iab instanceof Int32Array && ibase | 0 === ibase && ibase >= 0 && ibase + NUMINTS <= iab.length)) {
        throw new Error("Bad arguments to Lock constructor: ".concat(iab, " ").concat(ibase));
      }

      Atomics.store(iab, ibase, UNLOCKED);
      return ibase;
    }
  }]);
  return Lock;
}();

exports.Lock = Lock;

/***/ }),

/***/ "./src/common/log.js":
/*!***************************!*\
  !*** ./src/common/log.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/toConsumableArray.js"));

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

/**
 * This library must be safe for worker to use,
 * cause some script in worker also depend on this library
 */
var __stackCacheMap = {};
var __stackidList = [];
var stackLimit = 1000;
var id = 1;
var isSaveStack = (typeof localStorage === "undefined" ? "undefined" : (0, _typeof2.default)(localStorage)) !== 'object' ? false : localStorage['__islogdebug'];
var isEnableLog = (typeof localStorage === "undefined" ? "undefined" : (0, _typeof2.default)(localStorage)) !== 'object' ? false : localStorage['__islogdebug']; // ("if you want to get log stack message, set localStorage['__islogdebug'] = true");

function getstack(stackid) {
  return function () {
    return __stackCacheMap[stackid];
  };
}

function savestack(stackid, stack) {
  if (isSaveStack) {
    __stackidList.push(stackid);

    __stackCacheMap[stackid] = stack;

    if (__stackidList.length > stackLimit) {
      var tag = __stackidList.shift();

      delete __stackCacheMap[tag];
    }
  }
}

var facroty = function facroty(groupname, isEnableLogWhenLocalStorageCannotAccess) {
  if (isEnableLogWhenLocalStorageCannotAccess === true) {
    isSaveStack = true;
    isEnableLog = true;
  }

  function generateArguments() {
    var list = [];
    var stackid = "log-".concat(groupname, "-").concat(id);
    list.push.apply(list, arguments);
    list.push({
      fn: getstack(stackid)
    });
    savestack(stackid, new Error().stack);
    id++;
    return list;
  }

  var fn = function fn() {
    if (isEnableLog) {
      var _console;

      (_console = console).log.apply(_console, [groupname].concat((0, _toConsumableArray2.default)(generateArguments(arguments))));
    }
  };

  var list = ['log', 'info', 'warn', 'error'];
  list.forEach(function (k) {
    fn[k] = function () {
      if (isEnableLog) {
        var _console2;

        (_console2 = console)[k].apply(_console2, [groupname].concat((0, _toConsumableArray2.default)(generateArguments(arguments))));
      }
    };
  });

  fn.isEnable = function () {
    return isEnableLog;
  };

  return fn;
};

facroty.isEnable = function () {
  return isEnableLog;
};

var _default = facroty;
exports.default = _default;

/***/ }),

/***/ "./src/common/pubSub.js":
/*!******************************!*\
  !*** ./src/common/pubSub.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pubsubJs = _interopRequireDefault(__webpack_require__(/*! pubsub-js */ "./node_modules/pubsub-js/src/pubsub.js"));

var Event = function Event() {};

Event.prototype = {
  publish: function publish() {
    return _pubsubJs.default.publish.apply(this, arguments);
  },
  publishSync: function publishSync() {
    return _pubsubJs.default.publishSync.apply(this, arguments);
  },
  trigger: function trigger() {
    return this.publish.apply(this, arguments);
  },
  triggerSync: function triggerSync() {
    return this.publishSync.apply(this, arguments);
  },
  emit: function emit() {
    return this.publish.apply(this, arguments);
  },
  // callback parameters : (message, data)
  subscribe: function subscribe() {
    return _pubsubJs.default.subscribe.apply(this, arguments);
  },
  on: function on() {
    return this.subscribe.apply(this, arguments);
  },
  unsubscribe: function unsubscribe() {
    return _pubsubJs.default.unsubscribe.apply(this, arguments);
  },
  clearAllSubscriptions: function clearAllSubscriptions() {
    _pubsubJs.default.clearAllSubscriptions();
  }
};

var _default = new Event();

exports.default = _default;

/***/ }),

/***/ "./src/common/queue.js":
/*!*****************************!*\
  !*** ./src/common/queue.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function Queue() {
  this.a = [];
  this.b = 0;
  this.residue = null; //  this.key = key;
}

;

Queue.prototype.getLength = function () {
  return this.a.length - this.b;
};

Queue.prototype.isEmpty = function () {
  return 0 == this.a.length;
};

Queue.prototype.enqueue = function (data) {
  this.a.push(data);
};

Queue.prototype.dequeue = function () {
  if (0 != this.a.length) {
    var c = this.a[this.b];
    2 * ++this.b >= this.a.length && (this.a = this.a.slice(this.b), this.b = 0);
    return c;
  }

  return null;
};

Queue.prototype.peek = function () {
  return 0 < this.a.length ? this.a[this.b] : void 0;
};

var _default = Queue;
exports.default = _default;

/***/ }),

/***/ "./src/common/state.js":
/*!*****************************!*\
  !*** ./src/common/state.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SOCKET_STATE = void 0;

/**
 * indicate if the sdk init is working
 */
var SOCKET_STATE = {
  audio: {
    decode: false,
    encode: false
  },
  video: {
    decode: false,
    encode: false
  }
};
exports.SOCKET_STATE = SOCKET_STATE;

/***/ }),

/***/ "./src/common/util.js":
/*!****************************!*\
  !*** ./src/common/util.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _detectWasmFeatures = _interopRequireDefault(__webpack_require__(/*! ../common/detectWasmFeatures */ "./src/common/detectWasmFeatures.js"));

var downloadUrlMapPromise = {};

function extractVersion(uastring, expr, pos) {
  var match = uastring.match(expr);
  return match && match.length >= pos && parseInt(match[pos], 10);
}

function detectBrowser() {
  var _window = window,
      navigator = _window.navigator; // Returned result object.

  var result = {
    browser: null,
    version: null
  }; // Fail early if it's not a browser

  if (typeof window === 'undefined' || !window.navigator) {
    result.browser = 'Not a browser.';
    return result;
  }

  if (navigator.mozGetUserMedia) {
    // Firefox.
    result.browser = 'firefox';
    result.version = extractVersion(navigator.userAgent, /Firefox\/(\d+)\./, 1);
  } else if (navigator.webkitGetUserMedia) {
    // Chrome, Chromium, Webview, Opera.
    // Version matches Chrome/WebRTC version.
    result.browser = 'chrome';
    result.version = extractVersion(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
  } else if (navigator.mediaDevices && navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)) {
    // Edge.
    result.browser = 'edge';
    result.version = extractVersion(navigator.userAgent, /Edge\/(\d+).(\d+)$/, 2);
  } else if (window.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
    // Safari.
    result.browser = 'safari';
    result.version = extractVersion(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
  } else {
    // Default fallthrough: not supported.
    result.browser = 'Not a supported browser.';
    return result;
  }

  return result;
}

function getBrowserInfo() {
  var agent = navigator.userAgent.toLowerCase();
  var regStr_ff = /firefox\/[\d.]+/gi;
  var regStr_chrome = /chrome\/[\d.]+/gi;
  var regStrChrome2 = /ipad; cpu os (\d+_\d+)/gi;
  var regStr_saf = /safari\/[\d.]+/gi;
  var regStr_saf2 = /safari\/[\d.]+/gi;
  var regStr_edg = /edg\/[\d.]+/gi; // firefox

  if (agent.indexOf('firefox') > 0) {
    return agent.match(regStr_ff);
  } // Safari


  if (agent.indexOf('safari') > 0 && agent.indexOf('chrome') < 0) {
    var tmpInfo = 'safari/unknow';
    var tmpInfo2;
    tmpInfo = agent.match(regStr_saf);
    tmpInfo2 = agent.match(regStr_saf2);

    if (tmpInfo) {
      tmpInfo = tmpInfo.toString().replace('version', 'safari');
    }

    if (tmpInfo2) {
      tmpInfo = tmpInfo2.toString().replace('version', 'safari');
    }

    return tmpInfo;
  } // Chrome


  if (agent.indexOf('chrome') > 0) {
    return agent.match(regStr_chrome);
  }

  return 'other';
}

function DetectAndroidBrowser() {
  try {
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;

    if (/android/i.test(userAgent)) {
      return true;
    } else {
      return false;
    }
  } catch (e) {
    return false;
  }
}

function DetectChromeOS() {
  try {
    if (/\bCrOS\b/.test(navigator.userAgent)) {
      return true;
    }
  } catch (e) {
    return false;
  }
}

var browserType = detectBrowser();
var _default = {
  getDocumentHandle: function getDocumentHandle(id) {
    return document.getElementById(id);
  },

  /**
   * There is no 100% reliable browser detection
   * Better solution is 'browser feature detection'
   */
  browserType: browserType,
  browser: {
    isFirefox: browserType.browser === 'firefox',
    isChrome: browserType.browser === 'chrome',
    isEdge: browserType.browser === 'edge',
    isSafari: browserType.browser === 'safari'
  },
  isOpera65: function isOpera65() {
    try {
      var tem = navigator.userAgent.match(/OPR\/(\d+)\./);

      if (tem && Number(tem[1]) < 66) {
        return true;
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  },
  isAndroidBrowser: function isAndroidBrowser() {
    return DetectAndroidBrowser();
  },
  download: function download(url) {
    if (downloadUrlMapPromise[url]) {
      return downloadUrlMapPromise[url];
    }

    var promise = new _promise.default(function (resolve, reject) {
      var oReq = new XMLHttpRequest();
      oReq.addEventListener('load', function () {
        resolve(this.responseText);
      }, oReq);

      oReq.onerror = function (ex) {
        reject(ex);
      };

      oReq.open("get", url, true);
      oReq.send();
    });
    downloadUrlMapPromise[url] = promise;
    return promise;
  },
  downloadBinary: function downloadBinary(url) {
    if (downloadUrlMapPromise[url]) {
      return downloadUrlMapPromise[url];
    }

    var promise = new _promise.default(function (resolve, reject) {
      var oReq = new XMLHttpRequest();
      oReq.responseType = "arraybuffer";
      oReq.addEventListener('load', function () {
        resolve(this.response);
      }, oReq);

      oReq.onerror = function (ex) {
        reject(ex);
      };

      oReq.open("get", url, true);
      oReq.send();
    });
    downloadUrlMapPromise[url] = promise;
    return promise;
  },

  /**
   * @param blob
   * @returns {Promise<String>}
   */
  readBlob: function readBlob(blob) {
    return new _promise.default(function (resolve, reject) {
      var reader = new FileReader();

      reader.onload = function () {
        resolve(reader.result);
      };

      reader.readAsText(blob);
    });
  },
  readBlobAsBuffer: function readBlobAsBuffer(blob) {
    return new _promise.default(function (resolve, reject) {
      var fileReader = new FileReader();

      fileReader.onload = function (event) {
        resolve(event.target.result);
      };

      fileReader.readAsArrayBuffer(blob);
    });
  },
  lengthInUtf8Bytes: function lengthInUtf8Bytes(str) {
    // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.
    var m = encodeURIComponent(str).match(/%[89ABab]/g);
    return str.length + (m ? m.length : 0);
  },

  /**
   * @returns {Boolean} true means Little-Endian
   */
  isLittleEndian: function isLittleEndian() {
    var arrayBuffer = new ArrayBuffer(2);
    var uint8Array = new Uint8Array(arrayBuffer);
    var uint16array = new Uint16Array(arrayBuffer);
    uint8Array[0] = 0xAA;
    uint8Array[1] = 0xBB;
    return uint16array[0] === 0xBBAA;
  },
  sleep: function sleep(millionSeconds) {
    return new _promise.default(function (resolve, reject) {
      setTimeout(function () {
        resolve(true);
      }, millionSeconds);
    });
  },
  isSDKSupportMultiThread: function () {
    var _isSDKSupportMultiThread = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee() {
      var isSupportMultiThread;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return _detectWasmFeatures.default.threads();

            case 3:
              isSupportMultiThread = _context.sent;
              _context.next = 9;
              break;

            case 6:
              _context.prev = 6;
              _context.t0 = _context["catch"](0);
              isSupportMultiThread = false;

            case 9:
              return _context.abrupt("return",  false && false);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 6]]);
    }));

    return function isSDKSupportMultiThread() {
      return _isSDKSupportMultiThread.apply(this, arguments);
    };
  }(),
  isSDKSupportSIMD: function () {
    var _isSDKSupportSIMD = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2() {
      var isSupportSIMD;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!((typeof WebAssembly === "undefined" ? "undefined" : (0, _typeof2.default)(WebAssembly)) !== 'object')) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", false);

            case 2:
              _context2.prev = 2;

              if (!(browserType.browser == "chrome")) {
                _context2.next = 13;
                break;
              }

              if (!(browserType.version >= 84)) {
                _context2.next = 10;
                break;
              }

              _context2.next = 7;
              return _detectWasmFeatures.default.simd();

            case 7:
              isSupportSIMD = _context2.sent;
              _context2.next = 11;
              break;

            case 10:
              isSupportSIMD = false;

            case 11:
              _context2.next = 16;
              break;

            case 13:
              _context2.next = 15;
              return _detectWasmFeatures.default.simd();

            case 15:
              isSupportSIMD = _context2.sent;

            case 16:
              _context2.next = 21;
              break;

            case 18:
              _context2.prev = 18;
              _context2.t0 = _context2["catch"](2);
              isSupportSIMD = false;

            case 21:
              return _context2.abrupt("return", isSupportSIMD);

            case 22:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[2, 18]]);
    }));

    return function isSDKSupportSIMD() {
      return _isSDKSupportSIMD.apply(this, arguments);
    };
  }(),
  buffer2stringSplitByComma: function buffer2stringSplitByComma(buffer) {
    var ints = new Uint8Array(buffer);
    return ints.join(',');
  },
  stringSplitByComma2Buffer: function stringSplitByComma2Buffer(str) {
    try {
      var arr = str.split(',').map(function (item) {
        return parseInt(item);
      });
      var buffer = new ArrayBuffer(arr.length);
      var ints = new Uint8Array(buffer);

      for (var i = 0; i < arr.length; i++) {
        ints[i] = arr[i];
      }

      return buffer;
    } catch (e) {
      return null;
    }
  },
  removeDuplicates: function removeDuplicates(list, diffCheckFunction) {
    var newList = [];
    list.forEach(function (item) {
      var isDup = false;

      for (var i = 0; i < newList.length; i++) {
        if (!diffCheckFunction.call(null, newList[i], item)) {
          isDup = true;
          break;
        }
      }

      if (!isDup) {
        newList.push(item);
      }
    });
    return newList;
  },
  getBrowserVersion: function getBrowserVersion() {
    return getBrowserInfo()[0].match(/(\d\d)/)[0];
  },
  isSupportImageCapture: function isSupportImageCapture() {
    return typeof ImageCapture === 'function' && typeof OffscreenCanvas == "function" && !DetectAndroidBrowser();
  }
};
exports.default = _default;

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var JsMediaSDK = __webpack_require__(/*! ./lib/JsMediaSDK */ "./src/lib/JsMediaSDK.js");

module.exports = JsMediaSDK;

/***/ }),

/***/ "./src/inside/AudioService.js":
/*!************************************!*\
  !*** ./src/inside/AudioService.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioService = exports.AUDIO_INIT_EVENT = exports.AudioInit = void 0;

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _MediaInit2 = _interopRequireDefault(__webpack_require__(/*! ./MediaInit */ "./src/inside/MediaInit.js"));

var _pubSub = _interopRequireDefault(__webpack_require__(/*! ../common/pubSub */ "./src/common/pubSub.js"));

var AUDIO_INIT_EVENT = {
  AUDIO_ENCODE_SUCCESS: "AUDIO_ENCODE_INIT_SUCCESS",
  AUDIO_DECODE_SUCCESS: "AUDIO_DECODE_INIT_SUCCESS",
  AUDIO_ENCODE_FAILED: "AUDIO_ENCODE_INIT_FAILED",
  AUDIO_DECODE_FAILED: "AUDIO_DECODE_INIT_FAILED"
};
exports.AUDIO_INIT_EVENT = AUDIO_INIT_EVENT;

var AudioInit =
/*#__PURE__*/
function (_MediaInit) {
  (0, _inherits2.default)(AudioInit, _MediaInit);

  function AudioInit() {
    (0, _classCallCheck2.default)(this, AudioInit);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(AudioInit).call(this));
  }

  (0, _createClass2.default)(AudioInit, null, [{
    key: "publishAudioEncodeSuccessEvent",
    value: function publishAudioEncodeSuccessEvent() {
      _pubSub.default.triggerSync(AUDIO_INIT_EVENT.AUDIO_ENCODE_SUCCESS);
    }
  }, {
    key: "publishAudioDecodeSuccessEvent",
    value: function publishAudioDecodeSuccessEvent() {
      _pubSub.default.triggerSync(AUDIO_INIT_EVENT.AUDIO_DECODE_SUCCESS);
    }
  }, {
    key: "publishAudioEncodeFAILEDEvent",
    value: function publishAudioEncodeFAILEDEvent() {
      _pubSub.default.triggerSync(AUDIO_INIT_EVENT.AUDIO_ENCODE_FAILED);
    }
  }, {
    key: "publishAudioDecodeFAILEDEvent",
    value: function publishAudioDecodeFAILEDEvent() {
      _pubSub.default.triggerSync(AUDIO_INIT_EVENT.AUDIO_DECODE_FAILED);
    }
  }]);
  return AudioInit;
}(_MediaInit2.default);

exports.AudioInit = AudioInit;

var AudioService =
/*#__PURE__*/
function () {
  function AudioService() {
    (0, _classCallCheck2.default)(this, AudioService);
  }

  (0, _createClass2.default)(AudioService, null, [{
    key: "onAudioEncodeInitSuccess",
    value: function onAudioEncodeInitSuccess() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(AUDIO_INIT_EVENT.AUDIO_ENCODE_SUCCESS, function () {
          resolve(true);
        });
      });
    }
  }, {
    key: "onAudioDecodeInitSuccess",
    value: function onAudioDecodeInitSuccess() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(AUDIO_INIT_EVENT.AUDIO_DECODE_SUCCESS, function () {
          resolve(true);
        });
      });
    }
  }, {
    key: "waitAudioEncodeInitResult",
    value: function waitAudioEncodeInitResult() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(AUDIO_INIT_EVENT.AUDIO_ENCODE_SUCCESS, function () {
          resolve(true);
        });

        _pubSub.default.on(AUDIO_INIT_EVENT.AUDIO_ENCODE_FAILED, function () {
          resolve(false);
        });
      });
    }
  }, {
    key: "waitAudioDecodeInitResult",
    value: function waitAudioDecodeInitResult() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(AUDIO_INIT_EVENT.AUDIO_DECODE_SUCCESS, function () {
          resolve(true);
        });

        _pubSub.default.on(AUDIO_INIT_EVENT.AUDIO_DECODE_FAILED, function () {
          resolve(false);
        });
      });
    }
  }]);
  return AudioService;
}();

exports.AudioService = AudioService;

/***/ }),

/***/ "./src/inside/JsMediaBuffer.js":
/*!*************************************!*\
  !*** ./src/inside/JsMediaBuffer.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioQueueMGR = AudioQueueMGR;
exports.VideoQueueMGR = VideoQueueMGR;
exports.SharingQueueMGR = SharingQueueMGR;
exports.VideoMGR = VideoMGR;
exports.SharingMGR = SharingMGR;
exports.AudioMGR = exports.SharingInfoMGR = exports.SharingInfo = exports.VideoInfoMGR = exports.VideoInfo = exports.VideoData = exports.AudioData = void 0;

var _map = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/map */ "./node_modules/@babel/runtime/core-js/map.js"));

var _queue = _interopRequireDefault(__webpack_require__(/*! ../common/queue */ "./src/common/queue.js"));

/* 
author: Hf.Platform.Seth.Wang
Date: July,2017

*/
var AudioData = function () {
  function AudioData(buffer, timeStamp) {
    this.timeStamp = timeStamp;
    this.buf = buffer; //this.key = key;
  }

  return AudioData;
}();

exports.AudioData = AudioData;

var VideoData = function () {
  function VideoData(buffer, timeStamp) {
    this.timeStamp = timeStamp;
    this.buf = buffer; //this.key = key;
  }

  ;
  return VideoData;
}();

exports.VideoData = VideoData;

function AudioQueueMGR() {
  this.ssrcQueueMap = new _map.default();

  AudioQueueMGR.prototype.AddQueue = function (key) {
    var queue = new _queue.default();
    this.ssrcQueueMap.set(key, queue);
    return queue;
  };

  AudioQueueMGR.prototype.DeleteQueue = function (key) {
    this.ssrcQueueMap.delete(key);
  };

  AudioQueueMGR.prototype.GetQueue = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);
    return queue_;
  };

  AudioQueueMGR.prototype.GetQueueData = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);
    return queue_.dequeue();
  };

  AudioQueueMGR.prototype.PutQueueData = function (key, data) {
    var queue_ = this.ssrcQueueMap.get(key);
    queue_.enqueue(data);
  };

  AudioQueueMGR.prototype.GetQueueLength = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);

    if (queue_ !== null) {
      return queue_.getLength();
    }

    return 0;
  };
}

;

var VideoInfo = function VideoInfo() {
  this.frames = 0;
  this.ntp = new _queue.default();
};

exports.VideoInfo = VideoInfo;
VideoInfo.prototype = {
  UpdateVideoInfo: function UpdateVideoInfo(ntptime) {
    this.frames++;

    if (this.ntp.getLength() > 30) {
      this.ntp.dequeue();
    }

    this.ntp.enqueue(ntptime);
  },
  GetVideoFpsInfo: function GetVideoFpsInfo() {
    var length = this.ntp.getLength();

    if (length < 5) {
      return;
    }

    var fps = 0;
    var NotZeroTime = 0;
    var ZeroNTPNumb = 0;
    var StartNTPNotZero = 0;
    var lastNotZero = 0;

    for (var i = 0; i < length; i++) {
      var ntpTime = this.ntp.dequeue();

      if (ntpTime == 0 && StartNTPNotZero == 0) {
        ZeroNTPNumb++;
      } else if (ntpTime != 0) {
        lastNotZero = 0;

        if (StartNTPNotZero == 0) {
          StartNTPNotZero = ntpTime;
        }

        NotZeroTime = ntpTime;
      } else if (StartNTPNotZero != 0 && NotZeroTime != StartNTPNotZero && ntpTime == 0) {
        lastNotZero++;
      }
    }

    if (NotZeroTime == 0 || NotZeroTime == StartNTPNotZero) {
      fps = 0;
    } else {
      if (length - ZeroNTPNumb - lastNotZero - 1 != 0) {
        fps = (NotZeroTime - StartNTPNotZero) / (length - ZeroNTPNumb - lastNotZero - 1);
      } else {
        fps = 0;
      }
    }

    return fps;
  }
};

var VideoInfoMGR = function VideoInfoMGR() {
  this.ssrcInfoMap = new _map.default();
};

exports.VideoInfoMGR = VideoInfoMGR;
VideoInfoMGR.prototype = {
  UpdateSSRCInfo: function UpdateSSRCInfo(ssrc, ntp) {
    var info = this.ssrcInfoMap.get(ssrc);

    if (info) {
      info.UpdateVideoInfo(ntp);
    } else {
      info = new VideoInfo();
      this.ssrcInfoMap.set(ssrc, info);
      info.UpdateVideoInfo(ntp);
    }
  },
  GetSSRCFpsInfo: function GetSSRCFpsInfo(ssrc) {
    var info = this.ssrcInfoMap.get(ssrc);

    if (info) {
      return info.GetVideoFpsInfo();
    } else {
      return 0;
    }
  }
};

function VideoQueueMGR() {
  this.ssrcQueueMap = new _map.default();
  this.ssrcInfo = new VideoInfoMGR();

  VideoQueueMGR.prototype.AddQueue = function (key) {
    var queue = new _queue.default();
    this.ssrcQueueMap.set(key, queue);
    return queue;
  };

  VideoQueueMGR.prototype.DeleteQueue = function (key) {
    this.ssrcQueueMap.delete(key);
  };

  VideoQueueMGR.prototype.GetQueue = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);
    return queue_;
  };

  VideoQueueMGR.prototype.ClearQueue = function () {
    this.ssrcQueueMap.clear();
    return;
  };

  VideoQueueMGR.prototype.GetQueueData = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);
    return queue_.dequeue();
  };

  VideoQueueMGR.prototype.PutQueueData = function (key, data) {
    var queue_ = this.ssrcQueueMap.get(key);
    queue_.enqueue(data);
  };

  VideoQueueMGR.prototype.GetQueueLength = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);

    if (queue_) {
      return queue_.getLength();
    }

    return 0;
  };

  VideoQueueMGR.prototype.UpdateInfo = function (ssrc, ntp) {
    this.ssrcInfo.UpdateSSRCInfo(ssrc, ntp);
  };

  VideoQueueMGR.prototype.GetFpsInfo = function (ssrc) {
    return this.ssrcInfo.GetSSRCFpsInfo(ssrc);
  };
}

var AudioMGR = function () {
  function AudioMGR() {
    this.map = new _map.default();
    this.AudioQueueMGR = new AudioQueueMGR();
    this.timemap = new _map.default();
  }

  ;

  AudioMGR.prototype.Add = function (ssrc, audio_webwork) {
    this.map.set(ssrc, audio_webwork);
    this.AudioQueueMGR.AddQueue(ssrc);
  };

  AudioMGR.prototype.Clear = function () {
    this.map.clear();
  };

  AudioMGR.prototype.Keys = function () {
    return this.map.keys();
  };

  AudioMGR.prototype.UpdateSSRCTimeMap = function (timestamp) {
    // ssrc = ssrc >> 10;
    // if(this.timemap.containsKey(ssrc) === true){
    //     this.timemap.remove(ssrc);
    //     this.timemap.put(ssrc, timestamp);
    // }else{
    //     this.timemap.put(ssrc, timestamp);
    // }
    this.timemap = timestamp;
  };

  AudioMGR.prototype.GetSSRCTimeMap = function (ssrc) {
    if (this.timemap) {
      return this.timemap.get(ssrc);
    }

    return null;
  };

  return AudioMGR;
}();

exports.AudioMGR = AudioMGR;

function VideoMGR() {
  this.map = new _map.default();
  this.VideoQueueMGR = new VideoQueueMGR(); // this.ssrcNTPInfo = new AV_Map();
  // this.ssrcFramesInfo = new AV_Map();
  // this.ssrcFPSInfo= new AV_Map();
}

;

VideoMGR.prototype.Add = function (ssrc, video_webwork) {
  this.map.set(ssrc, video_webwork); // this.VideoQueueMGR.AddQueue(ssrc);
};

VideoMGR.prototype.Clear = function () {
  this.map.clear();
};

VideoMGR.prototype.Keys = function () {
  return this.map.keys();
}; //----------------------------------sharing


var SharingInfo = function SharingInfo() {
  this.frames = 0;
  this.ntp = new _queue.default();
};

exports.SharingInfo = SharingInfo;
SharingInfo.prototype = {
  UpdateSharingInfo: function UpdateSharingInfo(ntptime) {
    this.frames++;

    if (this.ntp.getLength() > 30) {
      this.ntp.dequeue();
    }

    this.ntp.enqueue(ntptime);
  },
  GetSharingFpsInfo: function GetSharingFpsInfo() {
    var length = this.ntp.getLength();

    if (length < 5) {
      return;
    }

    var fps = 0;
    var NotZeroTime = 0;
    var ZeroNTPNumb = 0;
    var StartNTPNotZero = 0;
    var lastNotZero = 0;

    for (var i = 0; i < length; i++) {
      var ntpTime = this.ntp.dequeue();

      if (ntpTime == 0 && StartNTPNotZero == 0) {
        ZeroNTPNumb++;
      } else if (ntpTime != 0) {
        lastNotZero = 0;

        if (StartNTPNotZero == 0) {
          StartNTPNotZero = ntpTime;
        }

        NotZeroTime = ntpTime;
      } else if (StartNTPNotZero != 0 && NotZeroTime != StartNTPNotZero && ntpTime == 0) {
        lastNotZero++;
      }
    }

    if (NotZeroTime == 0 || NotZeroTime == StartNTPNotZero) {
      fps = 0;
    } else {
      if (length - ZeroNTPNumb - lastNotZero - 1 != 0) {
        fps = (NotZeroTime - StartNTPNotZero) / (length - ZeroNTPNumb - lastNotZero - 1);
      } else {
        fps = 0;
      }
    }

    return fps;
  }
};

var SharingInfoMGR = function SharingInfoMGR() {
  this.ssrcInfoMap = new _map.default();
};

exports.SharingInfoMGR = SharingInfoMGR;
SharingInfoMGR.prototype = {
  UpdateSSRCInfo: function UpdateSSRCInfo(ssrc, ntp) {
    var info = this.ssrcInfoMap.get(ssrc);

    if (info) {
      info.UpdateSharingInfo(ntp);
    } else {
      info = new SharingInfo();
      this.ssrcInfoMap.set(ssrc, info);
      info.UpdateSharingInfo(ntp);
    }
  },
  GetSSRCFpsInfo: function GetSSRCFpsInfo(ssrc) {
    var info = this.ssrcInfoMap.get(ssrc);

    if (info) {
      return info.GetSharingFpsInfo();
    } else {
      return 0;
    }
  }
};

function SharingQueueMGR() {
  this.ssrcQueueMap = new _map.default();
  this.ssrcInfo = new SharingInfoMGR();

  SharingQueueMGR.prototype.AddQueue = function (key) {
    var queue = new _queue.default();
    this.ssrcQueueMap.set(key, queue);
    return queue;
  };

  SharingQueueMGR.prototype.DeleteQueue = function (key) {
    this.ssrcQueueMap.delete(key);
  };

  SharingQueueMGR.prototype.GetQueue = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);
    return queue_;
  };

  SharingQueueMGR.prototype.ClearQueue = function () {
    this.ssrcQueueMap.clear();
    return;
  };

  SharingQueueMGR.prototype.GetQueueData = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);
    return queue_.dequeue();
  };

  SharingQueueMGR.prototype.PutQueueData = function (key, data) {
    var queue_ = this.ssrcQueueMap.get(key);
    queue_.enqueue(data);
  };

  SharingQueueMGR.prototype.GetQueueLength = function (key) {
    var queue_ = this.ssrcQueueMap.get(key);

    if (queue_) {
      return queue_.getLength();
    }

    return 0;
  };

  SharingQueueMGR.prototype.UpdateInfo = function (ssrc, ntp) {
    this.ssrcInfo.UpdateSSRCInfo(ssrc, ntp);
  };

  SharingQueueMGR.prototype.GetFpsInfo = function (ssrc) {
    return this.ssrcInfo.GetSSRCFpsInfo(ssrc);
  };
}

function SharingMGR() {
  this.map = new _map.default();
  this.sQueue = new _queue.default();
  this.SharingQueueMGR = new SharingQueueMGR();
}

SharingMGR.prototype.Clear = function () {
  this.map.clear();
};

SharingMGR.prototype.Keys = function () {
  return this.map.keys();
};

SharingMGR.prototype.Add = function (ssrc, sharing_webwork) {
  this.map.set(ssrc, sharing_webwork);
};

SharingMGR.prototype.Get = function (ssrc) {
  // var handler=this.map.get(ssrc);
  return this.map.get(ssrc);
};

SharingMGR.prototype.PutData = function (data) {
  if (data && this.sQueue) this.sQueue.enqueue(data);
};

SharingMGR.prototype.GetData = function () {
  if (this.sQueue) {
    return this.sQueue.dequeue();
  }
};

SharingMGR.prototype.ClearBuffer = function () {
  if (this.sQueue) {
    this.sQueue = new _queue.default();
  }
};

/***/ }),

/***/ "./src/inside/JsMediaEngine_Variables.js":
/*!***********************************************!*\
  !*** ./src/inside/JsMediaEngine_Variables.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _queue = _interopRequireDefault(__webpack_require__(/*! ../common/queue */ "./src/common/queue.js"));

var _util = _interopRequireDefault(__webpack_require__(/*! ../common/util */ "./src/common/util.js"));

var _Sharing = __webpack_require__(/*! ./Sharing */ "./src/inside/Sharing.js");

var _Video = __webpack_require__(/*! ./Video */ "./src/inside/Video.js");

var _AudioService = __webpack_require__(/*! ./AudioService */ "./src/inside/AudioService.js");

var _log = _interopRequireDefault(__webpack_require__(/*! ../common/log */ "./src/common/log.js"));

var log = (0, _log.default)("sdk.variables");

function Variables() {}

Variables.prototype.initDB = function () {
  var dbObject = {};
  var self = this;
  var request;

  dbObject.init = function (params) {
    this.db_name = params.db_name;
    this.db_version = params.db_version;
    this.db_store_name = params.db_store_name;

    if (!indexedDB) {
      self.indexDbObject = null;
      return;
    }

    try {
      request = indexedDB.open(this.db_name, this.db_version);
    } catch (e) {
      log(e);
      self.indexDbObject = null;
      return;
    }

    request.onerror = function (event) {
      self.indexDbObject = null;
    };

    request.onupgradeneeded = function (event) {
      this.db = event.target.result;
      this.db.createObjectStore(dbObject.db_store_name);
    };

    request.onsuccess = function (event) {
      dbObject.db = event.target.result;
      self.openIndexFlag = true;
      self.indexDbObject.select("delay");
    };
  };

  dbObject.put = function (params, key) {
    try {
      var transaction = dbObject.db.transaction(dbObject.db_store_name, "readwrite");
      var store = transaction.objectStore(dbObject.db_store_name);
      var request = store.put(params, key);

      request.onsuccess = function () {//  log("Set Delay Successfully in indexdb: " + params);
      };

      request.onerror = function (event) {
        log("Set Delay failed!");
      };
    } catch (e) {
      log("IndexDb put Failed!");
    }
  };

  dbObject.delete = function (id) {
    // dbObject.db.transaction.objectStore is not a function
    request = dbObject.db.transaction(dbObject.db_store_name, "readwrite").objectStore(dbObject.db_store_name).delete(id);

    request.onsuccess = function () {
      log("Delete the key:" + id);
    };
  };

  dbObject.select = function (key) {
    try {
      var transaction = dbObject.db.transaction(dbObject.db_store_name, "readwrite");
      var store = transaction.objectStore(dbObject.db_store_name);
      if (key) var request = store.get(key);else var request = store.getAll();

      request.onsuccess = function () {
        self.audioDelay = request.result;
      };

      request.onerror = function () {
        self.audioDelay = 0;
      };
    } catch (e) {
      log("IndexDb Select Failed");
    }
  };

  dbObject.clear = function () {
    var request = dbObject.db.transaction(dbObject.db_store_name, "readwrite").objectStore(dbObject.db_store_name).clear();

    request.onsuccess = function () {
      log("Clear the IndexDb Successfully");
    };
  };

  dbObject.close = function () {
    if (dbObject.db) {
      dbObject.db.close();
    }
  };

  this.indexDbObject = dbObject;
  this.indexDbObject.init({
    db_name: "AEC",
    db_version: 1,
    db_store_name: "delay"
  });
};
/**
 * send message only if _Notify_APPUI is existed
 * @constructor
 */


Variables.prototype.Notify_APPUI_SAFE = function () {
  if (this._Notify_APPUI) {
    log("Notify_APPUI_SAFE", arguments);

    this._Notify_APPUI.apply(this, arguments);
  }
};

Variables.prototype.Notify_APPUI = function () {
  if (this._Notify_APPUI) {
    log("Notify_APPUI", arguments);

    this._Notify_APPUI.apply(this, arguments);
  }
};
/**
 * send message to RWG by {@link Variables.rwgAgent}
 * If jsEvent is {Object.<string, any>} and message is not set, then set jsEvent value to message.
 *
 * @param jsEvent {String|number|Object.<string, any>}
 * @param message {Object.<string, any>}
 */


Variables.prototype.sendMessageToRwg = function (jsEvent, message) {
  try {
    if (jsEvent && (typeof xx === "undefined" ? "undefined" : (0, _typeof2.default)(xx)) === "object" && !message) {
      message = jsEvent;
    }

    this.rwgAgent.sendMessageToRwg(message);
  } catch (e) {
    log.error(e);
  }
};

Variables.prototype.reinit = function () {
  this.SPECIAL_ID = 0;
  /**
   * do not use _Notify_APPUI anymore, instead use {@link Notify_APPUI_SAFE} or {@link Notify_APPUI}
   */

  this._Notify_APPUI = null;
  this.localAudioDecMGR = null;
  this.localVideoDecMGR = null;
  this.localAudioEncMGR = null;
  this.localVideoEncMGR = null;
  this.localSharingDecMGR = null;
  this.localMouseDecMGR = null;
  this.localSharingEncMGR = null;
  this.localAudioPara = null;
  this.localVideoPara = null;
  this.localSharingPara = null;
  this.Audio_WebSocket_Ip_Address = null;
  this.Video_WebSocket_Ip_Address = null;
  this.Sharing_WebSocket_Ip_Address = null;
  this.mediaSDKHandle = null;
  this.audio_pcm_queue = new _queue.default();
  this.int16Array = null; // status

  this.isInitialFailed = false; //Is related WASM initial for web APP?

  this.isAudioEncodeWASMOK = false;
  this.isAudioDecodeWASMOK = false;
  this.isVideoEncodeWASMOK = false;
  this.isVideoDecodeWASMOK = false;
  this.isSharingDecodeWASMOK = false;
  this.isSharingEncodeWASMOK = false;
  this.audioEncWorkerPath = "";
  this.audioDecWorkerPath = "";
  this.videoDecWorkerPath = "";
  this.videoEncWorkerPath = "";
  this.sharingDecWorkerPath = "";
  this.sharingEncWorkerPath = "";
  this.isAudioEncodePostStart = false;
  this.isAudioDecodePostStart = false;
  this.isVideoDecodePostStart = false;
  this.isVideoEncodePostStart = false;
  this.isSharingDecodePostStart = false;
  this.isSharingEncodePostStart = false;
  this.isAudioEncodeThreadStart = false;
  this.isAudioDecodeThreadStart = false;
  this.isVideoDecodeThreadStart = false;
  this.isSharingDecodeThreadStart = false;
  this.isVideoEncodeThreadStart = false;
  this.isSharingEncodeThreadStart = false;
  this.isAudioPlayWork = false;
  this.isVideoPlayWork = false;
  this.isSharingPlayWork = false;
  this.shareBufferSampleNumb = 30; // Add One When WebWork do success

  this.initialSuccessNumb = 0;
  this.TotalWaitEvent = 0;
  this.audioPostInterval = null;
  this.sharedBuffer = null;
  this.indexDbObject = null;
  this.audioDelay = 0;
  this.openIndexFlag = false;
  this.audioBufferSize = _util.default.browser.isEdge || _util.default.browser.isFirefox ? 30 : 15;
  this.monitorEncodeVideo = null;
  this.monitorDecodeVideo = null;
  this.monitorEncodeSharing = null;
  this.monitorDecodeSharing = null;
  this.monitorEncodeAudio = null;
  this.monitorDecodeAudio = null;
  this.monitorVideoCapture = null;
  this.monitorAudioCapture = null;
  this.monitorIntervalHandle = null;
  this.monitorVideoUserID = null;
  this.monitorAudioUserID = null;
  this.monitorSharingUserID = null;
  this.monitorSharingEncodeAPPInfo = null;
  this.monitorVideoDecodeAPPInfo = null;
  this.monitorVideoEncodeAPPInfo = null;
  this.monitorCid = null;
  this.e2eencrypt = false;
  this.AudioNode = null;
  this.CurrentSSRC = 0;
  this.CurrentSSRCTime = 0;
  this.videoDecResponseText = null;
  this.videoEncResponseText = null;
  this.sharingDecodeResponse = null;
  this.sharingEncodeResponse = null;
  this.sharingDecInitInstance = new _Sharing.SharingInit();
  this.sharingEncInitInstance = new _Sharing.SharingInit();
  this.videoInitInstance = new _Video.VideoInit();
  this.audioDecInitInstance = new _AudioService.AudioInit();
  this.audioEncodeInitInstance = new _AudioService.AudioInit();
  this.videoDecInitInstance = new _Video.VideoInit();
  this.audioDecodeResponse = null;
  this.audioEncodeResponse = null;
  this.ivObj = {};
  this.userNodeList = [];
  this.rwgAgent = null;
  this.initDB();
};

var vInstance = new Variables();
var _default = vInstance;
exports.default = _default;

/***/ }),

/***/ "./src/inside/JsMediaSDK_SharingRender.js":
/*!************************************************!*\
  !*** ./src/inside/JsMediaSDK_SharingRender.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var jsEvent = _interopRequireWildcard(__webpack_require__(/*! ../common/jsEvent */ "./src/common/jsEvent.js"));

var consts = _interopRequireWildcard(__webpack_require__(/*! ../worker/common/consts */ "./src/worker/common/consts.js"));

var _JsMediaSDK_WaterMark = _interopRequireDefault(__webpack_require__(/*! ./JsMediaSDK_WaterMark */ "./src/inside/JsMediaSDK_WaterMark.js"));

var _JsMediaBuffer = __webpack_require__(/*! ./JsMediaBuffer */ "./src/inside/JsMediaBuffer.js");

function SharingRender(params) {
  this.Notify_APPUI = params.Notify_APPUI;
  this.PubSub = params.PubSub;
  this.jsMediaEngine = params.jsMediaEngine;
  this.currentshareactive = 0;
  this.sharingWidthAndHeightInfo = {
    logicHeight: 0,
    logicWidth: 0
  };
  this.currentSharingHeight = 0;
  this.currentSharingWidth = 0;
  this.currentSharingLogicHeight = 0;
  this.currentSharingLogicWidth = 0;
  this.isCreateSharingWaterMark = false;
  this.sharingWaterMarkName = "";
  this.Cursorx = null;
  this.Cursory = null;
  this.CursorWidth = null;
  this.CursorHeight = null;
  this.xratio = 1;
  this.yratio = 1;
  this.sharingDisplay = null;
  this.mouseQueue = new _JsMediaBuffer.SharingQueueMGR();
  this.sharingQueue = new _JsMediaBuffer.SharingQueueMGR();
  this.WaterMarkRGBA = new _JsMediaSDK_WaterMark.default();
  this.sMonitorCount = 0;
  this.mMonitorCount = 0;
}

SharingRender.prototype.JsMediaSDK_SharingRender = function () {
  if (!this.sharingDisplay) {
    return;
  }

  var message = this.Get_Decoded_Sharing_Frame(this.currentshareactive);
  var message_mouse = this.Get_Decoded_Mouse_Frame(this.currentshareactive);

  if (message) {
    //remoteControl
    if (this.sharingWidthAndHeightInfo.logicWidth != message.logic_w || this.sharingWidthAndHeightInfo.logicHeight != message.logic_h) {
      if (this.PubSub) {
        PubSub.publish(jsEvent.SHARING_PARAM_INFO_FROM_SOCKET, {
          body: {
            width: message.logic_w,
            height: message.logic_h,
            logicWidth: message.logic_w,
            logicHeight: message.logic_h
          }
        });
      } else {
        postMessage({
          status: consts.Sharing_Width_And_Height_Info,
          logicWidth: message.logic_w,
          logicHeight: message.logic_h
        });
        this.updateOffscreenCanvasSize(message.logic_w, message.logic_h);
      }

      this.sharingWidthAndHeightInfo.logicWidth = message.logic_w;
      this.sharingWidthAndHeightInfo.logicHeight = message.logic_h;
    }

    var locallogicalheight = message.logic_h;
    var locallogicalwidth = message.logic_w;
    var localheight = message.r_h;
    var localwidth = message.r_w;
    this.xratio = localwidth / locallogicalwidth;
    this.yratio = localheight / locallogicalheight;
    var croppingParams = {
      top: message.r_x,
      left: message.r_y,
      height: message.r_h,
      width: message.r_w
    };

    if (this.currentSharingHeight != message.r_h || this.currentSharingWidth != message.r_w || this.currentSharingLogicHeight != message.logic_h || this.currentSharingLogicWidth != message.logic_w) {
      if (this.Notify_APPUI) {
        this.Notify_APPUI(jsEvent.SHARING_PARA, {
          body: {
            height: message.logic_h,
            width: message.logic_w,
            logicHeight: message.logic_h,
            logicWidth: message.logic_w
          }
        });
      } else {
        postMessage({
          status: consts.Sharing_Width_And_Height_Info,
          logicWidth: message.logic_w,
          logicHeight: message.logic_h
        });
        this.updateOffscreenCanvasSize(message.logic_w, message.logic_h);
      }

      this.currentSharingHeight = message.r_h;
      this.currentSharingWidth = message.r_w;
      this.currentSharingLogicHeight = message.logic_h;
      this.currentSharingLogicWidth = message.logic_w;
    }

    if (this.isCreateSharingWaterMark) {
      this.isCreateSharingWaterMark = false;
      var watermark = this.WaterMarkRGBA.Get_WaterMarkRGBA(this.waterMarkCanvas, this.sharingWaterMarkName, message.r_w, message.r_h);
      this.sharingDisplay.updateWatherMark(message.r_w * 1, message.r_h * 1, watermark);
    }

    if (this.sMonitorCount == 3 * 1000) {
      if (this.jsMediaEngine) {
        this.jsMediaEngine.Send_Render_Monitor_Log("SDIMM");
      } else {
        postMessage({
          status: consts.SHARING_RENDER_MONITOR_LOG,
          data: "SDIMW"
        });
      }

      this.sMonitorCount = 0;
    }

    this.sMonitorCount++;
    this.sharingDisplay.drawNextOuptutPictureGL(message.width, message.height, croppingParams, message.yuvdata, null, message.yuv_limited);
  }

  if (message_mouse) {
    this.Cursorx = message_mouse.r_x * this.xratio;
    this.Cursory = message_mouse.r_y * this.yratio;
    this.CursorWidth = message_mouse.width * this.xratio;
    this.CursorHeight = message_mouse.height * this.yratio;
    this.sharingDisplay.updateCursor(message_mouse.width, message_mouse.height, message_mouse.buffer);

    if (this.mMonitorCount == 3 * 1000) {
      if (this.jsMediaEngine) {
        this.jsMediaEngine.Send_Render_Monitor_Log("SDSBM");
      } else {
        postMessage({
          status: consts.SHARING_RENDER_MONITOR_LOG,
          data: "SDSBW"
        });
      }

      this.mMonitorCount = 0;
    }

    this.mMonitorCount++;
    this.sharingDisplay.draw(1, this.Cursorx, this.Cursory, this.CursorWidth, this.CursorHeight);
  }
};

SharingRender.prototype.updateOffscreenCanvasSize = function (width, height) {
  /**
   * why need this?
   * Failed to set the 'width' property on 'HTMLCanvasElement':
   * Cannot resize canvas after call to transferControlToOffscreen()
   */
  try {
    var canvasElement = this.sharingDisplay.canvasElement;

    if (canvasElement && canvasElement instanceof OffscreenCanvas) {
      canvasElement.width = width;
      canvasElement.height = height;
    }
  } catch (e) {
    console.error("updateOffscreenCanvasSize", e);
  }
};

SharingRender.prototype.Set_Render_WebGL = function (context) {
  this.sharingDisplay = context;
};

SharingRender.prototype.Change_Current_SSRC = function (ssrc) {
  this.currentshareactive = ssrc;
  this.currentSharingHeight = 0;
  this.currentSharingWidth = 0;
  this.currentSharingLogicHeight = 0;
  this.currentSharingLogicWidth = 0;
  this.ClearQueue();
};

SharingRender.prototype.Set_WaterMark_Info = function (waterMarkCanvas, isCreateSharingWaterMark, sharingWaterMarkName) {
  this.waterMarkCanvas = waterMarkCanvas;
  this.isCreateSharingWaterMark = isCreateSharingWaterMark;
  this.sharingWaterMarkName = sharingWaterMarkName;
};

SharingRender.prototype.ClearQueue = function () {
  if (this.sharingQueue) {
    this.sharingQueue.ClearQueue();
  }

  if (this.mouseQueue) {
    this.mouseQueue.ClearQueue();
  }

  this.currentSharingHeight = 0;
  this.currentSharingWidth = 0;
  this.currentSharingLogicHeight = 0;
  this.currentSharingLogicWidth = 0;
};

SharingRender.prototype.Get_Decoded_Sharing_Frame = function (ssrc) {
  if (!this.sharingQueue) {
    return;
  }

  var ssrc_node_part = ssrc >> 10;
  var ssrc_queue_sharing = this.sharingQueue.GetQueue(ssrc_node_part);

  if (ssrc_queue_sharing) {
    var data_node = ssrc_queue_sharing.dequeue();
    return data_node;
  }

  return null;
};

SharingRender.prototype.Get_Decoded_Mouse_Frame = function (ssrc) {
  if (!this.mouseQueue) {
    return;
  }

  var ssrc_node_part = ssrc >> 10;
  var ssrc_queue_mouse = this.mouseQueue.GetQueue(ssrc_node_part);

  if (ssrc_queue_mouse) {
    var data_node = ssrc_queue_mouse.dequeue();
    return data_node;
  }

  return null;
};

SharingRender.prototype.Get_Sharing_Data_From_Queue = function (message) {
  if (this.sharingQueue) {
    var ssrc_node_part = message.ssrc >> 10;
    var ssrcqueue_ = this.sharingQueue.GetQueue(ssrc_node_part);

    if (!ssrcqueue_) {
      ssrcqueue_ = this.sharingQueue.AddQueue(ssrc_node_part);
    }

    ssrcqueue_.enqueue(message);
    var sharingqueuelength = this.sharingQueue.GetQueueLength(ssrc_node_part);
    var diff = sharingqueuelength - 10;

    while (diff >= 0) {
      this.Get_Decoded_Sharing_Frame(message.ssrc);
      diff--;
    }
  }
};

SharingRender.prototype.Get_Mouse_Data_From_Queue = function (message) {
  if (this.mouseQueue) {
    var ssrc_node_part = message.ssrc >> 10;
    var ssrcqueue_ = this.mouseQueue.GetQueue(ssrc_node_part);

    if (!ssrcqueue_) {
      ssrcqueue_ = this.mouseQueue.AddQueue(ssrc_node_part);
    }

    ssrcqueue_.enqueue(message);
    var sharingqueuelength = this.mouseQueue.GetQueueLength(ssrc_node_part);
    var diff = sharingqueuelength - 10;

    while (diff >= 0) {
      this.Get_Decoded_Mouse_Frame(message.ssrc);
      diff--;
    }
  }
};

var _default = SharingRender;
exports.default = _default;

/***/ }),

/***/ "./src/inside/JsMediaSDK_VideoRender.js":
/*!**********************************************!*\
  !*** ./src/inside/JsMediaSDK_VideoRender.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var jsEvent = _interopRequireWildcard(__webpack_require__(/*! ../common/jsEvent */ "./src/common/jsEvent.js"));

var consts = _interopRequireWildcard(__webpack_require__(/*! ../worker/common/consts */ "./src/worker/common/consts.js"));

var _JsMediaSDK_WaterMark = _interopRequireDefault(__webpack_require__(/*! ./JsMediaSDK_WaterMark */ "./src/inside/JsMediaSDK_WaterMark.js"));

var _WebGLCanvas = _interopRequireDefault(__webpack_require__(/*! ../common/WebGLCanvas */ "./src/common/WebGLCanvas.js"));

var _JsMediaBuffer = __webpack_require__(/*! ../inside/JsMediaBuffer */ "./src/inside/JsMediaBuffer.js");

function VideoRender(params) {
  this.Notify_APPUI = params.Notify_APPUI;
  this.isSupportOffscreenCanvas = params.isSupportOffscreenCanvas;
  this.jsMediaEngine = params.jsMediaEngine;
  this.waterMarkCanvas = null;
  this.videoRenderLevel = 10;
  this.videoRenderLevelCount = 1;
  this.renderPeriodTotal = 100;
  this.renderPeriodCount = 0;
  this.renderPeriodTotalFps = 0;
  this.renderPeriodFpsCount = 0;
  this.lastRenderAudioTimeStamp = 0;
  this.videoBufEmptyCount = 0;
  this.videoBufCount = 0;
  this.videoRenderMaxLevel = 15;
  this.timestamp = 0;
  this.videoWaterMarkName = '';
  this.isCreateVideoWaterMark = false;
  this.currentactive = 0;
  this.currentVideoHeight = 0;
  this.currentVideoWidth = 0;
  this.videoRenderArray = [];
  this.WaterMarkRGBA = new _JsMediaSDK_WaterMark.default();
  this.vMonitorCount = 0;
  this.videoQueue = new _JsMediaBuffer.VideoQueueMGR();
}

VideoRender.prototype.JsMediaSDK_VideoRender = function () {
  var i = 0;

  if (this.videoRenderLevelCount == this.videoRenderLevel) {
    this.videoRenderLevelCount = 1;
  } else {
    this.videoRenderLevelCount++;
    return;
  }

  if (this.videoRenderArray.length != 0) {
    for (i = 0; i < this.videoRenderArray.length; i++) {
      // this.timestamp=jsMediaEngine.Get_Video_SSRC_Latest_Time(this.currentactive)
      if (this.jsMediaEngine) {
        this.timestamp = this.jsMediaEngine.Get_Video_SSRC_Latest_Time(this.currentactive);
      } else {//get timestamp from audio worklet
      }

      var video_buf = this.Get_Decoded_Video_Frame(this.currentactive);

      if (video_buf) {
        //count level
        this.videoBufEmptyCount = 0;
        this.videoBufCount = this.Get_Decoded_Video_Buffer_Length(this.currentactive);

        if (this.renderPeriodCount == this.renderPeriodTotal) {
          var frameInter = this.renderPeriodTotalFps / this.renderPeriodFpsCount;

          if (!frameInter || frameInter == 0) {
            if (!frameInter) {
              console.log("fps error");
            }

            frameInter = 100;
          }

          var level = Math.round(frameInter / this.videorenderinterval);

          if (this.videoRenderLevel < level) {
            this.videoRenderLevel++;
          }

          this.renderPeriodCount = 0;
          this.renderPeriodTotalFps = 0;
          this.renderPeriodFpsCount = 0;
        }

        this.renderPeriodCount++;
        var fps = this.Get_SSRC_VIDEO_FPS(this.currentactive);

        if (fps != 0) {
          this.renderPeriodFpsCount++;
          this.renderPeriodTotalFps += fps;
        } // console.log("fps is: " + fps + "Queue Length is : " + this.videoBufCount);


        var diffTime = this.timestamp - video_buf.ntptime;

        if (video_buf.ntptime != 0) {
          if (this.timestamp != 0) {
            // we need to syc a/v
            if (diffTime > 0 && diffTime <= 1000) {} else if (diffTime < 0 && diffTime >= -1000) {} else if (diffTime < -1000) {
              if (this.lastRenderAudioTimeStamp != this.timestamp) {
                this.videoRenderLevel -= 1;
              }
            } else {
              if (this.lastRenderAudioTimeStamp != this.timestamp) {
                this.videoRenderLevel += 1;
              }
            }

            this.lastRenderAudioTimeStamp = this.timestamp;
          }
        }

        var croppingParams = {
          top: video_buf.r_x,
          left: video_buf.r_y,
          height: video_buf.r_h,
          width: video_buf.r_w
        };

        if (this.isCreateVideoWaterMark || (this.currentVideoHeight != croppingParams.width || this.currentVideoWidth != croppingParams.height) && this.videoWaterMarkName && this.waterMarkCanvas) {
          this.isCreateVideoWaterMark = false;
          var watermark = this.WaterMarkRGBA.Get_WaterMarkRGBA(this.waterMarkCanvas, this.videoWaterMarkName, video_buf.width, video_buf.height);
          this.videoRenderArray[i].display.updateWatherMark(video_buf.width * 1, video_buf.height * 1, watermark);
        }

        if (this.currentVideoHeight != croppingParams.height || this.currentVideoWidth != croppingParams.width) {
          if (this.Notify_APPUI) {
            this.Notify_APPUI(jsEvent.CURRENT_VIDEO_RESOLUTION, {
              width: croppingParams.width,
              height: croppingParams.height
            });
          } else {
            postMessage({
              status: consts.CURRENT_VIDEO_RESOLUTION,
              width: croppingParams.width,
              height: croppingParams.height
            });
          }

          this.videoRenderArray[i].canvas.width = croppingParams.width;
          this.videoRenderArray[i].canvas.height = croppingParams.height;
          this.currentVideoHeight = croppingParams.height;
          this.currentVideoWidth = croppingParams.width;
        }

        if (video_buf.yuvdata.length == video_buf.width * video_buf.height * 3 / 2 && video_buf.r_x >= 0 && video_buf.r_y >= 0 && video_buf.r_x + video_buf.r_w <= video_buf.width && video_buf.r_y + video_buf.r_h <= video_buf.height) {
          if (this.vMonitorCount == 14 * 600) {
            if (this.jsMediaEngine) {
              this.jsMediaEngine.Send_Render_Monitor_Log("VDGLM");
            } else {
              postMessage({
                status: consts.VIDEO_RENDER_MONITOR_LOG,
                data: "VDGLW"
              });
            }

            this.vMonitorCount = 0;
          }

          this.vMonitorCount++;
          this.videoRenderArray[i].display.drawNextOuptutPictureGL(video_buf.width, video_buf.height, croppingParams, video_buf.yuvdata, video_buf.rotation, video_buf.yuv_limited);
        } else {
          console.error("invalid yuv data" + video_buf.r_x + " " + video_buf.r_y + " " + video_buf.r_w + " " + video_buf.r_h + " " + video_buf.width + " " + video_buf.height);
        }

        ;
      } else {
        this.videoBufEmptyCount++;

        if (true) {
          this.videoRenderLevel += 1; // console.log("Decelerator is " + this.videoRenderLevel);

          this.videoBufEmptyCount = 0;
        } // console.log("video buffer is empty");

      }

      if (this.videoBufCount * this.videoRenderLevel * 10 > 150) {
        this.videoRenderLevel -= 1; // console.log("Accelerator is " + this.videoRenderLevel);
      }

      if (this.videoRenderLevel < 1) {
        this.videoRenderLevel = 1;
      } else if (this.videoRenderLevel > this.videoRenderMaxLevel) {
        this.videoRenderLevel = this.videoRenderMaxLevel;
      }
    }
  }
};

VideoRender.prototype.Get_Decoded_Video_Frame = function (ssrc) {
  if (!this.videoQueue) {
    return;
  }

  var ssrc_queue_ = this.videoQueue.GetQueue(ssrc);

  if (ssrc_queue_) {
    var data_node = ssrc_queue_.dequeue();
    return data_node;
  }

  return null;
};

VideoRender.prototype.Set_SSRC_Latest_Time_Stamp = function (timestamp) {
  this.timestamp = timestamp;
};

VideoRender.prototype.Get_Decoded_Video_Buffer_Length = function (ssrc) {
  if (this.videoQueue) {
    return this.videoQueue.GetQueueLength(ssrc);
  }

  return 0;
};

VideoRender.prototype.Get_SSRC_VIDEO_FPS = function (ssrc) {
  ssrc = ssrc >> 10;

  if (this.videoQueue && this.videoQueue.ssrcInfo) {
    var fps = this.videoQueue.ssrcInfo.GetSSRCFpsInfo(ssrc);

    if (fps) {
      return Math.round(fps);
    }
  }

  return 0;
};

VideoRender.prototype.Change_Current_SSRC = function (ssrc) {
  this.currentactive = ssrc;
  this.ClearQueue();
};

VideoRender.prototype.Set_Render_Array = function (videoRenderArray) {
  this.videoRenderArray = videoRenderArray;

  if (this.videoRenderArray.length > 0) {
    for (var i = 0; i < this.videoRenderArray.length; i++) {
      this.videoRenderArray[i].display = new _WebGLCanvas.default(this.videoRenderArray[i].canvas, undefined, {
        webglcontextlostCallback: this.webglcontextlostCallback.bind(this),
        webglcontextrestoredCallback: this.webglcontextrestoredCallback.bind(this),
        params: {
          videoRenderArrayIndex: i
        }
      });
    }
  }
};

VideoRender.prototype.webglcontextlostCallback = function (ev, _ref) {// Not necessary to handle this event

  var videoRenderArrayIndex = _ref.videoRenderArrayIndex;
};

VideoRender.prototype.webglcontextrestoredCallback = function (ev, _ref2) {
  var videoRenderArrayIndex = _ref2.videoRenderArrayIndex;
  this.videoRenderArray[videoRenderArrayIndex].display = new _WebGLCanvas.default(this.videoRenderArray[videoRenderArrayIndex].canvas, undefined, {
    webglcontextlostCallback: this.webglcontextlostCallback.bind(this),
    webglcontextrestoredCallback: this.webglcontextrestoredCallback.bind(this),
    params: {
      videoRenderArrayIndex: videoRenderArrayIndex
    }
  });
};

VideoRender.prototype.ClearQueue = function () {
  if (this.videoQueue) {
    this.videoQueue.ClearQueue();
  }

  this.currentVideoHeight = 0;
  this.currentVideoWidth = 0;
};

VideoRender.prototype.Set_WaterMark_Info = function (waterMarkCanvas, isCreateVideoWaterMark, videoWaterMarkName) {
  this.waterMarkCanvas = waterMarkCanvas;
  this.isCreateVideoWaterMark = isCreateVideoWaterMark;
  this.videoWaterMarkName = videoWaterMarkName;
};

VideoRender.prototype.Get_Video_Data_From_Queue = function (message) {
  if (this.videoQueue) {
    var ssrcqueue_ = this.videoQueue.GetQueue(message.ssrc);

    if (!ssrcqueue_) {
      ssrcqueue_ = this.videoQueue.AddQueue(message.ssrc);
    }

    ssrcqueue_.enqueue(message);

    if (this.videoQueue && this.videoQueue.ssrcInfo) {
      var ssrc_node_part = message.ssrc >> 10;
      this.videoQueue.ssrcInfo.UpdateSSRCInfo(ssrc_node_part, message.ntptime);
    }

    var videoqueuelength = this.videoQueue.GetQueueLength(message.ssrc);
    var diff = videoqueuelength - 30;

    while (diff >= 0) {
      this.Get_Decoded_Video_Frame(message.ssrc);
      diff--;
    }
  }
};

var _default = VideoRender;
exports.default = _default;

/***/ }),

/***/ "./src/inside/JsMediaSDK_WaterMark.js":
/*!********************************************!*\
  !*** ./src/inside/JsMediaSDK_WaterMark.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function JsMediaSDK_WaterMarkRGBA() {}

JsMediaSDK_WaterMarkRGBA.prototype.Get_WaterMarkRGBA = function (canvas, name, width, height, cwidth, cheight) {
  if (!name || !width || !height) {
    return;
  }

  var ratio = 1;
  width = width * ratio;
  height = height * ratio;
  cwidth = height;
  canvas.width = width;
  canvas.height = height;
  var ctx = canvas.getContext("2d");
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  ctx.translate(canvas.width / 2, canvas.height / 2);
  ctx.rotate(-45 * Math.PI / 180);
  ctx.lineWidth = 1.0;
  ctx.fillStyle = "rgba(90,90,90,0.25)";
  var index = 0;
  var fontSize = Math.SQRT2 * cwidth / name.length;
  ctx.imageSmoothingEnabled = true;
  ctx.font = fontSize + "px  'Segoe UI'";
  var text_width = ctx.measureText(name);

  if (name.length == 1) {
    ctx.fillText(name, -text_width.width / 2, text_width.width / 2);
  } else {
    fontSize = 2;
    ctx.font = fontSize + "px  'Segoe UI'";
    text_width = ctx.measureText(name);

    while (text_width.width < Math.SQRT2 * cwidth - 2 * ctx.measureText(name[0]).width) {
      // console.error(ctx.measureText(name[0]).width)
      fontSize = fontSize + 1;
      ctx.font = fontSize + "px  'Segoe UI'";
      text_width = ctx.measureText(name);
    }

    ctx.fillText(name, -Math.SQRT2 * cwidth / 2 + Math.abs(Math.SQRT2 * cwidth / 2 - text_width.width / 2), ctx.measureText(name[0]).width / 2);
  }

  var image_data = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);
  var water_mark = new Uint8Array(image_data.data.buffer);
  return water_mark;
};

var _default = JsMediaSDK_WaterMarkRGBA;
exports.default = _default;

/***/ }),

/***/ "./src/inside/MediaInit.js":
/*!*********************************!*\
  !*** ./src/inside/MediaInit.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var MediaInit =
/*#__PURE__*/
function () {
  function MediaInit() {
    (0, _classCallCheck2.default)(this, MediaInit);
    this.handler = false;
    this.wasm = false;
    this.socket = false;
  }

  (0, _createClass2.default)(MediaInit, [{
    key: "setHanderSuccess",
    value: function setHanderSuccess() {
      this.handler = true;
    }
  }, {
    key: "setWasmSuccess",
    value: function setWasmSuccess() {
      this.wasm = true;
    }
  }, {
    key: "setSocketSuccess",
    value: function setSocketSuccess() {
      this.socket = true;
    }
  }, {
    key: "checkInitSuccess",
    value: function checkInitSuccess() {
      return this.handler && this.wasm && this.socket;
    }
  }, {
    key: "isSocketInitSuccess",
    value: function isSocketInitSuccess() {
      return this.socket;
    }
  }, {
    key: "waitforInitSuccess",
    value: function waitforInitSuccess() {
      var _this = this;

      return new _promise.default(function (resolve, reject) {
        if (_this.checkInitSuccess()) {
          return resolve(true);
        }

        var interval = 500; // ms

        var maxRun = 60 * 1000 / interval; // max run 60 seconds

        var countRun = 0;
        var intervalClearIns = setInterval(function () {
          if (countRun++ > maxRun) {
            reject("wait for init success timeout", maxRun);
            clearInterval(intervalClearIns);
          }

          if (_this.checkInitSuccess()) {
            resolve(true);
            clearInterval(intervalClearIns);
          }
        }, interval);
      });
    }
  }]);
  return MediaInit;
}();

var _default = MediaInit;
exports.default = _default;

/***/ }),

/***/ "./src/inside/Monitor.js":
/*!*******************************!*\
  !*** ./src/inside/Monitor.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _from = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/array/from */ "./node_modules/@babel/runtime/core-js/array/from.js"));

var _map = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/map */ "./node_modules/@babel/runtime/core-js/map.js"));

var jsEvent = _interopRequireWildcard(__webpack_require__(/*! ../common/jsEvent */ "./src/common/jsEvent.js"));

var _JsMediaEngine_Variables = _interopRequireDefault(__webpack_require__(/*! ./JsMediaEngine_Variables */ "./src/inside/JsMediaEngine_Variables.js"));

//JSPLD JsMediaSDK_PreLoad
//JSINIT JsMediaSDK_Init
//event abbr
// https://zoomvideo.atlassian.net/wiki/spaces/ZTP/pages/451805636/ZOOM-71587+Add+trouble+shooting+main+steps+tracking+for+web+client
var Zoom_Monitor = function () {
  // function wasm_info() {
  //     // this.download_s = 0;//milliseconds
  //     // this.download_e = 0;//milliseconds
  //     // this.compile_s = 0;//milliseconds
  //     // this.compile_e = 0;//milliseconds
  //     // this.socket_e = 0;//milliseconds
  //     //false init not success;
  //     //true init success;
  //     this.init = null;
  // }
  // wasm_info.prototype = {
  //     toString: function () {
  //         if (this.init !== null) {
  //             if (this.init) {
  //                 let delta_d = this.download_e - this.download_s;
  //                 let delta_c = this.compile_e - this.compile_s;
  //                 let delta_s = this.socket_e;
  //                 return "deltaD(" + delta_d + ")" + "deltaC(" + delta_c + ")"+"deltaS("+delta_s+")";
  //             } else {
  //                 return "Failed";
  //             }
  //         }
  //     }
  // }
  function Monitor() {
    this.base_time = null;
    this.monitor = ""; // this.audio_encode = new wasm_info();
    // this.audio_decode = new wasm_info();
    // this.video_encode = new wasm_info();
    // this.video_decode = new wasm_info();
    // this.sharing_encode = new wasm_info();
    // this.sharing_decode = new wasm_info();

    this.last_get_monitor_time = 0;
    this.checkIsNecessaryLogMap = new _map.default();
    this.highfrequencyerror = new _map.default();
  }

  Monitor.prototype = {
    //adds abbr audio/decode/download/start
    //init
    init: function init() {
      this.base_time = new Date().getTime() / 1000;
      this.checkIsNecessaryLogMap = new _map.default();
    },
    // set_adi: function (re) {
    //     this.audio_decode.init = re;
    // },
    // set_adds: function (time) {
    //     this.audio_decode.download_s = time;
    // },
    // set_adde: function (time) {
    //     this.audio_decode.download_e = time;
    // },
    // set_adcs: function (time) {
    //     this.audio_decode.download_s = time;
    // },
    // set_adce: function (time) {
    //     this.audio_decode.download_e = time;
    // },
    // set_adse:function(time){
    //     this.audio_decode.socket_e = time;
    // },
    // set_aei: function (re) {
    //     this.audio_encode.init = re;
    // },
    // set_aeds: function (time) {
    //     this.audio_encode.download_s = time;
    // },
    // set_aede: function (time) {
    //     this.audio_encode.download_e = time;
    // },
    // set_aecs: function (time) {
    //     this.audio_encode.download_s = time;
    // },
    // set_aece: function (time) {
    //     this.audio_encode.download_e = time;
    // },
    // set_aese:function(time){
    //     this.audio_encode.socket_e = time;
    // },
    // set_vdi: function (re) {
    //     this.video_decode.init = re;
    // },
    // set_vdds: function (time) {
    //     this.video_decode.download_s = time;
    // },
    // set_vdde: function (time) {
    //     this.video_decode.download_e = time;
    // },
    // set_vdcs: function (time) {
    //     this.video_decode.download_s = time;
    // },
    // set_vdce: function (time) {
    //     this.video_decode.download_e = time;
    // },
    // set_vdse:function(time){
    //     this.video_decode.socket_e = time;
    // },
    // set_vei: function (re) {
    //     this.video_encode.init = re;
    // },
    // set_veds: function (time) {
    //     this.video_encode.download_s = time;
    // },
    // set_vede: function (time) {
    //     this.video_encode.download_e = time;
    // },
    // set_vecs: function (time) {
    //     this.video_encode.download_s = time;
    // },
    // set_vece: function (time) {
    //     this.video_encode.download_e = time;
    // },
    // set_vese:function(time){
    //     this.video_encode.socket_e = time;
    // },
    // set_sdi: function (re) {
    //     this.sharing_decode.init = re;
    // },
    // set_sdds: function (time) {
    //     this.sharing_decode.download_s = time;
    // },
    // set_sdde: function (time) {
    //     this.sharing_decode.download_e = time;
    // },
    // set_sdcs: function (time) {
    //     this.sharing_decode.download_s = time;
    // },
    // set_sdce: function (time) {
    //     this.sharing_decode.download_e = time;
    // },
    // set_sdse:function(time){
    //     this.sharing_decode.socket_e = time;
    // },
    // set_sei: function (re) {
    //     this.sharing_encode.init = re;
    // },
    // set_seds: function (time) {
    //     this.sharing_encode.download_s = time;
    // },
    // set_sede: function (time) {
    //     this.sharing_encode.download_e = time;
    // },
    // set_secs: function (time) {
    //     this.sharing_encode.download_s = time;
    // },
    // set_sece: function (time) {
    //     this.sharing_encode.download_e = time;
    // },
    // set_sese:function(time){
    //     this.sharing_encode.socket_e = time;
    // },
    add_monitor: function add_monitor(log) {
      if (log) {
        try {
          var send_instant = false;

          if (log[log.length - 1] == "F" || log[log.length - 1] == "f") {
            send_instant = true;
          }

          var delta_t = new Date().getTime() / 1000 - this.base_time; //seconds

          if (this.monitor) {
            this.monitor = this.monitor + log + "(" + Math.ceil(delta_t) + ")";
          } else {
            this.monitor = log + "(" + Math.ceil(delta_t) + ")";
          }

          if (send_instant) {
            this.send_instant_monitor();
          }
        } catch (e) {}
      }
    },
    get_monitor: function get_monitor() {
      var zm = this.monitor;
      var now_t = new Date().getTime() / 1000;

      if (zm == null || !(zm.length > 80 || now_t - this.last_get_monitor_time > 3 * 60)) {
        return "";
      }

      this.last_get_monitor_time = now_t;
      this.monitor = null;
      return "WCL_M, " + zm;
    },
    get_instant_monitor: function get_instant_monitor() {
      var zm = this.monitor;
      this.monitor = null;
      return "WCL_M, " + zm;
    },
    send_instant_monitor: function send_instant_monitor() {
      var zm = this.get_instant_monitor();

      if (zm) {
        _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
          "evt": 4167,
          "seq": 1,
          "body": {
            "data": zm
          }
        });
      }
    },
    add_monitor2: function add_monitor2(log) {
      if (log) {
        if (this.monitor) {
          this.monitor = this.monitor + log + "(" + ")";
        } else {
          this.monitor = log + "(" + ")";
        }
      }
    },
    add_monitor3: function add_monitor3(log) {
      if (!log) {
        return;
      }

      if (!this.highfrequencyerror[log]) {
        this.highfrequencyerror[log] = 1;
      } else {
        this.highfrequencyerror[log] += 1;
      }

      if ((this.highfrequencyerror[log] & this.highfrequencyerror[log] - 1) == 0) {
        this.add_monitor(log.substring(0, log.length - 1) + this.highfrequencyerror[log] + "F");
      }
    },

    /**
     * many exception logs are the same, do not send duplicated logs
     * checkIsNecessaryLogMap store N logs recently sent, and if new log is inside checkIsNecessaryLogMap, ignore the new log
     *
     * checkIsNecessaryLogMap store Max N logs, if storage is full, delete the first in logs ( first-in first-out )
     * @type logRawData {string}
     */
    checkIsNecessaryExceptionLogAndReturnRepeatTimes: function checkIsNecessaryExceptionLogAndReturnRepeatTimes(logRawData) {
      var _this = this;

      var mapCacheMaxSize = 200; // The maximum number of logs stored in the map table

      var deletePiecesOnceTime = 20;
      var everyNTimesSendLog = 100; // N === value

      var isNecessary = true;
      var repeatNumber = 0;

      try {
        if (this.checkIsNecessaryLogMap.get(logRawData) && this.checkIsNecessaryLogMap.get(logRawData) % everyNTimesSendLog !== 0) {
          isNecessary = false;
        }

        repeatNumber = this.checkIsNecessaryLogMap.get(logRawData);
        return {
          isNecessary: isNecessary,
          repeatNumber: repeatNumber === undefined ? 0 : repeatNumber
        };
      } catch (e) {
        return {
          isNecessary: true,
          repeatNumber: 0
        };
      } finally {
        var oldCount = this.checkIsNecessaryLogMap.get(logRawData) || 0;
        this.checkIsNecessaryLogMap.set(logRawData, oldCount + 1);

        if (this.checkIsNecessaryLogMap.size > mapCacheMaxSize) {
          var deleteKeys = (0, _from.default)(this.checkIsNecessaryLogMap.keys()).slice(0, deletePiecesOnceTime);
          console.log("delete log cache keys", deleteKeys);
          deleteKeys.forEach(function (k) {
            return _this.checkIsNecessaryLogMap.delete(k);
          });
        }
      }
    }
  };
  return new Monitor();
}();

var _default = Zoom_Monitor;
exports.default = _default;

/***/ }),

/***/ "./src/inside/RemoteControl.js":
/*!*************************************!*\
  !*** ./src/inside/RemoteControl.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _stringify = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/json/stringify */ "./node_modules/@babel/runtime/core-js/json/stringify.js"));

var _keys = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/object/keys */ "./node_modules/@babel/runtime/core-js/object/keys.js"));

var _assign = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/object/assign */ "./node_modules/@babel/runtime/core-js/object/assign.js"));

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _throttle = _interopRequireDefault(__webpack_require__(/*! lodash/throttle */ "./node_modules/lodash/throttle.js"));

var _log = _interopRequireDefault(__webpack_require__(/*! ../common/log */ "./src/common/log.js"));

var _pubSub = _interopRequireDefault(__webpack_require__(/*! ../common/pubSub */ "./src/common/pubSub.js"));

var jsEvent = _interopRequireWildcard(__webpack_require__(/*! ../common/jsEvent */ "./src/common/jsEvent.js"));

var _isNumber = _interopRequireDefault(__webpack_require__(/*! lodash/isNumber */ "./node_modules/lodash/isNumber.js"));

var _utf = _interopRequireDefault(__webpack_require__(/*! utf8 */ "./node_modules/utf8/utf8.js"));

var _util = _interopRequireDefault(__webpack_require__(/*! ../common/util */ "./src/common/util.js"));

var _CommonEnums = __webpack_require__(/*! ../common/enums/CommonEnums */ "./src/common/enums/CommonEnums.js");

var log = (0, _log.default)("sdk.remoteControl");
var PDU_TYPE_ENUM = {
  UNKNOWN: 0,
  KEEP_ALIVE: 0,
  MOUSE: 83,
  SEND_POSITION_PARAMS: 82,
  WHEEL: 84,
  KEYBOARD: 85,
  SEND_CHARS: 86,
  SYNC_CLIPBOARD: 87,
  COPY_TEXT_FROM_RWG: 88
};
/**
 *
 * @param {Object}  [params.dom]
 * @param {String}  [params.socketURL]
 * @param {String}  [params.meetingID]
 * @param {String}  [params.condID]
 * @param {Boolean} [params.isEnablePaste=true]
 * @constructor
 */

function RemoteControl(params) {
  var self = this;
  this.dom = params.dom;
  this.socketURL = params.socketURL;
  this.meetingID = params.meetingID;
  this.condID = params.condID;
  this.blobSocket = null;

  var _keyMouseEventHandlerBindThis = this._keyMouseEventHandler.bind(this); // this.keyMouseEventHandler = this._keyMouseEventHandler.bind(this);


  this.keyMouseEventHandler = function (e) {
    self.keyMouseFilters(e).then(function (e) {
      _keyMouseEventHandlerBindThis(e);
    });
  };

  this.keyMouseEventHandlerThrottle = (0, _throttle.default)(function (e) {
    self.keyMouseEventHandler(e);
  }, 1000 / 24);
  this.pasteOnDocument = this._pasteOnDocument.bind(this);
  this.copyOnDocument = this._copyOnDocument.bind(this);
  this.cutOnDocument = this._cutOnDocument.bind(this);
  this.focus = this._focus.bind(this);
  /**
   * use this token to unsubscribe SHARING_PARAM_INFO_FROM_SOCKET event
   */

  this.PUBSUB_SHARING_PARAM_INFO_TOKEN = null;
  this.preventDefault = this._preventDefault.bind(this);
  this.positionMap = {
    canvas: {
      offsetX: 0,
      offsetY: 0
    },
    src: {
      x: 0,
      y: 0,
      w: 0,
      h: 0,
      scaleWidth: 0,
      scaleHeight: 0
    },
    dst: {
      x: 0,
      y: 0,
      w: 0,
      h: 0
    }
  };
  this.blockedKeyboardEventOfPaste = [];
  this.keydownupMergeRemoveMap = {};
  this.keyMouseEventHandlerFilter_every_keyup_must_have_keydown_before_Map = {};
  this.PASTE_MAX_BYTE_LENGTH = 64 * 1000; // 64kb

  this.currentMousePositionProps = {
    clientX: 0,
    clientY: 0,
    x2video: 0,
    y2video: 0
  };
  /**
   * If isControllerNow is TRUE, sdk will send control directives to remote computer, else not.
   * @type {boolean}
   */

  this.isControllerNow = true;
  this.remoteOS = _CommonEnums.OS_ENUM.UNKNOWN;
  this.localOS = this.getLocalOS(); // not reliable

  this._blockedCopyKeyboardList = [];
}

RemoteControl.prototype = {
  start: function start() {
    var _this = this;

    return new _promise.default(
    /*#__PURE__*/
    function () {
      var _ref = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(resolve, reject) {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                log("remote control start");

                _this.modifyDom();

                _this.bindEvent();

                _this.subscribeSharingWidthOrHeightChange();

                _this.checkAndClearKeydownupMergeRemoveMap();

                _context.next = 8;
                return _this.connectSocket();

              case 8:
                _this.sendPostionPDU();

                _this.socketBlobMessageHandler();

                resolve(true);
                _context.next = 16;
                break;

              case 13:
                _context.prev = 13;
                _context.t0 = _context["catch"](0);
                reject(_context.t0);

              case 16:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 13]]);
      }));

      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }());
  },
  destroy: function destroy() {
    var _this2 = this;

    return new _promise.default(function (resolve, reject) {
      try {
        log("destroy remote control");

        _this2.unbindEvent();

        _this2.uncheckAndClearKeydownupMergeRemoveMap();

        _this2.destroySocket();

        _pubSub.default.unsubscribe(_this2.PUBSUB_SHARING_PARAM_INFO_TOKEN);

        resolve(true);
      } catch (ex) {
        log(ex);
        resolve(false);
      }
    });
  },
  modifyDom: function modifyDom() {
    try {
      this.dom.setAttribute("tabindex", "0");
      this.dom.focus();
    } catch (ex) {}
  },
  _focus: function _focus() {
    this.dom.focus();
  },
  getLocalOS: function getLocalOS() {
    var platform = global.navigator.platform;

    if (/win/i.test(platform)) {
      return _CommonEnums.OS_ENUM.WIN;
    } else if (/mac/i.test(platform)) {
      return _CommonEnums.OS_ENUM.MAC;
    } else {
      return _CommonEnums.OS_ENUM.UNKNOWN;
    }
  },
  setIsControlerNow: function setIsControlerNow(isControllerNow) {
    this.isControllerNow = isControllerNow;
  },
  blobSocketCheckAndSend: function blobSocketCheckAndSend(buffer) {
    if (this.isControllerNow) {
      this.blobSocket.send(buffer);
    }
  },
  isKeyboardEvent: function isKeyboardEvent(e) {
    if (!e) return false;
    return e.type && ['keydown', 'keyup'].indexOf(e.type.toLowerCase()) !== -1;
  },

  /**
   * @param e {Event}
   * @param key {String}
   */
  isThisKeyIgnoreCase: function isThisKeyIgnoreCase(e, key) {
    return e.key && e.key.toLowerCase() == key.toLowerCase();
  },
  _copyOnDocument: function () {
    var _copyOnDocument2 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(e) {
      var list, lasteOne;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.isFocusNow()) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              list = this._blockedCopyKeyboardList;
              lasteOne = list[list.length - 1]; // avoid the influence of document.execommand("copy")

              if (!(lasteOne == 'done')) {
                _context2.next = 8;
                break;
              }

              return _context2.abrupt("return");

            case 8:
              this._blockedCopyKeyboardList = [];

              this._blockedCopyKeyboardList.push("done");

            case 10:
              log("copyOnDocument", e);
              this.processMonitorCtrlMetaWithKey('c');

            case 12:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function _copyOnDocument(_x3) {
      return _copyOnDocument2.apply(this, arguments);
    };
  }(),
  _cutOnDocument: function () {
    var _cutOnDocument2 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3(e) {
      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (this.isFocusNow()) {
                _context3.next = 2;
                break;
              }

              return _context3.abrupt("return");

            case 2:
              log("_cutOnDocument", e);
              this.processMonitorCtrlMetaWithKey('x');

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function _cutOnDocument(_x4) {
      return _cutOnDocument2.apply(this, arguments);
    };
  }(),
  processMonitorCtrlMetaWithKey: function processMonitorCtrlMetaWithKey(k) {
    var _this3 = this;

    var inputKeyTypeMap = {
      keydown: 0,
      keyup: 1,
      keychar: 2
    };
    var isRemoteMACOS = this.remoteOS === _CommonEnums.OS_ENUM.MAC;
    var commonObj = {
      t: 'keydown',
      event_type: 1,
      repeat: false,
      alt: false,
      shift: false,
      capslock: false,
      numlock: true,
      pduType: PDU_TYPE_ENUM.KEYBOARD,
      ctrl: !isRemoteMACOS,
      super: isRemoteMACOS
    };
    var ctrlObj = (0, _assign.default)({}, commonObj, {
      charCode: 0,
      keyCode: isRemoteMACOS ? 91 : 17,
      key: isRemoteMACOS ? "Meta" : "Control"
    });
    var cObj = (0, _assign.default)({}, commonObj, {
      charCode: k.charCodeAt(0),
      keyCode: k.toUpperCase().charCodeAt(0),
      key: k
    }); // this.processEvent({"event_type":1,"input_event_type":0,"t":"keydown","pduType":85,"keyCode":17,"charCode":0,"key":"Control","repeat":false,"ctrl":true,"alt":false,"super":false,"shift":false,"capslock":false,"numlock":true})
    // this.processEvent({"event_type":1,"input_event_type":2,"t":"keydown","pduType":85,"keyCode":17,"charCode":0,"key":"Control","repeat":false,"ctrl":true,"alt":false,"super":false,"shift":false,"capslock":false,"numlock":true})
    // this.processEvent({"event_type":1,"input_event_type":0,"t":"keydown","pduType":85,"keyCode":67,"charCode":99,"key":"c","repeat":false,"ctrl":true,"alt":false,"super":false,"shift":false,"capslock":false,"numlock":true})
    // this.processEvent({"event_type":1,"input_event_type":2,"t":"keydown","pduType":85,"keyCode":67,"charCode":99,"key":"c","repeat":false,"ctrl":true,"alt":false,"super":false,"shift":false,"capslock":false,"numlock":true})
    // this.processEvent({"event_type":1,"input_event_type":1,"t":"keyup","pduType":85,"keyCode":17,"charCode":0,"key":"Control","repeat":false,"ctrl":false,"alt":false,"super":false,"shift":false,"capslock":false,"numlock":true})
    // this.processEvent({"event_type":1,"input_event_type":1,"t":"keyup","pduType":85,"keyCode":67,"charCode":99,"key":"c","repeat":false,"ctrl":false,"alt":false,"super":false,"shift":false,"capslock":false,"numlock":true})

    var obj1 = (0, _assign.default)({}, ctrlObj, {
      input_event_type: inputKeyTypeMap.keydown
    });
    var obj2 = (0, _assign.default)({}, ctrlObj, {
      input_event_type: inputKeyTypeMap.keychar
    });
    var obj3 = (0, _assign.default)({}, cObj, {
      input_event_type: inputKeyTypeMap.keydown
    });
    var obj4 = (0, _assign.default)({}, cObj, {
      input_event_type: inputKeyTypeMap.keychar
    });
    var obj5 = (0, _assign.default)({}, ctrlObj, {
      t: 'keyup',
      ctrl: false,
      super: false,
      input_event_type: inputKeyTypeMap.keyup
    });
    var obj6 = (0, _assign.default)({}, cObj, {
      t: 'keyup',
      ctrl: false,
      super: isRemoteMACOS,
      input_event_type: inputKeyTypeMap.keyup
    });
    var orders;

    if (isRemoteMACOS) {
      orders = [obj1, obj2, obj3, obj4, obj6, obj5];
    } else {
      orders = [obj1, obj2, obj3, obj4, obj5, obj6];
    }

    orders.forEach(function (item) {
      _this3.processEvent(item);
    });
  },
  isFocusNow: function isFocusNow() {
    return this.dom === document.activeElement;
  },
  _pasteOnDocument: function () {
    var _pasteOnDocument2 = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4(e) {
      var text, byteArr, ii, char, encoded, i, buffer, type, srcView, data, _i;

      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (this.isFocusNow()) {
                text = (e.clipboardData || window.clipboardData).getData('text');
                log("_pasteOnDocument", text);
                byteArr = [];

                for (ii = 0; ii < text.length; ii++) {
                  char = text[ii];
                  encoded = _utf.default.encode(char);

                  for (i = 0; i < encoded.length; i++) {
                    byteArr.push(encoded.charCodeAt(i));
                  }
                }

                buffer = new ArrayBuffer(8 + byteArr.length);
                type = new Uint8Array(buffer);
                srcView = new DataView(buffer, 4, 4);
                data = new Uint8Array(buffer, 8);
                type[0] = PDU_TYPE_ENUM.SYNC_CLIPBOARD;
                srcView.setUint32(0, byteArr.length, true);

                for (_i = 0; _i < byteArr.length; _i++) {
                  data[_i] = byteArr[_i];
                }

                if (byteArr.length > this.PASTE_MAX_BYTE_LENGTH) {
                  this.triggerPasteTextLengthOverflow();
                  this.dropAllEventFromBlockedKeyboardEventOfPaste();
                } else {
                  this.blobSocketCheckAndSend(buffer); // type[0] = PDU_TYPE_ENUM.SEND_CHARS;
                  // this.blobSocketCheckAndSend(buffer);
                  // this.sendAllEventFromBlockedKeyboardEventOfPaste();

                  this.processMonitorCtrlMetaWithKey('v');
                }
              }

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function _pasteOnDocument(_x5) {
      return _pasteOnDocument2.apply(this, arguments);
    };
  }(),
  onReturnCopiedText: function onReturnCopiedText(fn) {
    !this._onReturnCopiedText_list && (this._onReturnCopiedText_list = []);

    this._onReturnCopiedText_list.push(fn);
  },
  triggerReturnCopiedText: function triggerReturnCopiedText(data) {
    if (this._onReturnCopiedText_list) {
      this._onReturnCopiedText_list.forEach(function (fn) {
        return fn(data);
      });
    }
  },
  onPasteTextLengthOverflow: function onPasteTextLengthOverflow(fn) {
    !this._onPasteTextLengthOverflow_list && (this._onPasteTextLengthOverflow_list = []);

    this._onPasteTextLengthOverflow_list.push(fn);
  },
  triggerPasteTextLengthOverflow: function triggerPasteTextLengthOverflow() {
    if (this._onPasteTextLengthOverflow_list) {
      this._onPasteTextLengthOverflow_list.forEach(function (fn) {
        return fn();
      });
    }
  },
  dropAllEventFromBlockedKeyboardEventOfPaste: function dropAllEventFromBlockedKeyboardEventOfPaste() {
    this.blockedKeyboardEventOfPaste = [];
  },
  createParamsFromKeyboardEvent: function createParamsFromKeyboardEvent(e) {
    return {
      key: e.key,
      code: e.code,
      shiftKey: e.shiftKey,
      altKey: e.altKey,
      repeat: e.repeat,
      charCode: e.charCode,
      keyCode: e.keyCode,
      which: e.which,
      ctrlKey: e.ctrlKey,
      metaKey: e.metaKey
    };
  },
  sendAllEventFromBlockedKeyboardEventOfPaste: function sendAllEventFromBlockedKeyboardEventOfPaste() {
    log("blockedKeyboardEventOfPaste.length", this.blockedKeyboardEventOfPaste.length);

    while (this.blockedKeyboardEventOfPaste.length > 0) {
      var e = this.blockedKeyboardEventOfPaste.shift();

      this._keyMouseEventHandler(e);
    }
  },

  /**
   * all preventDefault
   * many keys down/up must be preventDefault
   * such as F1, it means open help info
   * these keys could influence the behaviour of webClient
   * so they must be preventDefault
   * except white list
   * @param e
   * @private
   */
  _preventDefault: function _preventDefault(e) {
    var keyTypes = ['keydown', 'keyup'];

    if (keyTypes.indexOf(e.type) !== -1) {
      // for some key events, ctrl + ?  should not be preventDefault
      // because ctrl + v could be a paste event
      var ctrlWithList = ['v', 'c', 'x'];

      for (var i = 0; i < ctrlWithList.length; i++) {
        if (e.ctrlKey ^ e.metaKey && this.isThisKeyIgnoreCase(e, ctrlWithList[i])) {
          return;
        }
      }
    }

    e.preventDefault();
  },

  /**
   * trigger on the destination sharing video's width or height is changed,
   * so the positionMap should be changed
   */
  subscribeSharingWidthOrHeightChange: function subscribeSharingWidthOrHeightChange() {
    var that = this;
    this.PUBSUB_SHARING_PARAM_INFO_TOKEN = _pubSub.default.on(jsEvent.SHARING_PARAM_INFO_FROM_SOCKET, function (msg, data) {
      log("subscribeSharingWidthOrHeightChange", data.body);
      that.positionMap.dst.w = data.body.logicWidth;
      that.positionMap.dst.h = data.body.logicHeight;
      that.positionMap.src.w = data.body.logicWidth;
      that.positionMap.src.h = data.body.logicHeight;
      that.sendPostionPDU();
    });
  },

  /**
   * Set the width and height of the other share video
   * @param width
   * @param height
   */
  setDstWidthAndHeight: function setDstWidthAndHeight(width, height) {
    if (!width || !height) {
      throw new Error("the value of destination sharing video width/height are not correct");
    }

    this.positionMap.dst.w = width;
    this.positionMap.dst.h = height;
  },

  /**
   * set the width and height of video in web page
   */
  setSrcWidthAndHeight: function setSrcWidthAndHeight(width, height) {
    if (!width || !height) {
      throw new Error("the value of source sharing video width/height are not correct");
    }

    this.positionMap.src.w = width;
    this.positionMap.src.h = height;
  },
  setSrcWidthAndHeightAndSendPDU: function setSrcWidthAndHeightAndSendPDU(width, height) {
    if (!width || !height) {
      throw new Error("the value of source sharing video width/height are not correct");
    }

    if (this.positionMap.src.w !== width && this.positionMap.src.h !== height) {
      this.setSrcWidthAndHeight(width, height);
      this.sendPostionPDU();
    }
  },
  setSrcOffsetXYAndSendPDU: function setSrcOffsetXYAndSendPDU(offsetX, offsetY) {
    offsetX = Math.floor(offsetX);
    offsetY = Math.floor(offsetY);

    if (this.positionMap.canvas.offsetX !== offsetX || this.positionMap.canvas.offsetY !== offsetY) {
      this.setSrcOffsetXY(offsetX, offsetY);
      this.sendPostionPDU();
    }
  },

  /**
   * set the width and height of video in web page
   */
  setSrcScaleWidthAndHeight: function setSrcScaleWidthAndHeight(scaleWidth, scaleHeight) {
    if (!scaleWidth || !scaleHeight) {
      throw new Error("the value of source sharing video scaleWidth/scaleHeight are not correct");
    }

    this.positionMap.src.scaleWidth = scaleWidth;
    this.positionMap.src.scaleHeight = scaleHeight;
  },
  setSrcOffsetXY: function setSrcOffsetXY() {
    var offsetX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var x = Math.floor(offsetX);
    var y = Math.floor(offsetY);

    if (!((0, _isNumber.default)(x) || (0, _isNumber.default)(y))) {
      throw new Error("the value of source offset x or y is not correct");
    }

    this.positionMap.canvas.offsetX = x;
    this.positionMap.canvas.offsetY = y;
  },
  sendPostionPDU: function sendPostionPDU() {
    var buffer = new ArrayBuffer(4 * 9);
    var type = new Uint8Array(buffer);
    var srcView = new DataView(buffer, 4);
    var dstView = new DataView(buffer, 4 * 5);
    type[0] = PDU_TYPE_ENUM.SEND_POSITION_PARAMS;
    srcView.setInt32(0 * 4, this.positionMap.src.x, true);
    srcView.setInt32(1 * 4, this.positionMap.src.y, true);
    srcView.setInt32(2 * 4, this.positionMap.src.w, true);
    srcView.setInt32(3 * 4, this.positionMap.src.h, true);
    dstView.setInt32(0 * 4, this.positionMap.dst.x, true);
    dstView.setInt32(1 * 4, this.positionMap.dst.y, true);
    dstView.setInt32(2 * 4, this.positionMap.dst.w, true);
    dstView.setInt32(3 * 4, this.positionMap.dst.h, true);
    log("send position pdu");

    try {
      this.blobSocket.send(buffer);
    } catch (ex) {}
  },
  unbindEvent: function unbindEvent() {
    var self = this;
    var dom = this.dom;
    dom.removeEventListener("click", self.focus); // Don't try `keypress`.

    dom.removeEventListener('keydown', self.keyMouseEventHandler);
    dom.removeEventListener('keyup', self.keyMouseEventHandler);
    document.removeEventListener('paste', self.pasteOnDocument);
    document.removeEventListener('copy', self.copyOnDocument);
    document.removeEventListener('cut', self.cutOnDocument);
    dom.removeEventListener('contextmenu', self.preventDefault);
    dom.removeEventListener('wheel', self.preventDefault);
    dom.removeEventListener('dblclick', self.preventDefault);
    dom.removeEventListener('keydown', self.preventDefault);
    dom.removeEventListener('keyup', self.preventDefault);
    dom.removeEventListener('dblclick', self.keyMouseEventHandler);
    dom.removeEventListener('mousedown', self.keyMouseEventHandler);
    dom.removeEventListener('mouseup', self.keyMouseEventHandler);
    dom.removeEventListener('mousemove', self.keyMouseEventHandlerThrottle);
    dom.removeEventListener('wheel', self.keyMouseEventHandler);
  },
  bindEvent: function bindEvent() {
    var self = this;
    var dom = this.dom;
    log("dom", dom);
    dom.addEventListener("click", self.focus); // Don't try `keypress`.

    dom.addEventListener('keydown', self.keyMouseEventHandler);
    dom.addEventListener('keyup', self.keyMouseEventHandler);
    document.addEventListener('paste', self.pasteOnDocument);
    document.addEventListener('copy', self.copyOnDocument);
    document.addEventListener('cut', self.cutOnDocument);
    dom.addEventListener('contextmenu', self.preventDefault);
    dom.addEventListener('wheel', self.preventDefault);
    dom.addEventListener('dblclick', self.preventDefault);
    dom.addEventListener('keydown', self.preventDefault);
    dom.addEventListener('keyup', self.preventDefault);
    dom.addEventListener('dblclick', self.keyMouseEventHandler);
    dom.addEventListener('mousedown', self.keyMouseEventHandler);
    dom.addEventListener('mouseup', self.keyMouseEventHandler);
    dom.addEventListener('mousemove', self.keyMouseEventHandlerThrottle);
    dom.addEventListener('wheel', self.keyMouseEventHandler);
  },
  recordCurrentMousePosition: function recordCurrentMousePosition(e) {
    try {
      var map = this.positionMap;
      var x = e.clientX;
      var y = e.clientY;
      (0, _assign.default)(this.currentMousePositionProps, {
        clientX: x,
        clientY: y,
        x2video: x - map.canvas.offsetX,
        y2video: y - map.canvas.offsetY
      });
    } catch (ex) {}
  },
  resolvePosition: function resolvePosition(e) {
    var x = e.clientX;
    var y = e.clientY;
    var map = this.positionMap;
    x = x - map.canvas.offsetX;
    y = y - map.canvas.offsetY;
    x = x * (map.dst.w / map.src.scaleWidth);
    y = y * (map.dst.h / map.src.scaleHeight);
    x = Math.floor(x);
    y = Math.floor(y);
    return {
      x: x,
      y: y
    };
  },

  /**
   *
   * @param {Number} params.pduType
   * @param {Number} params.event_type  - (0 : mouse event, 1:key event)
   * @param {Number} params.input_event_type
   * @param {Number} params.x     - [optional, default=0]
   * @param {Number} params.y     - [optional, default=0]
   * @param {Number} params.dx          - [optional, default=0]
   * @param {Number} params.dy          - [optional, default=0]
   * @param {Boolean} params.shift      - [optional, default=false] modifier
   * @param {Boolean} params.capslock   - [optional, default=false] modifier
   * @param {Boolean} params.ctrl       - [optional, default=false] modifier
   * @param {Boolean} params.alt        - [optional, default=false] modifier
   * @param {Boolean} params.numlock    - [optional, default=false] modifier
   * @param {Boolean} params.super      - [optional, default=false] modifier
   * @param {Number} params.repeat      - [optional, default=0]
   * @param {Number} params.key         - [optional, no default value]
   * @param {Number} params.charCode    - [optional, no default value]
   * @param {Number} params.keyCode     - [optional, no default value]
   * @returns {Promise<void>}
   */
  generateBuffer: function generateBuffer(params) {
    if (params.key !== undefined && !/^[\x00-\x7F]*$/.test(params.key)) {
      throw new Error("params.key must only contain ascii character");
    }

    params = (0, _assign.default)({
      v: 0,
      x: 0,
      y: 0,
      dx: 0,
      dy: 0,
      repeat: 0
    }, params);
    var byteLen = 4 * 2;

    if (params.pduType === PDU_TYPE_ENUM.WHEEL) {
      byteLen += 4;
    }

    var buffer = new ArrayBuffer(byteLen);
    var uint8 = new Uint8Array(buffer);
    var uint16View = new DataView(buffer, 4);
    var int16View = new DataView(buffer, 4);
    uint8[0] = params.pduType;
    uint8[1] = params.input_event_type & 63; // 63 => 0b00111111

    if (params.pduType === PDU_TYPE_ENUM.MOUSE) {
      uint16View.setUint16(0, params.x, true);
      uint16View.setUint16(2, params.y, true);
    } else if (params.pduType === PDU_TYPE_ENUM.WHEEL) {
      int16View.setInt16(0, params.x, true);
      int16View.setInt16(2, params.y, true);
      int16View.setInt16(4, params.dx, true);
      int16View.setInt16(6, params.dy, true);
    } else if (params.pduType === PDU_TYPE_ENUM.KEYBOARD) {
      var keyCodeView = new DataView(buffer, 4);
      var keyValueView = new DataView(buffer, 6);
      var modifierBuffer = new Uint8Array(buffer, 2);
      keyCodeView.setUint16(0, params.keyCode, true);
      keyValueView.setUint16(0, params.charCode, true);
      var modifierMap = {
        'shift': 1,
        'capslock': 2,
        'ctrl': 4,
        'alt': 8,
        'numlock': 16,
        'super': 32
      };
      var modifier = 0;
      (0, _keys.default)(modifierMap).forEach(function (k) {
        if (params[k] === true) {
          modifier += modifierMap[k];
        }
      });
      modifierBuffer[0] = modifier;

      if (params.repeat) {
        uint8[1] = uint8[1] | 32; // 32 => 0b00100000
      }
    }

    return buffer;
  },
  processEvent: function processEvent(params) {
    if (this.blobSocket) {
      this.blobSocketCheckAndSend(this.generateBuffer(params));
    }
  },
  debug: function debug(params) {
    var list = [];
    var obj = {};

    if (params.pduType === PDU_TYPE_ENUM.KEYBOARD) {
      list = ["t", "keyCode", "charCode", "key"];
    } else {
      list = ["t", "x", "y", 'dx', 'dy', 'input_event_type'];
    }

    list.forEach(function (k) {
      obj[k] = params[k];
    });
    log("debug", (0, _stringify.default)(obj));
  },

  /**
   * ctrl+v cannot be sent right now when triggered
   * because the correct step is :
   * 1. sync remote computer's clipboard with paste data
   * 2. then trigger ctrl + v event to remote computer
   * 3. paste event is done.
   * @param e
   * @returns {Promise<Event>}
   */
  blockedPasteKeyboard: function blockedPasteKeyboard(e) {
    var that = this;
    return new _promise.default(function (resolve, reject) {
      if (that.isKeyboardEvent(e) && that.isPasteEvent(e)) {
        that.blockedKeyboardEventOfPaste.push(e);
      } else {
        resolve(e);
      }
    });
  },
  isPasteEvent: function isPasteEvent(e) {
    var isV = this.isThisKeyIgnoreCase(e, 'v');

    if (e.ctrlKey ^ e.metaKey && isV) {
      return true;
    }

    return false;
  },
  isCopyEvent: function isCopyEvent(e) {
    var isC = this.isThisKeyIgnoreCase(e, 'c');

    if (e.ctrlKey ^ e.metaKey && isC) {
      return true;
    } else {
      return false;
    }
  },
  isCutEvent: function isCutEvent(e) {
    var isX = this.isThisKeyIgnoreCase(e, 'x');

    if (e.ctrlKey ^ e.metaKey && isX) {
      return true;
    } else {
      return false;
    }
  },
  returnNewEventByTransformCtrlKeyOrCommandKey: function returnNewEventByTransformCtrlKeyOrCommandKey(e) {
    var params = this.createParamsFromKeyboardEvent(e);

    switch (this.remoteOS) {
      case _CommonEnums.OS_ENUM.WIN:
        (0, _assign.default)(params, {
          ctrlKey: true,
          metaKey: false
        });
        break;

      case _CommonEnums.OS_ENUM.MAC:
        (0, _assign.default)(params, {
          ctrlKey: false,
          metaKey: true
        });
        break;

      case _CommonEnums.OS_ENUM.UNKNOWN:
      default:
        break;
    }

    return new e.constructor(e.type, params);
  },
  transformCtrlCAndCommandC: function transformCtrlCAndCommandC(e) {
    var _this4 = this;

    var that = this;
    return new _promise.default(function (resolve, reject) {
      if (_this4.isKeyboardEvent(e) && (e.ctrlKey || e.metaKey) && that.isThisKeyIgnoreCase(e, 'c')) {
        var params = that.createParamsFromKeyboardEvent(e);
        var newEvent = that.returnNewEventByTransformCtrlKeyOrCommandKey(e);
        resolve(newEvent);
      } else {
        resolve(e);
      }
    });
  },

  /**
   * this method works together with {@link checkAndClearKeydownupMergeRemoveMap}
   * when key is down, it will be added or updated to the MapTable
   * when key is up , it will be removed from the MapTable
   * once detect any key exists more than {@link checkAndClearKeydownupMergeRemoveMap maxSleep} milliseconds,
   * the key will be removed from the MapTable and automatically send a keyup event of that key to websocket
   *
   * Why need this ?
   * For example : you input `alt + tab` on windows
   * the remote control program can only receive a keydown event of `alt` because the combination of `alt + tab` will
   * make Windows System switch to another windows program, this will make webClient miss the keyup event of `alt`
   * but the remote controlled client is waiting for a keyup event of `alt`
   * so later when user switch back to webClient and input `s`, it won't be purely `s`  but `alt + s` on the remote client
   * this can be unpredictable and confusing, so we need following processing
   * @param e
   * @returns {Promise<Event>}
   */
  keyMouseEventHandlerFilter_MatainKeyDownUpMergeMap: function keyMouseEventHandlerFilter_MatainKeyDownUpMergeMap(e) {
    var _this5 = this;

    return new _promise.default(function (resolve, reject) {
      try {
        if (_this5.isKeyboardEvent(e) && e.key) {
          if (e.type === 'keydown' && !e.repeat) {
            _this5.keydownupMergeRemoveMap[e.key] = {
              t: +new Date(),
              e: e
            };
          }
          /**
           * why need this ?
           * For example :
           * when you press `shift` and hold, then keydown event trigger one by one,
           * but later you press another key, the the keydown event of `shift` disappears
           * after a while, webclient will automatically trigger a keyup event of `shift`,
           * this is confusing, casue you are still holding the `shift`.
           */


          if (e.type === 'keydown' && e.repeat) {
            delete _this5.keydownupMergeRemoveMap[e.key];
          }

          if (e.type === 'keyup') {
            delete _this5.keydownupMergeRemoveMap[e.key];
          }
        }
      } catch (ex) {
        log.error(ex);
      }

      resolve(e);
    });
  },
  checkAndClearKeydownupMergeRemoveMap: function checkAndClearKeydownupMergeRemoveMap() {
    var maxSleep = 500; // 500 ms

    var self = this;
    this.checkAndClearKeydownupMergeRemoveMapInterval = setInterval(function () {
      self._checkAndClearKeydownupMergeRemoveMap(maxSleep);
    }, 1000 / 10);
  },

  /**
   * @param sleepMillSeconds if sleepMillSeconds is 0, it means clear all keydown event right now!It might be used on destroy lifecycle
   * @private
   */
  _checkAndClearKeydownupMergeRemoveMap: function _checkAndClearKeydownupMergeRemoveMap(sleepMillSeconds) {
    var _this6 = this;

    var map = this.keydownupMergeRemoveMap;
    (0, _keys.default)(map).forEach(function (k) {
      var item = map[k];

      if (+new Date() - item.t >= sleepMillSeconds) {
        var e = new item.e.constructor('keyup', item.e); // not supported any version of IE

        try {
          _this6._keyMouseEventHandler(e);
        } catch (ex) {}

        delete _this6.keydownupMergeRemoveMap[k];
      }
    });
  },
  uncheckAndClearKeydownupMergeRemoveMap: function uncheckAndClearKeydownupMergeRemoveMap() {
    this._checkAndClearKeydownupMergeRemoveMap(0);

    clearInterval(this.checkAndClearKeydownupMergeRemoveMapInterval);
  },

  /**
   * some filters do something (eg : pre-process, block process ...) before processing specific event
   * @param e
   * @returns {Promise<T>}
   */
  keyMouseFilters: function keyMouseFilters(e) {
    var _this7 = this;

    return new _promise.default(function (resolve, reject) {
      resolve(e);
    }).then(function (e) {
      return _this7.blockedPasteKeyboard(e);
    }).then(function (e) {
      return _this7.blockedSingleMetaKey(e);
    }).then(function (e) {
      return _this7.blockedCopyKeyboard(e);
    }).then(function (e) {
      return _this7.blockedCutKeyboard(e);
    }).then(function (e) {
      return _this7.keyMouseEventHandlerFilter_MatainKeyDownUpMergeMap(e);
    }).then(function (e) {
      return _this7.blockedSomeKeyboardEventNotHaveKeydownBefore(e);
    }).then(function (e) {
      return _this7.keyMouseEventHandlerFilter_EVERY_KEYUP_MUST_HAVE_KEYDOWN_BEFORE(e);
    });
  },

  /**
   * why need this ?
   * think about following scene:
   * ctrl down
   * a suite of keydown/keyup events for paste
   * ctrl up
   *
   * It will be broken if remote OS is MAC, because the suite of events are between ctrl-down and ctrl-up
   * But also :
   * this strategy will disable single ctrl keyboard event
   * @param e
   * @returns {Promise<any>}
   */
  blockedSingleMetaKey: function blockedSingleMetaKey(e) {
    var _this8 = this;

    return new _promise.default(function (resolve, reject) {
      if (_this8.isKeyboardEvent(e) && e.key) {
        if (/command/i.test(e.key) || /meta/i.test(e.key) || /control/i.test(e.key)) {
          if (!e.shiftKey && !e.altKey && e.ctrlKey ^ e.metaKey) {
            return;
          }
        }
      }

      resolve(e);
    });
  },
  blockedCutKeyboard: function blockedCutKeyboard(e) {
    var self = this;
    return new _promise.default(function (resolve, reject) {
      if (self.isKeyboardEvent(e)) {
        if (self.isCutEvent(e)) {
          return;
        }
      }

      resolve(e);
    });
  },
  blockedCopyKeyboard: function blockedCopyKeyboard(e) {
    var self = this;
    return new _promise.default(function (resolve, reject) {
      if (self.isKeyboardEvent(e)) {
        if (self.isCopyEvent(e)) {
          self._blockedCopyKeyboardList.push(e);

          return;
        }
      }

      resolve(e);
    });
  },
  blockedSomeKeyboardEventNotHaveKeydownBefore: function blockedSomeKeyboardEventNotHaveKeydownBefore(e) {
    var _this9 = this;

    return new _promise.default(function (resolve, reject) {
      if (_this9.isKeyboardEvent(e) && e.key) {
        var list = ['x', 'c', 'v'];
        var isInList = false;
        list.forEach(function (k) {
          if (_this9.isThisKeyIgnoreCase(e, k)) {
            isInList = true;
          }
        });

        if (e.type === 'keyup' && isInList) {
          var isKeydownBefore = !!_this9.keyMouseEventHandlerFilter_every_keyup_must_have_keydown_before_Map[e.key];

          if (!isKeydownBefore) {
            return;
          }
        }
      }

      resolve(e);
    });
  },

  /**
   * we assume that every keyup event must have keydown event right before
   * but when we test, on windows 10, Chrome
   * when user press `windows + v`   or `meta + v`
   * sdk cannot detect keydown of `v` , only keyup of `v`
   * it is very annoying and can make unpredictable error
   * @param e
   * @returns {Promise<Event>}
   */
  keyMouseEventHandlerFilter_EVERY_KEYUP_MUST_HAVE_KEYDOWN_BEFORE: function keyMouseEventHandlerFilter_EVERY_KEYUP_MUST_HAVE_KEYDOWN_BEFORE(e) {
    var _this10 = this;

    return new _promise.default(function (resolve, reject) {
      try {
        if (_this10.isKeyboardEvent(e) && e.key) {
          if (e.type === 'keydown') {
            _this10.keyMouseEventHandlerFilter_every_keyup_must_have_keydown_before_Map[e.key] = e;
          }

          if (e.type === 'keyup') {
            var isKeydownBefore = !!_this10.keyMouseEventHandlerFilter_every_keyup_must_have_keydown_before_Map[e.key];
            delete _this10.keyMouseEventHandlerFilter_every_keyup_must_have_keydown_before_Map[e.key];
            var whiteList = ['meta']; //'c', 'x', 'v'

            var isInWhiteList = false;
            whiteList.forEach(function (k) {
              if (_this10.isThisKeyIgnoreCase(e, k)) {
                isInWhiteList = true;
              }
            });

            if (!isKeydownBefore && !isInWhiteList) {
              log.warn("keyup trigger, but no keydown before");
              var newEvent = new e.constructor('keydown', e); // not supported any version of IE

              _this10._keyMouseEventHandler(newEvent);
            }
          }
        }
      } catch (ex) {
        log.error(ex);
      }

      resolve(e);
    });
  },
  _keyMouseEventHandler: function _keyMouseEventHandler(e) {
    if (this.isKeyboardEvent(e)) {
      log("_keyMouseEventHandler keyboard", e);
    }

    var obj = {};
    var keyboardEvents = ['keydown', 'keyup'];
    var mouseEvents = ['mousedown', 'mouseup', 'mousemove', 'wheel', 'click', 'dblclick', 'contextmenu'];
    var inputKeyTypeMap = {
      keydown: 0,
      keyup: 1,
      keychar: 2
    };
    var inputMouseTypeMap = {
      mousemove: 0,
      mousedown: {
        left: 1,
        right: 4,
        middle: 7
      },
      mouseup: {
        left: 2,
        right: 5,
        middle: 8
      },
      mouseleftdbldown: 3,
      mouserightdbldown: 6,
      // mousemiddledbldown : 0x19,
      wheel: 10
    };
    var getModifierState = e.getModifierState ? function (keyArg) {
      return e.getModifierState(keyArg);
    } : function (keyArg, defaultValue) {
      return defaultValue;
    };
    var pduType = PDU_TYPE_ENUM.UNKNOWN;
    var isExistCharCode = e.key && e.key.length === 1;

    if (keyboardEvents.indexOf(e.type) !== -1) {
      obj.event_type = 1;
      pduType = PDU_TYPE_ENUM.KEYBOARD;
      inputKeyTypeMap[e.type] !== undefined && (obj.input_event_type = inputKeyTypeMap[e.type]);
    } else if (mouseEvents.indexOf(e.type) !== -1) {
      obj.event_type = 0;
      this.recordCurrentMousePosition(e);
      var resolvePositon = this.resolvePosition(e);
      (0, _assign.default)(obj, {
        x: resolvePositon.x,
        y: resolvePositon.y
      });
      pduType = e.type === 'wheel' ? PDU_TYPE_ENUM.WHEEL : PDU_TYPE_ENUM.MOUSE;
      inputMouseTypeMap[e.type] !== undefined && (obj.input_event_type = inputMouseTypeMap[e.type]);

      if (['mousedown', 'mouseup'].indexOf(e.type) !== -1) {
        var direction;

        switch (e.button) {
          case 0:
            direction = 'left';
            break;

          case 1:
            direction = 'middle';
            break;

          case 2:
            direction = 'right';
            break;

          default:
            direction = 'left';
            break;
        }

        obj.input_event_type = inputMouseTypeMap[e.type][direction];
      }

      if (['dblclick'].indexOf(e.type) !== -1) {
        obj.input_event_type = inputMouseTypeMap.mouseleftdbldown;
      }
    } else {
      log.warn("the event type cannot be handled");
      return;
    }

    if (e.type === 'wheel') {
      var map = {
        deltaX: 'dx',
        deltaY: 'dy'
      };
      (0, _keys.default)(map).forEach(function (k) {
        if (e[k]) {
          obj[map[k]] = e[k] > 0 ? -100 : 100;
        }
      });
    }

    (0, _assign.default)(obj, {
      t: e.type,
      pduType: pduType,
      keyCode: e.keyCode,
      charCode: isExistCharCode ? e.key.charCodeAt(0) : 0,
      key: e.key,
      repeat: e.repeat,
      //  Edge not supported
      ctrl: e.ctrlKey,
      alt: e.altKey,
      super: e.metaKey,
      shift: e.shiftKey,
      capslock: getModifierState('CapsLock', false),
      numlock: getModifierState('NumLock', false) // safari not supported getModifierState

    });

    if (this.isKeyboardEvent(e)) {
      log("processEvent", (0, _stringify.default)(obj));
    }

    this.processEvent(obj);

    if (e.type === 'keydown') {
      // status 'keychar' means 'an instantaneous state'
      var objClone = (0, _assign.default)({}, obj, {
        input_event_type: inputKeyTypeMap.keychar
      });
      this.processEvent(objClone);
    }
  },
  isCapslock: function isCapslock(e) {
    var charCode = e.keyCode;
    var key = e.key;
    var shifton = e.shiftKey;

    if (!/[a-zA-Z]/.test(key)) {
      return false;
    }

    return key.charCodeAt(0) !== charCode ? !shifton : shifton;
  },
  stop: function () {
    var _stop = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5() {
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              this.blobSocket && this.blobSocket.close();
              this.blobSocket = null;

            case 2:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    return function stop() {
      return _stop.apply(this, arguments);
    };
  }(),
  connectSocket: function () {
    var _connectSocket = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee6() {
      var blobSocket;
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return this.createBlobSocket("".concat(this.socketURL, "/wc/media/").concat(this.meetingID, "?type=r&mode=2&cid=").concat(this.condID));

            case 2:
              blobSocket = _context6.sent;
              blobSocket.binaryType = 'blob';
              this.blobSocket = blobSocket;
              return _context6.abrupt("return", true);

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    return function connectSocket() {
      return _connectSocket.apply(this, arguments);
    };
  }(),
  socketBlobMessageHandler: function socketBlobMessageHandler() {
    if (this.blobSocket) {
      var self = this;
      this.blobSocket.addEventListener("message",
      /*#__PURE__*/
      function () {
        var _ref2 = (0, _asyncToGenerator2.default)(
        /*#__PURE__*/
        _regenerator.default.mark(function _callee7(mes) {
          var blob, buffer, int8arr, firstByte, blobSlice, content, len;
          return _regenerator.default.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  blob = mes.data;
                  _context7.next = 3;
                  return _util.default.readBlobAsBuffer(blob, blob.size);

                case 3:
                  buffer = _context7.sent;
                  int8arr = new Int8Array(buffer);
                  firstByte = int8arr[0];

                  if (!(firstByte === PDU_TYPE_ENUM.COPY_TEXT_FROM_RWG)) {
                    _context7.next = 14;
                    break;
                  }

                  blobSlice = blob.slice(8);
                  _context7.next = 10;
                  return _util.default.readBlob(blobSlice);

                case 10:
                  content = _context7.sent;
                  len = int8arr[4];
                  log("COPY_TEXT_FROM_RWG", content, len);
                  self.triggerReturnCopiedText({
                    data: content,
                    x: self.currentMousePositionProps.x2video,
                    y: self.currentMousePositionProps.y2video
                  });

                case 14:
                  if (firstByte === PDU_TYPE_ENUM.KEEP_ALIVE) {
                    self.blobSocket.send(buffer);
                  }

                case 15:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        return function (_x6) {
          return _ref2.apply(this, arguments);
        };
      }());
    }
  },
  destroySocket: function destroySocket() {
    try {
      this.blobSocket.close();
      this.blobSocket = null;
    } catch (ex) {
      log("destroySocket", ex);
    }
  },
  createBlobSocket: function createBlobSocket(url) {
    return new _promise.default(function (resolve, reject) {
      var socket = new WebSocket(url);
      socket.addEventListener("open", function () {});
      socket.addEventListener('message', function (evt) {
        try {
          var json = JSON.parse(evt.data);

          if (json.evt === 0 && json.body) {
            resolve(socket);
          }
        } catch (ex) {}
      });
      socket.addEventListener("error", function (ex) {
        reject(ex);
      });
      socket.addEventListener("close", function () {
        reject(new Error("socket close"));
      });
    });
  },
  setRemoteOS: function setRemoteOS(os) {
    if (os !== undefined) {
      this.remoteOS = os;
    }
  }
};
var _default = RemoteControl;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/inside/Sharing.js":
/*!*******************************!*\
  !*** ./src/inside/Sharing.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sharing = exports.SHARING_INIT_EVENT = exports.SharingInit = void 0;

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _MediaInit2 = _interopRequireDefault(__webpack_require__(/*! ./MediaInit */ "./src/inside/MediaInit.js"));

var _pubSub = _interopRequireDefault(__webpack_require__(/*! ../common/pubSub */ "./src/common/pubSub.js"));

var SHARING_INIT_EVENT = {
  SHARING_DECODE_SUCCESS: "SHARING_DECODE_INIT_SUCCESS",
  SHARING_DECODE_FAILED: "SHARING_DECODE__INIT_FAILED",
  SHARING_ENCODE_SUCCESS: "SHARING_ENCODE_INIT_SUCCESS",
  SHARING_ENCODE_FAILED: "SHARING_ENCODE__INIT_FAILED"
};
exports.SHARING_INIT_EVENT = SHARING_INIT_EVENT;

var SharingInit =
/*#__PURE__*/
function (_MediaInit) {
  (0, _inherits2.default)(SharingInit, _MediaInit);

  function SharingInit() {
    (0, _classCallCheck2.default)(this, SharingInit);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(SharingInit).call(this));
  }

  (0, _createClass2.default)(SharingInit, null, [{
    key: "publishSharingDecodeSuccessEvent",
    value: function publishSharingDecodeSuccessEvent() {
      _pubSub.default.triggerSync(SHARING_INIT_EVENT.SHARING_DECODE_SUCCESS);
    }
  }, {
    key: "publishSharingDecodeFailedEvent",
    value: function publishSharingDecodeFailedEvent() {
      _pubSub.default.triggerSync(SHARING_INIT_EVENT.SHARING_DECODE_FAILED);
    }
  }, {
    key: "publishSharingEncodeSuccessEvent",
    value: function publishSharingEncodeSuccessEvent() {
      _pubSub.default.triggerSync(SHARING_INIT_EVENT.SHARING_ENCODE_SUCCESS);
    }
  }, {
    key: "publishSharingEncodeFailedEvent",
    value: function publishSharingEncodeFailedEvent() {
      _pubSub.default.triggerSync(SHARING_INIT_EVENT.SHARING_ENCODE_FAILED);
    }
  }]);
  return SharingInit;
}(_MediaInit2.default);

exports.SharingInit = SharingInit;

var Sharing =
/*#__PURE__*/
function () {
  function Sharing() {
    (0, _classCallCheck2.default)(this, Sharing);
  }

  (0, _createClass2.default)(Sharing, null, [{
    key: "onSharingDecodeSuccess",
    value: function onSharingDecodeSuccess() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(SHARING_INIT_EVENT.SHARING_DECODE_SUCCESS, function () {
          resolve(true);
        });
      });
    }
  }, {
    key: "waitSharingDecodeResult",
    value: function waitSharingDecodeResult() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(SHARING_INIT_EVENT.SHARING_DECODE_SUCCESS, function () {
          resolve(true);
        });

        _pubSub.default.on(SHARING_INIT_EVENT.SHARING_DECODE_FAILED, function () {
          resolve(false);
        });
      });
    }
  }, {
    key: "waitSharingEncodeResult",
    value: function waitSharingEncodeResult() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(SHARING_INIT_EVENT.SHARING_ENCODE_SUCCESS, function () {
          resolve(true);
        });

        _pubSub.default.on(SHARING_INIT_EVENT.SHARING_ENCODE_FAILED, function () {
          resolve(false);
        });
      });
    }
  }]);
  return Sharing;
}();

exports.Sharing = Sharing;

/***/ }),

/***/ "./src/inside/Video.js":
/*!*****************************!*\
  !*** ./src/inside/Video.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Video = exports.VIDEO_EVENT = exports.VideoInit = void 0;

var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"));

var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/getPrototypeOf.js"));

var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/inherits.js"));

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js"));

var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js"));

var _pubSub = _interopRequireDefault(__webpack_require__(/*! ../common/pubSub */ "./src/common/pubSub.js"));

var _MediaInit2 = _interopRequireDefault(__webpack_require__(/*! ./MediaInit */ "./src/inside/MediaInit.js"));

var VIDEO_EVENT = {
  VIDEO_ENCODE_INIT_SUCCESS: "VIDEO_ENCODE_INIT_SUCCESS",
  VIDEO_DECODE_INIT_SUCCESS: "VIDEO_DECODE_INIT_SUCCESS",
  VIDEO_ENCODE_INIT_FAILED: "VIDEO_ENCODE_INIT_FAILED",
  VIDEO_DECODE_INIT_FAILED: "VIDEO_DECODE_INIT_FAILED"
};
exports.VIDEO_EVENT = VIDEO_EVENT;

var Video =
/*#__PURE__*/
function () {
  function Video() {
    (0, _classCallCheck2.default)(this, Video);
  }

  (0, _createClass2.default)(Video, null, [{
    key: "onVideoEncodeInitSuccess",
    value: function onVideoEncodeInitSuccess() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(VIDEO_EVENT.VIDEO_ENCODE_INIT_SUCCESS, function () {
          return resolve(true);
        });
      });
    }
  }, {
    key: "onVideoDecodeInitSuccess",
    value: function onVideoDecodeInitSuccess() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(VIDEO_EVENT.VIDEO_DECODE_INIT_SUCCESS, function () {
          return resolve(true);
        });
      });
    }
  }, {
    key: "waitVideoEncodeInitResult",
    value: function waitVideoEncodeInitResult() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(VIDEO_EVENT.VIDEO_ENCODE_INIT_SUCCESS, function () {
          return resolve(true);
        });

        _pubSub.default.on(VIDEO_EVENT.VIDEO_ENCODE_INIT_FAILED, function () {
          return resolve(false);
        });
      });
    }
  }, {
    key: "waitVideoDecodeInitResult",
    value: function waitVideoDecodeInitResult() {
      return new _promise.default(function (resolve, reject) {
        _pubSub.default.on(VIDEO_EVENT.VIDEO_DECODE_INIT_SUCCESS, function () {
          return resolve(true);
        });

        _pubSub.default.on(VIDEO_EVENT.VIDEO_DECODE_INIT_FAILED, function () {
          return resolve(false);
        });
      });
    }
    /**
     * both encode and decode
     */

  }, {
    key: "onVideoSuccess",
    value: function onVideoSuccess() {
      return _promise.default.all([Video.onVideoEncodeInitSuccess(), Video.onVideoDecodeInitSuccess()]);
    }
  }]);
  return Video;
}();

exports.Video = Video;

var VideoInit =
/*#__PURE__*/
function (_MediaInit) {
  (0, _inherits2.default)(VideoInit, _MediaInit);

  function VideoInit() {
    (0, _classCallCheck2.default)(this, VideoInit);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(VideoInit).call(this));
  }

  (0, _createClass2.default)(VideoInit, null, [{
    key: "publishEncodeInitSuccessEvent",
    value: function publishEncodeInitSuccessEvent() {
      _pubSub.default.publishSync(VIDEO_EVENT.VIDEO_ENCODE_INIT_SUCCESS);
    }
  }, {
    key: "publishDecodeInitSuccessEvent",
    value: function publishDecodeInitSuccessEvent() {
      _pubSub.default.publishSync(VIDEO_EVENT.VIDEO_DECODE_INIT_SUCCESS);
    }
  }, {
    key: "publishEncodeInitFAILEDEvent",
    value: function publishEncodeInitFAILEDEvent() {
      _pubSub.default.publishSync(VIDEO_EVENT.VIDEO_ENCODE_INIT_FAILED);
    }
  }, {
    key: "publishDecodeInitFAILEDEvent",
    value: function publishDecodeInitFAILEDEvent() {
      _pubSub.default.publishSync(VIDEO_EVENT.VIDEO_DECODE_INIT_FAILED);
    }
  }]);
  return VideoInit;
}(_MediaInit2.default);

exports.VideoInit = VideoInit;

/***/ }),

/***/ "./src/inside/ZoomRTC.js":
/*!*******************************!*\
  !*** ./src/inside/ZoomRTC.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _util = _interopRequireDefault(__webpack_require__(/*! ../common/util */ "./src/common/util.js"));

var ZoomRTC = {};
ZoomRTC.screen = {
  chromeMediaSource: 'desktop',
  screenCallback: null,
  getSourceId: function getSourceId(callback) {
    ZoomRTC.screenCallback = callback;
    window.postMessage('WCL.getSourceID', '*');
  },
  onMessageCallback: function onMessageCallback(data) {
    // "cancel" button is clicked
    if (data.type == 'WCL.PermissionDeniedError') {
      if (ZoomRTC.screenCallback) return ZoomRTC.screenCallback('WCL.PermissionDeniedError');
    }

    if (data.type == 'WCL.userCancel') {
      ZoomRTC.screenCallback("WCL.userCancel");
    } // extension shared temp sourceId


    if (data.sourceId) {
      ZoomRTC.screen.sourceId = data.sourceId;

      if (ZoomRTC.screenCallback) {
        ZoomRTC.screenCallback("WCL.PermisssionOK", ZoomRTC.screen.sourceId);
      }
    }
  },
  getChromeExtensionStatus: function getChromeExtensionStatus(callback) {
    var extensionid = 'kgjfgplpablkjnlkjmjdecgdpfankdle';
    var image = document.createElement('img');
    image.src = 'chrome-extension://' + extensionid + '/images/trash.png';

    image.onload = function () {
      callback('installed-enabled');
    };

    image.onerror = function () {
      callback('not-installed');
    };
  }
};
window.addEventListener('message', function (event) {
  if (!event.data || !(typeof event.data == 'string' || event.data.sourceId || event.data.captureSourceId || event.data.getChromeExtensionStatus || event.data.type)) return; // if (event.data.getChromeExtensionStatus) {
  //     ZoomRTC.screen.getChromeExtensionStatus(function (status) {
  //         window.postMessage({
  //             chromeExtensionStatus: status
  //         }, '*');
  //     });
  //     return;
  // }

  if (event.data.captureSourceId) {
    // window.postMessage('getDesktopCapturePermission', '*');
    captureSourceId();
  }

  ZoomRTC.screen.onMessageCallback(event.data);
});

function captureSourceId() {
  // check if desktop-capture extension installed.
  ZoomRTC.screen.getChromeExtensionStatus(function (status) {
    if (status != 'installed-enabled') {
      window.postMessage({
        typ: "WCL.extensionUninstalled"
      }, '*');
      return;
    }

    ZoomRTC.screen.getSourceId(function (type, sourceId) {
      window.postMessage({
        typ: type,
        chromeMediaSourceId: sourceId
      }, '*');
    });
  });
}

(function () {
  window.getScreenId = function (callback, custom_parameter) {
    if (_util.default.browser.isFirefox) {
      callback(null, 'firefox', {
        video: {
          mediaSource: "screen"
        }
      });
      return;
    }

    window.addEventListener('message', onExtensionCallback);

    function onExtensionCallback(event) {
      if (!event.data) return;

      if (event.data.typ) {
        if (event.data.typ === 'WCL.PermissionDeniedError' || event.data.typ == "WCL.extensionUninstalled" || event.data.typ == "WCL.userCancel") {
          callback(event.data.typ);
        } else if (event.data.typ == "WCL.PermisssionOK") {
          callback(null, event.data.chromeMediaSourceId, getScreenParams(null, event.data.chromeMediaSourceId));
        }

        window.removeEventListener('message', onExtensionCallback);
      }
    }

    postGetSourceIdMessage();
  };

  function getScreenParams(error, sourceId) {
    var screen_Params = {
      audio: false,
      video: {
        mandatory: {
          chromeMediaSource: error ? 'screen' : 'desktop',
          maxWidth: window.screen.width > 1920 ? window.screen.width : 1920,
          maxHeight: window.screen.height > 1080 ? window.screen.height : 1080
        },
        optional: []
      }
    };

    if (sourceId) {
      screen_Params.video.mandatory.chromeMediaSourceId = sourceId; //desktop audio

      if (screen_Params.audio && screen_Params.audio.mandatory) {
        screen_Params.audio.mandatory.chromeMediaSourceId = sourceId;
      }
    }

    return screen_Params;
  }

  function postGetSourceIdMessage() {
    window.postMessage({
      captureSourceId: true
    }, '*');
  }
})();

/***/ }),

/***/ "./src/lib/JsMediaEngine.js":
/*!**********************************!*\
  !*** ./src/lib/JsMediaEngine.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setUserNodeListToWorker = setUserNodeListToWorker;
exports.UpdateAudioPlayStatus = UpdateAudioPlayStatus;
exports.UpdateVideoPlayStatus = UpdateVideoPlayStatus;
exports.UpdateSharingPlayStatus = UpdateSharingPlayStatus;
exports.ClearSharingBuffer = ClearSharingBuffer;
exports.SetLocalAudioPara = SetLocalAudioPara;
exports.JsVideoEngine_PreInit = JsVideoEngine_PreInit;
exports.initVideoEncode = initVideoEncode;
exports.initVideoDecode = initVideoDecode;
exports.initAudioEncode = initAudioEncode;
exports.initAudioDecode = initAudioDecode;
exports.initSharingDecode = initSharingDecode;
exports.initSharingEncode = initSharingEncode;
exports.SetTotalEvent = SetTotalEvent;
exports.JsSharingEngine_PreInit = JsSharingEngine_PreInit;
exports.Sharing_Decode_Post_message = Sharing_Decode_Post_message;
exports.Sharing_Encode_Post_message = Sharing_Encode_Post_message;
exports.JsAudioEngine_PreInit = JsAudioEngine_PreInit;
exports.JsSharingEngine_Init = JsSharingEngine_Init;
exports.setSharingEngineInitProperties = setSharingEngineInitProperties;
exports.JsAudioEngine_Init = JsAudioEngine_Init;
exports.setAudioEngineInitProperties = setAudioEngineInitProperties;
exports.setVideoEngineInitProperties = setVideoEngineInitProperties;
exports.JsAudioEngine_UnInit = JsAudioEngine_UnInit;
exports.JsVideoEngine_UnInit = JsVideoEngine_UnInit;
exports.JsSharingEngine_UnInit = JsSharingEngine_UnInit;
exports.Uint8ToString = Uint8ToString;
exports.Audio_Encode_Frame = Audio_Encode_Frame;
exports.Video_Encode_Frame = Video_Encode_Frame;
exports.Sharing_Encode_Frame = Sharing_Encode_Frame;
exports.Clear_Decoded_Sharing_Frame = Clear_Decoded_Sharing_Frame;
exports.Get_Decoded_Audio_Buffer_Length = Get_Decoded_Audio_Buffer_Length;
exports.Get_Decoded_Audio_Frame = Get_Decoded_Audio_Frame;
exports.Add_Video_Decode_Thread = Add_Video_Decode_Thread;
exports.Clear_Audio_Interval = Clear_Audio_Interval;
exports.Add_Audio_Decode_Thread = Add_Audio_Decode_Thread;
exports.Get_SSRC_Latest_Time = Get_SSRC_Latest_Time;
exports.Get_Video_SSRC_Latest_Time = Get_Video_SSRC_Latest_Time;
exports.Meeting_Fail_Over = Meeting_Fail_Over;
exports.Modify_Audio_SampleRate = Modify_Audio_SampleRate;
exports.Notify_Audio_Thread_Status = Notify_Audio_Thread_Status;
exports.Notify_Audio_Thread_Msg_Channel = Notify_Audio_Thread_Msg_Channel;
exports.Notify_Audio_Thread_Msg_Channel2 = Notify_Audio_Thread_Msg_Channel2;
exports.Notify_Audio_Video_Thread_Msg_Channel = Notify_Audio_Video_Thread_Msg_Channel;
exports.Notify_Video_Encode_Thread = Notify_Video_Encode_Thread;
exports.Notify_Video_Decode_Thread = Notify_Video_Decode_Thread;
exports.Notify_Sharing_Decode_Thread = Notify_Sharing_Decode_Thread;
exports.Notify_Audio_Thread_CurrentSSRC = Notify_Audio_Thread_CurrentSSRC;
exports.Notify_Audio_Encode_Thread = Notify_Audio_Encode_Thread;
exports.Reset_Aec = Reset_Aec;
exports.Set_Aec_Delay = Set_Aec_Delay;
exports.Start_Monitor = Start_Monitor;
exports.Send_Render_Monitor_Log = Send_Render_Monitor_Log;
exports.Stop_Monitor = Stop_Monitor;
exports.Update_Video_Encrpt = Update_Video_Encrpt;
exports.Update_Sharing_Encrpt = Update_Sharing_Encrpt;
exports.Update_Sharing_Encode_Status = Update_Sharing_Encode_Status;
exports.Notify_Sharing_Encode_Thread = Notify_Sharing_Encode_Thread;
exports.Update_Audio_Encrpt = Update_Audio_Encrpt;
exports.disableSocketReconnect = disableSocketReconnect;
exports.destroyAllWorkers = destroyAllWorkers;
exports.pushMessageToWorker = pushMessageToWorker;
exports.isVideoEncodeHandleReady = isVideoEncodeHandleReady;
exports.transportOfflineCanvas = transportOfflineCanvas;
exports.transportImageBitMap = transportImageBitMap;

var _map = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/map */ "./node_modules/@babel/runtime/core-js/map.js"));

var _assign = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/object/assign */ "./node_modules/@babel/runtime/core-js/object/assign.js"));

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var jsEvent = _interopRequireWildcard(__webpack_require__(/*! ../common/jsEvent */ "./src/common/jsEvent.js"));

var jsMediaBuffer = _interopRequireWildcard(__webpack_require__(/*! ../inside/JsMediaBuffer */ "./src/inside/JsMediaBuffer.js"));

var _util = _interopRequireDefault(__webpack_require__(/*! ../common/util */ "./src/common/util.js"));

var _state = __webpack_require__(/*! ../common/state */ "./src/common/state.js");

var _log = _interopRequireDefault(__webpack_require__(/*! ../common/log */ "./src/common/log.js"));

var _Video = __webpack_require__(/*! ../inside/Video */ "./src/inside/Video.js");

var _AudioService = __webpack_require__(/*! ../inside/AudioService */ "./src/inside/AudioService.js");

var _Sharing = __webpack_require__(/*! ../inside/Sharing */ "./src/inside/Sharing.js");

var _once = _interopRequireDefault(__webpack_require__(/*! lodash/once */ "./node_modules/lodash/once.js"));

var _pubSub = _interopRequireDefault(__webpack_require__(/*! ../common/pubSub */ "./src/common/pubSub.js"));

var _Monitor = _interopRequireDefault(__webpack_require__(/*! ../inside/Monitor */ "./src/inside/Monitor.js"));

var _CommonEnums = __webpack_require__(/*! ../common/enums/CommonEnums */ "./src/common/enums/CommonEnums.js");

var _lock_es = __webpack_require__(/*! ../common/lock_es6 */ "./src/common/lock_es6.js");

var _JsMediaEngine_Variables = _interopRequireDefault(__webpack_require__(/*! ../inside/JsMediaEngine_Variables */ "./src/inside/JsMediaEngine_Variables.js"));

var log = (0, _log.default)("sdk.engine");

function XHRWorker(_x, _x2, _x3, _x4, _x5) {
  return _XHRWorker.apply(this, arguments);
}
/**
 * @param url
 * @returns {Promise<String>}
 */


function _XHRWorker() {
  _XHRWorker = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee2(workerParameters, ready, scope, workerType, sdkInstance) {
    var responseText, data, options, worker;
    return _regenerator.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.t0 = workerType;
            _context2.next = _context2.t0 === _CommonEnums.WORKER_TYPE.VIDEO_ENCODE ? 3 : _context2.t0 === _CommonEnums.WORKER_TYPE.VIDEO_DECODE ? 5 : _context2.t0 === _CommonEnums.WORKER_TYPE.AUDIO_ENCODE ? 7 : _context2.t0 === _CommonEnums.WORKER_TYPE.AUDIO_DECODE ? 9 : _context2.t0 === _CommonEnums.WORKER_TYPE.SHARING_DECODE ? 11 : _context2.t0 === _CommonEnums.WORKER_TYPE.SHARING_ENCODE ? 13 : 15;
            break;

          case 3:
            responseText = _JsMediaEngine_Variables.default.videoEncResponseText;
            return _context2.abrupt("break", 15);

          case 5:
            responseText = _JsMediaEngine_Variables.default.videoDecResponseText;
            return _context2.abrupt("break", 15);

          case 7:
            responseText = _JsMediaEngine_Variables.default.audioEncodeResponse;
            return _context2.abrupt("break", 15);

          case 9:
            responseText = _JsMediaEngine_Variables.default.audioDecodeResponse;
            return _context2.abrupt("break", 15);

          case 11:
            responseText = _JsMediaEngine_Variables.default.sharingDecodeResponse;
            return _context2.abrupt("break", 15);

          case 13:
            responseText = _JsMediaEngine_Variables.default.sharingEncodeResponse;
            return _context2.abrupt("break", 15);

          case 15:
            if (responseText) {
              _context2.next = 19;
              break;
            }

            _context2.next = 18;
            return download(workerParameters.workerJsFileUrl);

          case 18:
            responseText = _context2.sent;

          case 19:
            if (!(sdkInstance && sdkInstance.isDestroy)) {
              _context2.next = 21;
              break;
            }

            return _context2.abrupt("return", log("WorkerType:".concat(workerType, ";The relative SDK instance is destroy, don't start relative worker, avoid multiple same workers. ")));

          case 21:
            data = "wasmUrl = " + "'" + workerParameters.workerWasmFileUrl + "';" + responseText;
            /**
             * worker support name for debug
             * https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker
             */

            options = {};

            if (_CommonEnums.workerStartTypeToDevToolWorkerNameEnum[workerType]) {
              (0, _assign.default)(options, {
                name: _CommonEnums.workerStartTypeToDevToolWorkerNameEnum[workerType]
              });
            }

            worker = new Worker(window.URL.createObjectURL(new Blob([data])), options);

            if (ready) {
              ready.call(scope, worker);
            }

          case 26:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));
  return _XHRWorker.apply(this, arguments);
}

function download(url) {
  return _util.default.download(url);
}
/**
 *
 * @param workerType {WORKER_TYPE}
 * @constructor
 */


function WorkerStart(workerParameters, mgr, listener, workerType, sdkInstance) {
  XHRWorker(workerParameters, function (worker) {
    var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

    if (mgr) {
      mgr.Add(ssrc, worker);
    }

    worker.onmessage = function (e) {
      listener(e);
      allWorkersListener(workerType, e);
    };
  }, this, workerType, sdkInstance);
}
/**
 *
 * @param workerType {WORKER_TYPE}
 */


function allWorkersListener(workerType, e) {
  var message = e.data;
  [allWorkersListener_AES_IV].forEach(function (fn) {
    try {
      fn.call(null, workerType, message);
    } catch (e) {
      log.error(e);
    }
  });
}
/**
 *
 * @param workerType {WORKER_TYPE}
 */


function allWorkersListener_AES_IV(workerType, message) {
  var workerTypeList = [_CommonEnums.WORKER_TYPE.AUDIO_ENCODE, _CommonEnums.WORKER_TYPE.VIDEO_ENCODE, _CommonEnums.WORKER_TYPE.SHARING_ENCODE];

  if (workerTypeList.indexOf(workerType) !== -1 && message.status === jsEvent.AES_GCM_IV_CALLBACK_FROM_WASM) {
    log("allWorkersListener_AES_IV", workerType, message); // if modify {@link util.buffer2stringSplitByComma),
    // must also modify {@link util.stringSplitByComma2Buffer}

    _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.AES_GCM_IV_RESPONSE, {
      workerType: workerType,
      iv: _util.default.buffer2stringSplitByComma(message.data)
    });
  }
}

function setUserNodeListToWorker(userNodeList) {
  var oldList = _JsMediaEngine_Variables.default.userNodeList || [];
  var sourceList = userNodeList.concat(oldList);
  _JsMediaEngine_Variables.default.userNodeList = _util.default.removeDuplicates(sourceList, function (a, b) {
    return a.userid !== b.userid;
  });
  var workerTypeList = [_CommonEnums.WORKER_TYPE.AUDIO_ENCODE, _CommonEnums.WORKER_TYPE.AUDIO_DECODE, _CommonEnums.WORKER_TYPE.VIDEO_ENCODE, _CommonEnums.WORKER_TYPE.VIDEO_DECODE, _CommonEnums.WORKER_TYPE.SHARING_ENCODE, _CommonEnums.WORKER_TYPE.SHARING_DECODE];
  workerTypeList.forEach(
  /*#__PURE__*/
  function () {
    var _ref = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(workerType) {
      var mediaInitIns;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.t0 = workerType;
              _context.next = _context.t0 === _CommonEnums.WORKER_TYPE.AUDIO_ENCODE ? 3 : _context.t0 === _CommonEnums.WORKER_TYPE.AUDIO_DECODE ? 5 : _context.t0 === _CommonEnums.WORKER_TYPE.VIDEO_ENCODE ? 7 : _context.t0 === _CommonEnums.WORKER_TYPE.VIDEO_DECODE ? 9 : _context.t0 === _CommonEnums.WORKER_TYPE.SHARING_ENCODE ? 11 : _context.t0 === _CommonEnums.WORKER_TYPE.SHARING_DECODE ? 13 : 15;
              break;

            case 3:
              mediaInitIns = _JsMediaEngine_Variables.default.audioEncodeInitInstance;
              return _context.abrupt("break", 15);

            case 5:
              mediaInitIns = _JsMediaEngine_Variables.default.audioDecInitInstance;
              return _context.abrupt("break", 15);

            case 7:
              mediaInitIns = _JsMediaEngine_Variables.default.videoInitInstance;
              return _context.abrupt("break", 15);

            case 9:
              mediaInitIns = _JsMediaEngine_Variables.default.videoDecInitInstance;
              return _context.abrupt("break", 15);

            case 11:
              mediaInitIns = _JsMediaEngine_Variables.default.sharingEncInitInstance;
              return _context.abrupt("break", 15);

            case 13:
              mediaInitIns = _JsMediaEngine_Variables.default.sharingDecInitInstance;
              return _context.abrupt("break", 15);

            case 15:
              _context.prev = 15;
              _context.next = 18;
              return mediaInitIns.waitforInitSuccess();

            case 18:
              log("setUserNodeListToWorker init success", workerType);
              pushMessageToWorker(workerType, {
                userNodeList: _JsMediaEngine_Variables.default.userNodeList
              }, _CommonEnums.MAIN_WORKER_COMMAND.SET_USER_NODE_LIST, false, true);
              _context.next = 25;
              break;

            case 22:
              _context.prev = 22;
              _context.t1 = _context["catch"](15);
              log(_context.t1);

            case 25:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[15, 22]]);
    }));

    return function (_x6) {
      return _ref.apply(this, arguments);
    };
  }());
}

function UpdateAudioPlayStatus(status) {
  _JsMediaEngine_Variables.default.isAudioPlayWork = status;
}

function UpdateVideoPlayStatus(status) {
  _JsMediaEngine_Variables.default.isVideoPlayWork = status;
}

function UpdateSharingPlayStatus(status) {
  _JsMediaEngine_Variables.default.isSharingPlayWork = status;
}

function ClearSharingBuffer() {
  if (_JsMediaEngine_Variables.default.localSharingDecMGR) {
    _JsMediaEngine_Variables.default.localSharingDecMGR.ClearBuffer();
  }
}

function Float32Concat(first, second) {
  var firstLength = 0;

  if (first !== null) {
    firstLength = first.length;
    var result = new Float32Array(firstLength + second.length);
    result.set(first);
    result.set(second, firstLength);
    return result;
  }

  return second;
}

function SetLocalAudioPara(para) {
  _JsMediaEngine_Variables.default.localAudioPara = para;
}

function SetLocalVideoPara(para) {
  _JsMediaEngine_Variables.default.localVideoPara = para;
}

function JsVideoEngine_PreInit(_x7) {
  return _JsVideoEngine_PreInit.apply(this, arguments);
}

function _JsVideoEngine_PreInit() {
  _JsVideoEngine_PreInit = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee3(para) {
    var data, dataList;
    return _regenerator.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            log("video pre init", para);

            if (!_JsMediaEngine_Variables.default.localVideoDecMGR) {
              _JsMediaEngine_Variables.default.localVideoDecMGR = new jsMediaBuffer.VideoMGR();
            }

            if (!_JsMediaEngine_Variables.default.localVideoEncMGR) {
              _JsMediaEngine_Variables.default.localVideoEncMGR = new jsMediaBuffer.VideoMGR();
            }

            _JsMediaEngine_Variables.default.videoDecWorkerPath = para.videoDecWorkerPath;
            _JsMediaEngine_Variables.default.videoEncWorkerPath = para.videoEncWorkerPath;

            if (!(para.videoDecWorkerPath === para.videoEncWorkerPath)) {
              _context3.next = 13;
              break;
            }

            _context3.next = 8;
            return download(para.videoDecWorkerPath);

          case 8:
            data = _context3.sent;
            _JsMediaEngine_Variables.default.videoDecResponseText = data;
            _JsMediaEngine_Variables.default.videoEncResponseText = data;
            _context3.next = 18;
            break;

          case 13:
            _context3.next = 15;
            return _promise.default.all([download(para.videoDecWorkerPath), download(para.videoEncWorkerPath)]);

          case 15:
            dataList = _context3.sent;
            _JsMediaEngine_Variables.default.videoDecResponseText = dataList[0];
            _JsMediaEngine_Variables.default.videoEncResponseText = dataList[1];

          case 18:
            _JsMediaEngine_Variables.default.mediaSDKHandle = para.handle; // Add_Video_Decode_Thread(0, null);

            Add_Video_Encode_Thread(0, null); // Add_Jpeg_Decode_Thread(0, null);

          case 20:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _JsVideoEngine_PreInit.apply(this, arguments);
}

function initVideoEncode(_x8, _x9) {
  return _initVideoEncode.apply(this, arguments);
}
/**
 * trigger on Video_WebSocket_Ip_Address is assigned a value
 */


function _initVideoEncode() {
  _initVideoEncode = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee4(workerParameters, sdkInstance) {
    var data;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            if (!_JsMediaEngine_Variables.default.localVideoEncMGR) {
              _JsMediaEngine_Variables.default.localVideoEncMGR = new jsMediaBuffer.VideoMGR();
            }

            _JsMediaEngine_Variables.default.videoEncWorkerPath = workerParameters.workerJsFileUrl;
            _context4.next = 4;
            return download(workerParameters.workerJsFileUrl);

          case 4:
            data = _context4.sent;
            _JsMediaEngine_Variables.default.videoEncResponseText = data;
            Add_Video_Encode_Thread(0, null, sdkInstance, workerParameters);
            _context4.next = 9;
            return onVideoStartIsReady(sdkInstance);

          case 9:
            Video_Encode_Post_message();

          case 10:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));
  return _initVideoEncode.apply(this, arguments);
}

function onVideoStartIsReady(sdkInstance) {
  return new _promise.default(function (resolve, reject) {
    var interval = setInterval(function () {
      if (sdkInstance && sdkInstance.isDestroy) {
        clearInterval(interval);
        return reject("sdk destroy");
      }

      if (_JsMediaEngine_Variables.default.Video_WebSocket_Ip_Address && _JsMediaEngine_Variables.default.localVideoPara && _JsMediaEngine_Variables.default.localVideoPara.confId) {
        resolve(_JsMediaEngine_Variables.default.Video_WebSocket_Ip_Address);
        clearInterval(interval);
      }
    }, 1000 / 24);
  });
}

function initVideoDecode(_x10, _x11) {
  return _initVideoDecode.apply(this, arguments);
}

function _initVideoDecode() {
  _initVideoDecode = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee5(workerParameters, sdkInstance) {
    var data;
    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            if (!_JsMediaEngine_Variables.default.localVideoDecMGR) {
              _JsMediaEngine_Variables.default.localVideoDecMGR = new jsMediaBuffer.VideoMGR();
            }

            _JsMediaEngine_Variables.default.videoDecWorkerPath = workerParameters.workerJsFileUrl;
            _context5.next = 4;
            return download(workerParameters.workerJsFileUrl);

          case 4:
            data = _context5.sent;
            _JsMediaEngine_Variables.default.videoDecResponseText = data;
            Add_Video_Decode_Thread(0, null, sdkInstance, workerParameters);
            _context5.next = 9;
            return onVideoStartIsReady(sdkInstance);

          case 9:
            Video_Decode_Post_message();

          case 10:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));
  return _initVideoDecode.apply(this, arguments);
}

function initAudioEncode(_x12, _x13) {
  return _initAudioEncode.apply(this, arguments);
}

function _initAudioEncode() {
  _initAudioEncode = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee6(workerParameters, sdkInstance) {
    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            initSharedBuffer();

            if (!_JsMediaEngine_Variables.default.localAudioEncMGR) {
              _JsMediaEngine_Variables.default.localAudioEncMGR = new jsMediaBuffer.AudioMGR();
            }

            _JsMediaEngine_Variables.default.audioEncWorkerPath = workerParameters.workerJsFileUrl;
            _context6.next = 5;
            return download(workerParameters.workerJsFileUrl);

          case 5:
            _JsMediaEngine_Variables.default.audioEncodeResponse = _context6.sent;
            Add_Audio_Encode_Thread(0, sdkInstance, workerParameters);
            onAudioEncodeParametersReady(sdkInstance).then(function () {
              Audio_Encode_Post_message();
            }).catch(function (ex) {
              log(ex);
            });

          case 8:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));
  return _initAudioEncode.apply(this, arguments);
}

function onAudioEncodeParametersReady(_x14) {
  return _onAudioEncodeParametersReady.apply(this, arguments);
}

function _onAudioEncodeParametersReady() {
  _onAudioEncodeParametersReady = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee7(sdkInstance) {
    return _regenerator.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            return _context7.abrupt("return", new _promise.default(function (resolve, reject) {
              var interval = setInterval(function () {
                if (sdkInstance && sdkInstance.isDestroy) {
                  clearInterval(interval);
                  return reject("sdk destroy");
                }

                var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

                if (_JsMediaEngine_Variables.default.localAudioPara && handle && _JsMediaEngine_Variables.default.isAudioEncodeWASMOK) {
                  clearInterval(interval);
                  resolve(true);
                }
              }, 1000 / 24);
            }));

          case 1:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));
  return _onAudioEncodeParametersReady.apply(this, arguments);
}

function onAudioDecodeParametersReady(_x15) {
  return _onAudioDecodeParametersReady.apply(this, arguments);
}

function _onAudioDecodeParametersReady() {
  _onAudioDecodeParametersReady = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee8(sdkInstance) {
    return _regenerator.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            return _context8.abrupt("return", new _promise.default(function (resolve, reject) {
              var interval = setInterval(function () {
                if (sdkInstance && sdkInstance.isDestroy) {
                  clearInterval(interval);
                  return reject("sdk destroy");
                }

                var handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

                if (_JsMediaEngine_Variables.default.localAudioPara && handle && _JsMediaEngine_Variables.default.isAudioDecodeWASMOK) {
                  clearInterval(interval);
                  resolve(true);
                }
              }, 1000 / 24);
            }));

          case 1:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));
  return _onAudioDecodeParametersReady.apply(this, arguments);
}

function initAudioDecode(_x16, _x17) {
  return _initAudioDecode.apply(this, arguments);
}

function _initAudioDecode() {
  _initAudioDecode = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee9(workerParameters, sdkInstance) {
    return _regenerator.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            initSharedBuffer();

            if (!_JsMediaEngine_Variables.default.localAudioDecMGR) {
              _JsMediaEngine_Variables.default.localAudioDecMGR = new jsMediaBuffer.AudioMGR();
            }

            _JsMediaEngine_Variables.default.audioDecWorkerPath = workerParameters.workerJsFileUrl;
            _context9.next = 5;
            return download(workerParameters.workerJsFileUrl);

          case 5:
            _JsMediaEngine_Variables.default.audioDecodeResponse = _context9.sent;
            Add_Audio_Decode_Thread(0, null, sdkInstance, workerParameters);
            onAudioDecodeParametersReady(sdkInstance).then(function () {
              Audio_Decode_Post_message();
            }).catch(function (ex) {
              log(ex);
            });

          case 8:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));
  return _initAudioDecode.apply(this, arguments);
}

function initSharingDecode(_x18, _x19) {
  return _initSharingDecode.apply(this, arguments);
}

function _initSharingDecode() {
  _initSharingDecode = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee10(workerParameters, sdkInstance) {
    return _regenerator.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            if (!_JsMediaEngine_Variables.default.localSharingDecMGR) {
              _JsMediaEngine_Variables.default.localSharingDecMGR = new jsMediaBuffer.SharingMGR();
            }

            if (!_JsMediaEngine_Variables.default.localMouseDecMGR) {
              _JsMediaEngine_Variables.default.localMouseDecMGR = new jsMediaBuffer.SharingMGR();
            }

            _JsMediaEngine_Variables.default.sharingDecWorkerPath = workerParameters.workerJsFileUrl;
            _context10.next = 5;
            return download(workerParameters.workerJsFileUrl);

          case 5:
            _JsMediaEngine_Variables.default.sharingDecodeResponse = _context10.sent;
            Add_Sharing_Decode_Thread(sdkInstance, workerParameters);
            onSharingDecodeParametersReady(sdkInstance).then(function () {
              Sharing_Decode_Post_message();
            }).catch(function (ex) {
              log(ex);
            });

          case 8:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10, this);
  }));
  return _initSharingDecode.apply(this, arguments);
}

function initSharingEncode(_x20, _x21) {
  return _initSharingEncode.apply(this, arguments);
}

function _initSharingEncode() {
  _initSharingEncode = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee11(workerParameters, sdkInstance) {
    return _regenerator.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            if (!_JsMediaEngine_Variables.default.localSharingEncMGR) {
              _JsMediaEngine_Variables.default.localSharingEncMGR = new jsMediaBuffer.SharingMGR();
            }

            _JsMediaEngine_Variables.default.sharingEncWorkerPath = workerParameters.workerJsFileUrl;
            _context11.next = 4;
            return download(workerParameters.workerJsFileUrl);

          case 4:
            _JsMediaEngine_Variables.default.sharingEncodeResponse = _context11.sent;
            Add_Sharing_Encode_Thread(sdkInstance, workerParameters);
            onSharingEncodeParametersReady(sdkInstance).then(function () {
              Sharing_Encode_Post_message();
            }).catch(function (ex) {
              log(ex);
            });

          case 7:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11, this);
  }));
  return _initSharingEncode.apply(this, arguments);
}

function onSharingEncodeParametersReady(sdkInstance) {
  return new _promise.default(function (resolve, reject) {
    var interval = setInterval(function () {
      if (sdkInstance && sdkInstance.isDestroy) {
        clearInterval(interval);
        return reject("sdk destroy");
      }

      var handle = _JsMediaEngine_Variables.default.localSharingEncMGR.Get(_JsMediaEngine_Variables.default.SPECIAL_ID);

      if (handle && _JsMediaEngine_Variables.default.isSharingEncodeWASMOK && _JsMediaEngine_Variables.default.localSharingPara) {
        clearInterval(interval);
        resolve(true);
      }
    }, 1000 / 24);
  });
}

function onSharingDecodeParametersReady(sdkInstance) {
  return new _promise.default(function (resolve, reject) {
    var interval = setInterval(function () {
      if (sdkInstance && sdkInstance.isDestroy) {
        clearInterval(interval);
        return reject("sdk destroy");
      }

      var handle = _JsMediaEngine_Variables.default.localSharingDecMGR.Get(_JsMediaEngine_Variables.default.SPECIAL_ID);

      if (handle && _JsMediaEngine_Variables.default.isSharingDecodeWASMOK && _JsMediaEngine_Variables.default.localSharingPara) {
        clearInterval(interval);
        resolve(true);
      }
    }, 1000 / 24);
  });
}

function SetTotalEvent(para) {
  if (para.videoDecWorkerPath) {
    _JsMediaEngine_Variables.default.TotalWaitEvent += 6;
  }

  if (para.audioDecWorkerPath) {
    _JsMediaEngine_Variables.default.TotalWaitEvent += 6;
  }

  if (para.imageDecWorkerPath) {
    _JsMediaEngine_Variables.default.TotalWaitEvent += 3;
  }
}

function JsSharingEngine_PreInit(para) {
  if (!_JsMediaEngine_Variables.default.localSharingDecMGR) {
    _JsMediaEngine_Variables.default.localSharingDecMGR = new jsMediaBuffer.SharingMGR();
  }

  if (!_JsMediaEngine_Variables.default.localMouseDecMGR) {
    _JsMediaEngine_Variables.default.localMouseDecMGR = new jsMediaBuffer.SharingMGR();
  }

  _JsMediaEngine_Variables.default.sharingDecWorkerPath = para.imageDecWorkerPath;
  Add_Sharing_Decode_Thread();
}

function Sharing_Decode_Post_message() {
  if (!_JsMediaEngine_Variables.default.localSharingDecMGR) {
    return;
  }

  var handle = _JsMediaEngine_Variables.default.localSharingDecMGR.Get(_JsMediaEngine_Variables.default.SPECIAL_ID);

  if (handle && _JsMediaEngine_Variables.default.isSharingDecodeWASMOK && !_JsMediaEngine_Variables.default.isSharingDecodePostStart) {
    handle.postMessage({
      command: 'startMedia',
      websocket_ip_address: _JsMediaEngine_Variables.default.Sharing_WebSocket_Ip_Address,
      confId: _JsMediaEngine_Variables.default.localSharingPara.userid,
      confKey: "",
      logon: _JsMediaEngine_Variables.default.localSharingPara.logon,
      meetingid: _JsMediaEngine_Variables.default.localSharingPara.meetingid,
      meetingnumb: _JsMediaEngine_Variables.default.localSharingPara.meetingnumb,
      multiThreadNum: 1
    });
    _JsMediaEngine_Variables.default.isSharingDecodePostStart = true;
  } else if (!_JsMediaEngine_Variables.default.isSharingDecodePostStart) {
    setTimeout(Sharing_Decode_Post_message, 100);
  }
}

function Sharing_Encode_Post_message() {
  if (!_JsMediaEngine_Variables.default.localSharingEncMGR) {
    return;
  }

  var handle = _JsMediaEngine_Variables.default.localSharingEncMGR.Get(_JsMediaEngine_Variables.default.SPECIAL_ID);

  if (handle && _JsMediaEngine_Variables.default.isSharingEncodeWASMOK && !_JsMediaEngine_Variables.default.isSharingEncodePostStart) {
    var multithreadnumb = _JsMediaEngine_Variables.default.localSharingPara.isSupportMultiThread ? 4 : 1;

    _Monitor.default.add_monitor2("STN" + multithreadnumb);

    var iv = null;

    if (_JsMediaEngine_Variables.default.ivObj) {
      iv = _JsMediaEngine_Variables.default.ivObj[_CommonEnums.WORKER_TYPE.SHARING_ENCODE]; // if modify {@link util.stringSplitByComma2Buffer),
      // must also modify {@link util.buffer2stringSplitByComma}

      iv = _util.default.stringSplitByComma2Buffer(iv);
    }

    handle.postMessage({
      command: 'startMedia',
      encode: true,
      websocket_ip_address: _JsMediaEngine_Variables.default.Sharing_WebSocket_Ip_Address,
      confId: _JsMediaEngine_Variables.default.localSharingPara.userid,
      confKey: "",
      logon: _JsMediaEngine_Variables.default.localSharingPara.logon,
      isChromeOrEdge: _util.default.browser.isChrome || _util.default.browser.isEdge,
      meetingid: _JsMediaEngine_Variables.default.localSharingPara.meetingid,
      meetingnumb: _JsMediaEngine_Variables.default.localSharingPara.meetingnumb,
      multiThreadNum: multithreadnumb,
      iv: iv
    });
    _JsMediaEngine_Variables.default.isSharingEncodePostStart = true;
  } else if (!_JsMediaEngine_Variables.default.isSharingEncodePostStart) {
    setTimeout(Sharing_Encode_Post_message, 100);
  }
}

function isAllowedSharingSSRC(data) {
  try {
    var ssrcFromPDU = data.ssrcFromPDU;
    if (ssrcFromPDU === null || ssrcFromPDU === undefined) return true;
    var val = 0xfffffc00;
    return (_JsMediaEngine_Variables.default.localSharingPara.userid & val) !== (ssrcFromPDU & val);
  } catch (ex) {
    return true;
  }
}

function SharingDec_Listener(e) {
  var message = e.data;
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  try {
    (function () {
      if (message.status === jsEvent.Sharing_Data) {
        // if message.data.ssrcFromPDU is myself, drop these frames, don't show myself sharing image
        var isAllowed = isAllowedSharingSSRC(message.data);

        if (isAllowed) {
          Put_Sharing_Data_Buffer(message.data);
        }
      } else if (message.status === jsEvent.Sharing_Width_And_Height_Info) {
        _pubSub.default.publish(jsEvent.SHARING_PARAM_INFO_FROM_SOCKET, {
          body: {
            width: message.logicWidth,
            height: message.logicHeight,
            logicWidth: message.logicWidth,
            logicHeight: message.logicHeight
          }
        }); // jsMediaEngineVariables.Notify_APPUI(jsEvent.SHARING_PARA, {
        //     body: {
        //         width: message.logicWidth,
        //         height: message.logicHeight,
        //         logicWidth: message.logicWidth,
        //         logicHeight: message.logicHeight,
        //     }
        // });

      } else if (message.status === jsEvent.SHARING_RENDER_MONITOR_LOG) {
        _Monitor.default.add_monitor2(message.data);
      } else if (message.status === jsEvent.SHARING_DATA_VIDEO_MODE) {
        Put_Sharing_Frame_Buffer(message.sharing_ssrc, message.data, message.sharing_timestamp, message.sharing_width, message.sharing_height, message.rendering_x, message.rendering_y, message.rendering_w, message.rendering_h, message.logic_w, message.logic_h, message.yuv_limited);
      } else if (message.status === jsEvent.MOUSE_DATA_VIDEO_MODE) {
        Put_Mouse_Data_Buffer(message.mouse_ssrc, message.data, message.mouse_timestamp, message.mouse_width, message.mouse_height, message.mouse_x, message.mouse_y, message.mLogic_w, message.mLogic_h, message.sync_id);
      } else if (message.status === jsEvent.SHARING_DECODE_MESSAGE) {
        _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.SHARING_DECODE_MAX_SIZE, {
          ssrc: message.ssrc,
          size: message.size
        });
      } else if (message.status === jsEvent.Sharing_Dec_WASM_OK) {
        _Monitor.default.add_monitor("SDWS");

        _JsMediaEngine_Variables.default.isSharingDecodeWASMOK = true;

        _JsMediaEngine_Variables.default.sharingDecInitInstance.setWasmSuccess();
      } else if (message.status === jsEvent.Sharing_Dec_WASM_FAILED) {
        _Monitor.default.add_monitor("SDWF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);
          }

          _JsMediaEngine_Variables.default.isInitialFailed = true;
        }

        _Sharing.SharingInit.publishSharingDecodeFailedEvent();
      } else if (message.status === jsEvent.Sharing_Handle_OK) {
        _Monitor.default.add_monitor("SDHS");

        _JsMediaEngine_Variables.default.sharingDecInitInstance.setHanderSuccess();
      } else if (message.status === jsEvent.Sharing_Handle_FAILED) {
        _Monitor.default.add_monitor("SHHF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);
          }

          _JsMediaEngine_Variables.default.isInitialFailed = true;
        }

        _Sharing.SharingInit.publishSharingDecodeFailedEvent();
      } else if (message.status === jsEvent.Sharing_Dec_WebSocket_OK) {
        _Monitor.default.add_monitor("SDSS");

        _JsMediaEngine_Variables.default.sharingDecInitInstance.setSocketSuccess();
      } else if (message.status === jsEvent.Sharing_Dec_WebSocket_FAILED) {
        _Monitor.default.add_monitor("SDSF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.sharingDecInitInstance.isSocketInitSuccess()) {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.VIDEO_WEBSOCKET_BROKEN, null);
          } else {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _Sharing.SharingInit.publishSharingDecodeFailedEvent();
      } else if (message.status == jsEvent.MONITOR_MESSAGE) {
        _JsMediaEngine_Variables.default.monitorDecodeSharing = message;
      } else if (message.status === jsEvent.DOWNLOAD_WASM_FROM_MAIN_THREAD) {
        var handle = _JsMediaEngine_Variables.default.localSharingDecMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

        downloadWASMAndPostToWorker(message.url, handle);
      } else if (message.status == jsEvent.APP_TROUBLESHOOTING_INFO) {
        _JsMediaEngine_Variables.default.monitorSharingDecodeAPPInfo = message;

        _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
          "evt": 4167,
          "seq": 1,
          "body": {
            "data": _JsMediaEngine_Variables.default.monitorSharingDecodeAPPInfo.data
          }
        });

        _JsMediaEngine_Variables.default.monitorSharingDecodeAPPInfo = null;
      } else if (message.status == jsEvent.WCL_TROUBLESHOOTING_INFO) {
        _Monitor.default.add_monitor("SD" + message.data);
      }
    })();
  } catch (ex) {
    log.error(ex);
  }

  if (_JsMediaEngine_Variables.default.sharingDecInitInstance.checkInitSuccess()) {
    // Zoom_Monitor.set_sdi(true)
    _Sharing.SharingInit.publishSharingDecodeSuccessEvent();
  }
}

function SharingEnc_Listener(e) {
  var message = e.data;
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  try {
    (function () {
      if (message.status === jsEvent.Sharing_Data) {
        Put_Sharing_Data_Buffer(message.data);
      } else if (message.status === jsEvent.SHARING_GET_IMAGE_DATA_WRONG) {
        _Monitor.default.add_monitor("GIDF");
      } else if (message.status === jsEvent.Sharing_Dec_WASM_OK) {
        _Monitor.default.add_monitor("SEWS");

        _JsMediaEngine_Variables.default.isSharingEncodeWASMOK = true;

        _JsMediaEngine_Variables.default.sharingEncInitInstance.setWasmSuccess();
      } else if (message.status === jsEvent.Sharing_Dec_WASM_FAILED) {
        _Monitor.default.add_monitor("SEWF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);
          }

          _JsMediaEngine_Variables.default.isInitialFailed = true;
        }

        _Sharing.SharingInit.publishSharingEncodeFailedEvent();
      } else if (message.status === jsEvent.Sharing_Handle_OK) {
        _Monitor.default.add_monitor("SEHS");

        _JsMediaEngine_Variables.default.sharingEncInitInstance.setHanderSuccess();
      } else if (message.status === jsEvent.Sharing_Handle_FAILED) {
        _Monitor.default.add_monitor("SEHF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);
          }

          _JsMediaEngine_Variables.default.isInitialFailed = true;
        }

        _Sharing.SharingInit.publishSharingEncodeFailedEvent();
      } else if (message.status === jsEvent.Sharing_Dec_WebSocket_OK) {
        _Monitor.default.add_monitor("SESS");

        _JsMediaEngine_Variables.default.sharingEncInitInstance.setSocketSuccess();
      } else if (message.status === jsEvent.Sharing_Dec_WebSocket_FAILED) {
        _Monitor.default.add_monitor("SEWF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.sharingEncInitInstance.isSocketInitSuccess()) {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.VIDEO_WEBSOCKET_BROKEN, null);
          } else {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _Sharing.SharingInit.publishSharingEncodeFailedEvent();
      } else if (message.status == jsEvent.Video_Capture_Tick) {
        _JsMediaEngine_Variables.default.mediaSDKHandle.Process_Sharing();
      } else if (message.status == jsEvent.MONITOR_MESSAGE) {
        _JsMediaEngine_Variables.default.monitorEncodeSharing = message;
      } else if (message.status == jsEvent.DOWNLOAD_WASM_FROM_MAIN_THREAD) {
        var handle = _JsMediaEngine_Variables.default.localSharingEncMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

        downloadWASMAndPostToWorker(message.url, handle);
      } else if (message.status == jsEvent.APP_TROUBLESHOOTING_INFO) {
        _JsMediaEngine_Variables.default.monitorSharingEncodeAPPInfo = message;

        _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
          "evt": 4167,
          "seq": 1,
          "body": {
            "data": _JsMediaEngine_Variables.default.monitorSharingEncodeAPPInfo.data
          }
        });

        _JsMediaEngine_Variables.default.monitorSharingEncodeAPPInfo = null;
      } else if (message.status == jsEvent.WCL_TROUBLESHOOTING_INFO) {
        _Monitor.default.add_monitor("SE" + message.data);
      }
    })();
  } catch (ex) {
    log.error(ex);
  }

  if (_JsMediaEngine_Variables.default.sharingEncInitInstance.checkInitSuccess()) {
    // Zoom_Monitor.set_sei(true);
    _Sharing.SharingInit.publishSharingEncodeSuccessEvent();
  }
}

function VideoDec_Listener(e) {
  var message = e.data;
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  try {
    (function () {
      //todo drop ratio event of decode
      if (message.status === jsEvent.VIDEO_DATA_DROP_RATIO) {//todo Notify_APPUI
      } else if (message.status === jsEvent.VIDEO_RESOLUTION_UPDATE) {
        _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.CURRENT_VIDEO_RESOLUTION, {
          width: message.width,
          height: message.height
        });
      } else if (message.status === jsEvent.VIDEO_RENDER_MONITOR_LOG) {
        _Monitor.default.add_monitor2(message.data);
      } else if (message.status === jsEvent.VIDEO_DROP_RATIO_FROM_WCL) {
        var data = message.data; // video/audio data to websocket do not use async action. because async action will be very slow when some browsers (like Chrome) run in background mode.

        _pubSub.default.triggerSync(jsEvent.VIDEO_DATA_FROM_WORKER, data);
      } else if (message.status === 0) {
        Put_Video_Frame_Buffer(message.video_ssrc, message.data, message.video_timestamp, message.video_width, message.video_height, message.rendering_x, message.rendering_y, message.rendering_w, message.rendering_h, message.rotation, message.yuv_limited);
      } else if (message.status === jsEvent.Video_Dec_WASM_OK) {
        _Monitor.default.add_monitor("VDWS");

        _JsMediaEngine_Variables.default.isVideoDecodeWASMOK = true;

        _JsMediaEngine_Variables.default.videoDecInitInstance.setWasmSuccess();
      } else if (message.status === jsEvent.DECODE_MESSAGE) {
        _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.VIDEO_DECODE_MAX_SIZE, {
          ssrc: message.ssrc,
          size: message.size
        });
      } else if (message.status === jsEvent.Video_Dec_WASM_FAILED) {
        _Monitor.default.add_monitor("VDWF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);
          }

          _JsMediaEngine_Variables.default.isInitialFailed = true;
        }

        _Video.VideoInit.publishDecodeInitFAILEDEvent();
      } else if (message.status === jsEvent.Video_Dec_Handle_OK) {
        _Monitor.default.add_monitor("VDHS");

        _JsMediaEngine_Variables.default.videoDecInitInstance.setHanderSuccess();
      } else if (message.status === jsEvent.Video_Dec_Handle_FAILED) {
        _Monitor.default.add_monitor("VDHF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);
          }

          _JsMediaEngine_Variables.default.isInitialFailed = true;
        }

        _Video.VideoInit.publishDecodeInitFAILEDEvent();
      } else if (message.status === jsEvent.Video_Dec_WebSocket_OK) {
        _Monitor.default.add_monitor("VDSS");

        _JsMediaEngine_Variables.default.videoDecInitInstance.setSocketSuccess();
      } else if (message.status === jsEvent.Video_Dec_WebSocket_FAILED) {
        _Monitor.default.add_monitor("VDSF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.videoDecInitInstance.isSocketInitSuccess()) {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.VIDEO_WEBSOCKET_BROKEN, null);
          } else {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _Video.VideoInit.publishDecodeInitFAILEDEvent();
      } else if (message.status == jsEvent.MONITOR_MESSAGE) {
        _JsMediaEngine_Variables.default.monitorDecodeVideo = message;
      } else if (message.status == jsEvent.APP_TROUBLESHOOTING_INFO) {
        _JsMediaEngine_Variables.default.monitorVideoDecodeAPPInfo = message;

        _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
          "evt": 4167,
          "seq": 1,
          "body": {
            "data": _JsMediaEngine_Variables.default.monitorVideoDecodeAPPInfo.data
          }
        });

        _JsMediaEngine_Variables.default.monitorVideoDecodeAPPInfo = null;
      } else if (message.status == jsEvent.DOWNLOAD_WASM_FROM_MAIN_THREAD) {
        var handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

        downloadWASMAndPostToWorker(message.url, handle);
      } else if (message.status == jsEvent.WCL_TROUBLESHOOTING_INFO) {
        _Monitor.default.add_monitor("VD" + message.data);
      }
    })();
  } catch (ex) {
    log.error(ex);
  }

  if (_JsMediaEngine_Variables.default.videoDecInitInstance.checkInitSuccess()) {
    // Zoom_Monitor.set_vdi(true);
    _Video.VideoInit.publishDecodeInitSuccessEvent();
  }
}

function VideoEnc_Listener(e) {
  var message = e.data;
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  try {
    (function () {
      if (message.status === jsEvent.VIDEO_DATA_DROP_RATIO) {//todo Notify_APPUI
      } else if (message.status === jsEvent.VIDEO_ENCODED_DATA) {
        var data = message.data; // video/audio data to websocket do not use async action. because async action will be very slow when some browsers (like Chrome) run in background mode.

        _pubSub.default.triggerSync(jsEvent.VIDEO_DATA_FROM_WORKER, data);
      } else if (message.status === 0) {} else if (message.status === jsEvent.Video_Enc_WASM_OK || message.status === jsEvent.Video_Dec_WASM_OK) {
        _Monitor.default.add_monitor("VEWS");

        Add_Video_Decode_Thread(0, null);
        _JsMediaEngine_Variables.default.isVideoEncodeWASMOK = true;

        _JsMediaEngine_Variables.default.videoInitInstance.setWasmSuccess();
      } else if (message.status === jsEvent.Video_Enc_WASM_FAILED) {
        _Monitor.default.add_monitor("VEWF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);
          }

          _JsMediaEngine_Variables.default.isInitialFailed = true;
        }

        _Video.VideoInit.publishEncodeInitFAILEDEvent();
      } else if (message.status === jsEvent.Video_Enc_Handle_OK || jsEvent.Video_Dec_Handle_OK === message.status) {
        _Monitor.default.add_monitor("VEHS");

        _JsMediaEngine_Variables.default.videoInitInstance.setHanderSuccess();
      } else if (message.status === jsEvent.Video_Enc_Handle_FAILED || jsEvent.Video_Dec_Handle_FAILED === message.status) {
        _Monitor.default.add_monitor("VEHF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);
          }

          _JsMediaEngine_Variables.default.isInitialFailed = true;
        }

        _Video.VideoInit.publishEncodeInitFAILEDEvent();
      } else if (message.status === jsEvent.Video_Enc_WebSocket_OK || jsEvent.Video_Dec_WebSocket_OK === message.status) {
        _Monitor.default.add_monitor("VESS");

        _JsMediaEngine_Variables.default.videoInitInstance.setSocketSuccess();
      } else if (message.status === jsEvent.Video_Enc_WebSocket_FAILED || message.status === jsEvent.Video_Dec_WebSocket_FAILED) {
        _Monitor.default.add_monitor("VESF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.videoInitInstance.isSocketInitSuccess()) {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.VIDEO_WEBSOCKET_BROKEN, null);
          } else {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _Video.VideoInit.publishEncodeInitFAILEDEvent();

        _pubSub.default.trigger(_Video.VideoInit.publishEncodeInitFAILEDEvent());
      } else if (message.status === jsEvent.Video_Capture_Tick) {
        _JsMediaEngine_Variables.default.mediaSDKHandle.Process_Video();
      } else if (message.status == jsEvent.MONITOR_MESSAGE) {
        _JsMediaEngine_Variables.default.monitorEncodeVideo = message;
      } else if (message.status == jsEvent.APP_TROUBLESHOOTING_INFO) {
        _JsMediaEngine_Variables.default.monitorVideoEncodeAPPInfo = message;

        _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
          "evt": 4167,
          "seq": 1,
          "body": {
            "data": _JsMediaEngine_Variables.default.monitorVideoEncodeAPPInfo.data
          }
        });

        _JsMediaEngine_Variables.default.monitorVideoEncodeAPPInfo = null;
      } else if (message.status === jsEvent.DOWNLOAD_WASM_FROM_MAIN_THREAD) {
        var handle = _JsMediaEngine_Variables.default.localVideoEncMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

        downloadWASMAndPostToWorker(message.url, handle);
      } else if (message.status == jsEvent.WCL_TROUBLESHOOTING_INFO) {
        _Monitor.default.add_monitor("VE" + message.data);
      }
    })();
  } catch (ex) {
    log.error(ex);
  }

  if (_JsMediaEngine_Variables.default.videoInitInstance.checkInitSuccess()) {
    // Zoom_Monitor.set_vei(true);
    _Video.VideoInit.publishEncodeInitSuccessEvent();
  }
}

function downloadWASMAndPostToWorker(url, handle) {
  _util.default.downloadBinary(url).then(function (arraybuffer) {
    handle.postMessage({
      command: "DOWNLOAD_WASM_FROM_MAIN_THREAD_OK",
      data: arraybuffer
    });
  }).catch(function (ex) {
    handle.postMessage({
      command: "DOWNLOAD_WASM_FROM_MAIN_THREAD_FAILED",
      data: ex.message
    });
  });
}

function AudioDec_Listener(e) {
  var message = e.data;
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  try {
    (function () {
      if (message.status === 0) {
        if (message.time) {
          if (_JsMediaEngine_Variables.default.AudioNode) {
            _JsMediaEngine_Variables.default.AudioNode.postData("data", {
              ssrc: _JsMediaEngine_Variables.default.CurrentSSRC,
              data: message.data,
              time: message.time
            });
          } else {
            Put_Audio_Frame_Buffer(ssrc, message.data, message.time);
          }
        } else {
          if (_JsMediaEngine_Variables.default.AudioNode) {
            _JsMediaEngine_Variables.default.AudioNode.postData("data", {
              ssrc: _JsMediaEngine_Variables.default.CurrentSSRC,
              data: message.data,
              time: null
            });
          } else {
            Put_Audio_Frame_Buffer(ssrc, message.data, null);
          }
        }

        if (_JsMediaEngine_Variables.default.localAudioEncMGR && !_JsMediaEngine_Variables.default.sharedBuffer) {
          var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

          if (handle && message.aec.length) {
            var data = {
              command: "EchoCancel",
              data: message.aec,
              channels: message.channels,
              sampleHz: message.sampleHz
            };
            handle.postMessage(data, [data.data.buffer]);
          }
        }
      } else if (message.status === jsEvent.Audio_Enc_WASM_OK || message.status === jsEvent.Audio_Dec_WASM_OK) {
        _Monitor.default.add_monitor("ADWS");

        _JsMediaEngine_Variables.default.isAudioDecodeWASMOK = true;

        _JsMediaEngine_Variables.default.audioDecInitInstance.setWasmSuccess();
      } else if (message.status === jsEvent.Audio_Dec_WASM_FAILED) {
        //jsMediaEngineVariables.Notify_APPUI
        _Monitor.default.add_monitor("ADWF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _AudioService.AudioInit.publishAudioDecodeFAILEDEvent();
      } else if (message.status === jsEvent.Audio_Dec_Handle_OK) {
        _Monitor.default.add_monitor("ADHS");

        _JsMediaEngine_Variables.default.audioDecInitInstance.setHanderSuccess();
      } else if (message.status === jsEvent.Audio_Dec_Handle_FAILED) {
        _Monitor.default.add_monitor("ADHF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _AudioService.AudioInit.publishAudioDecodeFAILEDEvent();
      } else if (message.status === jsEvent.Audio_Dec_WebSocket_OK) {
        _Monitor.default.add_monitor("ADSS");

        _JsMediaEngine_Variables.default.audioDecInitInstance.setSocketSuccess();
      } else if (message.status === jsEvent.Audio_Dec_WebSocket_FAILED) {
        _Monitor.default.add_monitor("ADSF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.audioDecInitInstance.isSocketInitSuccess()) {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.AUDIO_WEBSOCKET_BROKEN, null);
          } else {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _AudioService.AudioInit.publishAudioDecodeFAILEDEvent();
      } else if (message.status === 6) {//Not Defined
      } else if (message.status === -6) {
        //Not Defined
        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _AudioService.AudioInit.publishAudioDecodeFAILEDEvent();
      } else if (message.status == jsEvent.MONITOR_MESSAGE) {
        _JsMediaEngine_Variables.default.monitorDecodeAudio = message;
      } else if (message.status === jsEvent.DOWNLOAD_WASM_FROM_MAIN_THREAD) {
        var _handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

        downloadWASMAndPostToWorker(message.url, _handle);
      } else if (message.status == jsEvent.WCL_TROUBLESHOOTING_INFO) {
        _Monitor.default.add_monitor("AD" + message.data);
      } else if (message.status == jsEvent.CURRENT_SSRC_TIME) {
        _JsMediaEngine_Variables.default.CurrentSSRCTime = message.data;
      }
    })();
  } catch (ex) {
    log.error(ex);
  }

  if (_JsMediaEngine_Variables.default.audioDecInitInstance.checkInitSuccess()) {
    // Zoom_Monitor.set_adi(true);
    _AudioService.AudioInit.publishAudioDecodeSuccessEvent();
  }
}

function AudioEnc_Listener(e) {
  if (!_JsMediaEngine_Variables.default.localAudioDecMGR) {
    return;
  }

  try {
    (function () {
      var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;
      var message = e.data;

      var audio_decwebwork = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(ssrc);

      if (message.status == 0) {
        if (audio_decwebwork) {
          audio_decwebwork.postMessage({
            command: 'EncodedAudioFrame',
            data: message.data
          }, [message.data.buffer]);
        }
      } else if (message.status == jsEvent.AUDIO_ENCODED_DATA) {
        // video/audio data to websocket do not use async action. because async action will be very slow when some browsers (like Chrome) run in background mode.
        _pubSub.default.triggerSync(jsEvent.AUDIO_DATA_FROM_WORKER, message.data);
      } else if (message.status === jsEvent.Audio_Enc_WASM_OK || message.status === jsEvent.Audio_Dec_WASM_OK) {
        _Monitor.default.add_monitor("AEWS");

        Add_Audio_Decode_Thread(0, null);
        _JsMediaEngine_Variables.default.isAudioEncodeWASMOK = true;

        _JsMediaEngine_Variables.default.audioEncodeInitInstance.setWasmSuccess();
      } else if (message.status === jsEvent.Audio_Enc_WASM_FAILED || message.status === jsEvent.Audio_Dec_WASM_FAILED) {
        _Monitor.default.add_monitor("AEWF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _AudioService.AudioInit.publishAudioEncodeFAILEDEvent();
      } else if (message.status === jsEvent.Audio_Dec_Handle_OK) {
        _Monitor.default.add_monitor("AEHS");

        _JsMediaEngine_Variables.default.audioEncodeInitInstance.setHanderSuccess();
      } else if (message.status === jsEvent.Audio_Dec_WebSocket_OK) {
        _Monitor.default.add_monitor("AESS");

        _JsMediaEngine_Variables.default.audioEncodeInitInstance.setSocketSuccess();
      } else if (message.status === jsEvent.Audio_Dec_WebSocket_FAILED) {
        _Monitor.default.add_monitor("AESF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.audioEncodeInitInstance.isSocketInitSuccess()) {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.AUDIO_WEBSOCKET_BROKEN, null);
          } else {
            _JsMediaEngine_Variables.default.Notify_APPUI_SAFE(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _AudioService.AudioInit.publishAudioEncodeFAILEDEvent();
      } else if (message.status === jsEvent.Audio_Enc_Handle_FAILED || message.status === jsEvent.Audio_Dec_Handle_FAILED) {
        _Monitor.default.add_monitor("AEHF");

        if (_JsMediaEngine_Variables.default.isInitialFailed) {} else {
          if (_JsMediaEngine_Variables.default.Notify_APPUI) {
            _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.INIT_FAILED, null);

            _JsMediaEngine_Variables.default.isInitialFailed = true;
          }
        }

        _AudioService.AudioInit.publishAudioEncodeFAILEDEvent();
      } else if (message.status === jsEvent.Audio_Mute) {
        if (_JsMediaEngine_Variables.default.Notify_APPUI) {
          _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.AUDIO_ZERO_DATA, null);
        }
      } else if (message.status === jsEvent.AUDIO_DELAY) {
        _JsMediaEngine_Variables.default.indexDbObject.put(message.delay, "delay");

        if (_JsMediaEngine_Variables.default.openIndexFlag) {
          _JsMediaEngine_Variables.default.indexDbObject.select("delay");
        }
      } else if (message.status === jsEvent.DOWNLOAD_WASM_FROM_MAIN_THREAD) {
        var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

        downloadWASMAndPostToWorker(message.url, handle);
      } else if (message.status == jsEvent.WCL_TROUBLESHOOTING_INFO) {
        _Monitor.default.add_monitor("AE" + message.data);
      } else if (message.status == jsEvent.AUDIO_CLIPPING) {//todo
        //just for test
        // console.error("AUDIO_CLIPPING")
        // jsMediaEngineVariables.Notify_APPUI(jsEvent.AUDIO_CLIPPING, null)
      }
    })();
  } catch (ex) {
    log.error(ex);
  }

  if (_JsMediaEngine_Variables.default.audioEncodeInitInstance.checkInitSuccess()) {
    // Zoom_Monitor.set_aei(true);
    _AudioService.AudioInit.publishAudioEncodeSuccessEvent();
  }
}

function Add_Sharing_Encode_Thread(sdkInstance, workerParameters) {
  if (sdkInstance && sdkInstance.isDestroy) {
    return log("WorkerType:sharingEnc;The relative SDK instance is destroy, don't start relative worker, avoid multiple same workers. ");
  }

  if (!_JsMediaEngine_Variables.default.localSharingEncMGR) {
    return;
  }

  if (_JsMediaEngine_Variables.default.isSharingEncodeThreadStart) {
    setTimeout(Sharing_Encode_Post_message, 100);
  } else {
    _JsMediaEngine_Variables.default.isSharingEncodeThreadStart = true;

    if (_JsMediaEngine_Variables.default.sharingEncWorkerPath != "") {
      WorkerStart(workerParameters, _JsMediaEngine_Variables.default.localSharingEncMGR, SharingEnc_Listener, _CommonEnums.WORKER_TYPE.SHARING_ENCODE, sdkInstance);
    } else {
      console.error("Worker Path Error!");
      return;
    }
  }
}

function Add_Sharing_Decode_Thread(sdkInstance, workerParameters) {
  if (sdkInstance && sdkInstance.isDestroy) {
    return log("WorkerType:sharingDec;The relative SDK instance is destroy, don't start relative worker, avoid multiple same workers. ");
  }

  if (!_JsMediaEngine_Variables.default.localSharingDecMGR) {
    return;
  }

  if (_JsMediaEngine_Variables.default.isSharingDecodeThreadStart) {
    setTimeout(Sharing_Decode_Post_message, 100);
  } else {
    _JsMediaEngine_Variables.default.isSharingDecodeThreadStart = true;

    if (_JsMediaEngine_Variables.default.sharingDecWorkerPath != "") {
      WorkerStart(workerParameters, _JsMediaEngine_Variables.default.localSharingDecMGR, SharingDec_Listener, _CommonEnums.WORKER_TYPE.SHARING_DECODE, sdkInstance);
    } else {
      console.error("Worker Path Error!");
      return;
    }
  }
}

var initSharedBuffer = (0, _once.default)(function () {
  try {
    //we allow the largest number of sample is 10
    //we struct like this:
    //|                  LOCK             |         cout    |      Audio HZ   |        len      |              data                                   |
    //|********|********|********|********|********|********|********|********|********|********|********|********|********|********|********|********|
    _JsMediaEngine_Variables.default.sharedBuffer = new SharedArrayBuffer(_JsMediaEngine_Variables.default.shareBufferSampleNumb * 480 * Int32Array.BYTES_PER_ELEMENT + _JsMediaEngine_Variables.default.shareBufferSampleNumb * (2 * 2 + 2 + 2 * 2 + 2));
    var sharedArray = new Int32Array(_JsMediaEngine_Variables.default.sharedBuffer);

    _lock_es.Lock.initialize(sharedArray, 0);
  } catch (e) {
    _JsMediaEngine_Variables.default.sharedBuffer = null;
  }
});

function JsAudioEngine_PreInit(_x22) {
  return _JsAudioEngine_PreInit.apply(this, arguments);
}

function _JsAudioEngine_PreInit() {
  _JsAudioEngine_PreInit = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee12(para) {
    var data;
    return _regenerator.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            initSharedBuffer(); // jsMediaEngineVariables.sharedBuffer = null;

            if (!_JsMediaEngine_Variables.default.localAudioDecMGR) {
              _JsMediaEngine_Variables.default.localAudioDecMGR = new jsMediaBuffer.AudioMGR();
            }

            if (!_JsMediaEngine_Variables.default.localAudioEncMGR) {
              _JsMediaEngine_Variables.default.localAudioEncMGR = new jsMediaBuffer.AudioMGR();
            }

            _JsMediaEngine_Variables.default.audioDecWorkerPath = para.audioDecWorkerPath;
            _JsMediaEngine_Variables.default.audioEncWorkerPath = para.audioEncWorkerPath;

            if (!(para.audioDecWorkerPath === para.audioEncWorkerPath)) {
              _context12.next = 13;
              break;
            }

            _context12.next = 8;
            return download(para.audioDecWorkerPath);

          case 8:
            data = _context12.sent;
            _JsMediaEngine_Variables.default.audioEncodeResponse = data;
            _JsMediaEngine_Variables.default.audioDecodeResponse = data;
            _context12.next = 15;
            break;

          case 13:
            _context12.next = 15;
            return _promise.default.all([download(para.audioEncWorkerPath), download(para.audioDecWorkerPath)]).then(function (datas) {
              _JsMediaEngine_Variables.default.audioEncodeResponse = datas[0];
              _JsMediaEngine_Variables.default.audioDecodeResponse = datas[1];
            });

          case 15:
            //    Add_Audio_Decode_Thread(0, null);
            Add_Audio_Encode_Thread(0);

          case 16:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12, this);
  }));
  return _JsAudioEngine_PreInit.apply(this, arguments);
}

function JsSharingEngine_Init(websocket_ip_address, param) {
  if (!_JsMediaEngine_Variables.default.localSharingPara) {
    _JsMediaEngine_Variables.default.localSharingPara = param;
  }

  if (!_JsMediaEngine_Variables.default.localSharingDecMGR) {
    _JsMediaEngine_Variables.default.localSharingDecMGR = new jsMediaBuffer.SharingMGR();
  }

  if (!_JsMediaEngine_Variables.default.localMouseDecMGR) {
    _JsMediaEngine_Variables.default.localMouseDecMGR = new jsMediaBuffer.SharingMGR();
  }

  Set_Sharing_WebSocket_Ip_Address(websocket_ip_address); //jsMediaEngineVariables.Audio_WebSocket_Ip_Address = websocket_ip_address;
  //  Add_Audio_Decode_Thread(0, null);

  Add_Sharing_Decode_Thread(0);
}

function setSharingEngineInitProperties(websocketUrl, param) {
  if (!_JsMediaEngine_Variables.default.localSharingPara) {
    _JsMediaEngine_Variables.default.localSharingPara = param;
  } else {
    (0, _assign.default)(_JsMediaEngine_Variables.default.localSharingPara, param);
  }

  Set_Sharing_WebSocket_Ip_Address(websocketUrl);
}

function JsAudioEngine_Init(websocket_ip_address, param) {
  if (!_JsMediaEngine_Variables.default.localAudioPara) {
    _JsMediaEngine_Variables.default.localAudioPara = param;
  }

  if (!_JsMediaEngine_Variables.default.localAudioDecMGR) {
    _JsMediaEngine_Variables.default.localAudioDecMGR = new jsMediaBuffer.AudioMGR();
  }

  if (!_JsMediaEngine_Variables.default.localAudioEncMGR) {
    _JsMediaEngine_Variables.default.localAudioEncMGR = new jsMediaBuffer.AudioMGR();
  }

  Set_Audio_WebSocket_Ip_Address(websocket_ip_address); //jsMediaEngineVariables.Audio_WebSocket_Ip_Address = websocket_ip_address;
  //  Add_Audio_Decode_Thread(0, null);

  Add_Audio_Encode_Thread(0);
}

function setAudioEngineInitProperties(websocketUrl, param) {
  if (!_JsMediaEngine_Variables.default.localAudioPara) {
    _JsMediaEngine_Variables.default.localAudioPara = param;
  } else {
    (0, _assign.default)(_JsMediaEngine_Variables.default.localAudioPara, param);
  }

  Set_Audio_WebSocket_Ip_Address(websocketUrl);
}
/**
 *
 * @param websocketUrl
 * @param param {Object}  key-value-pair
 */


function setVideoEngineInitProperties(websocketUrl, param) {
  if (!_JsMediaEngine_Variables.default.localVideoPara) {
    _JsMediaEngine_Variables.default.localVideoPara = param;
  } else {
    (0, _assign.default)(_JsMediaEngine_Variables.default.localVideoPara, param);
  }

  Set_Video_WebSocket_Ip_Address(websocketUrl);
}

function Set_Audio_WebSocket_Ip_Address(websocket_ip_address) {
  if (!_JsMediaEngine_Variables.default.Audio_WebSocket_Ip_Address) {
    _JsMediaEngine_Variables.default.Audio_WebSocket_Ip_Address = websocket_ip_address;
  }
}

function Set_Sharing_WebSocket_Ip_Address(websocket_ip_address) {
  if (!_JsMediaEngine_Variables.default.Sharing_WebSocket_Ip_Address) {
    _JsMediaEngine_Variables.default.Sharing_WebSocket_Ip_Address = websocket_ip_address;
  }
}

function Set_Video_WebSocket_Ip_Address(websocket_ip_address) {
  if (!_JsMediaEngine_Variables.default.Video_WebSocket_Ip_Address) {
    _JsMediaEngine_Variables.default.Video_WebSocket_Ip_Address = websocket_ip_address;
  }
}

function JsAudioEngine_UnInit() {
  Delete_Audio_Encode_Thread(_JsMediaEngine_Variables.default.SPECIAL_ID);
  Delete_Audio_Decode_Thread(_JsMediaEngine_Variables.default.SPECIAL_ID); //todo
  //Dose this leak memory?

  _JsMediaEngine_Variables.default.localAudioDecMGR = null;
  _JsMediaEngine_Variables.default.localAudioEncMGR = null;
}

function JsVideoEngine_UnInit() {
  // Delete_Video_Encode_Thread(jsMediaEngineVariables.SPECIAL_ID);
  Delete_Video_Decode_Thread(_JsMediaEngine_Variables.default.SPECIAL_ID); //todo
  //Dose this leak memory?

  _JsMediaEngine_Variables.default.localVideoDecMGR = null;
  _JsMediaEngine_Variables.default.localVideoEncMGR = null;
}

function JsSharingEngine_UnInit() {
  Delete_Sharing_Decode_Thread();
}

function Delete_Sharing_Decode_Thread() {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localSharingDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localSharingDecMGR.Get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'closeMedia' //websocket keepalive, keep handle,

      });
      _JsMediaEngine_Variables.default.localSharingDecMGR = null;
    }

    _JsMediaEngine_Variables.default.isSharingDecodeThreadStart = false;
  }
}

function Float32ArrayToInt16Array(float32) {
  var local;
  var i = 0;

  for (i = 0; i < float32.length; i++) {
    if (_JsMediaEngine_Variables.default.int16Array === null) {
      _JsMediaEngine_Variables.default.int16Array = new Int16Array(float32.length);
    }

    local = float32[i] * 32768;

    if (float32[i] > 32767) {
      local = 32767;
    } else if (float32[i] < -32768) {
      local = -32768;
    }

    _JsMediaEngine_Variables.default.int16Array[i] = local;
  }

  return _JsMediaEngine_Variables.default.int16Array;
}

function Uint8ToString(u8a) {
  var CHUNK_SZ = 0x8000;
  var c = [];

  for (var i = 0; i < u8a.length; i += CHUNK_SZ) {
    c.push(String.fromCharCode.apply(null, u8a.subarray(i, i + CHUNK_SZ)));
  }

  return c.join("");
}

function Audio_Encode_Frame(ssrc, pcm_data, length, time_stamp) {
  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID; // if (jsMediaEngineVariables.audio_pcm_queue) {
  //     jsMediaEngineVariables.audio_pcm_queue.enqueue({
  //         command: 'EncodeAudioFrame',
  //         data: pcm_data
  //     });
  //     if (!jsMediaEngineVariables.audioPostInterval) {
  //         jsMediaEngineVariables.audioPostInterval = setInterval(Start_PostMessage_Audio_Pcm, 10);
  //     }
  // }

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      var data = {
        command: "EncodeAudioFrame",
        data: pcm_data
      };
      handle.postMessage(data, [data.data.buffer]);
    }
  }
}

function Video_Encode_Frame(ssrc, video_data, length, time_stamp) {
  if (_JsMediaEngine_Variables.default.localVideoEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localVideoEncMGR.map.get(ssrc);

    if (handle) {
      var data = {
        command: "encodeVideoFrame",
        data: video_data
      };
      handle.postMessage(data, [data.data.buffer]);
    }
  }
}

function Sharing_Encode_Frame(ssrc, sharing_data, length, time_stamp, width, height) {
  // debugger
  if (_JsMediaEngine_Variables.default.localSharingEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localSharingEncMGR.map.get(ssrc);

    if (handle) {
      var data;

      if (sharing_data) {
        data = {
          command: "encodeSharingFrame",
          data: sharing_data,
          width: width,
          height: height
        };
        handle.postMessage(data, [data.data.buffer]);
      } else {
        data = {
          command: "encodeSharingFrame"
        };
        handle.postMessage(data);
      }
    }
  }
}

function Int16ToFloat32(inputArray, startIndex, length) {
  var output = new Float32Array(inputArray.length - startIndex);

  for (var i = startIndex; i < length; i++) {
    var int_ = inputArray[i]; // If the high bit is on, then it is a negative number, and actually counts backwards.
    // output[i] = ((int_ + 32768) % 65536 - 32768) / 32768.0

    var float_ = int_ / 32768.0;
    if (float_ > 1) float_ = 1;
    if (float_ < -1) float_ = -1;
    output[i] = float_;
  }

  return output;
}

function Uint8ToFloat32(uint8Array_) {
  var int16Array_ = new Int16Array(uint8Array_.length / 2);

  for (var i = 0; i < int16Array_.length; i++) {
    int16Array_[i] = (uint8Array_[i * 2] & 0xff) + ((uint8Array_[i * 2 + 1] & 0xff) << 8);
  }

  return Int16ToFloat32(int16Array_, 0, int16Array_.length);
}

function Put_Sharing_Data_Buffer(message) {
  if (_JsMediaEngine_Variables.default.localSharingDecMGR) {
    if (message.type == "sharingPara") {
      _Monitor.default.add_monitor("SHPA");

      _pubSub.default.publish(jsEvent.SHARING_PARAM_INFO_FROM_SOCKET, message.data);

      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.SHARING_PARA, message.data);
    }

    if (_JsMediaEngine_Variables.default.isSharingPlayWork) {
      _JsMediaEngine_Variables.default.localSharingDecMGR.PutData(message);
    }
  }
}

var DIFF_DEBUG_COUNT = 0;

function Put_Video_Frame_Buffer(ssrc, buffer, time_stamp, video_width, video_heigth, shift_x, shift_y, shift_w, shift_h, rotation, yuv_limited) {
  // ssrc = jsMediaEngineVariables.SPECIAL_ID;
  if (!_JsMediaEngine_Variables.default.isVideoPlayWork) {
    return;
  }

  var message = {
    yuvdata: buffer,
    ntptime: time_stamp,
    ssrc: ssrc,
    width: video_width,
    height: video_heigth,
    r_x: shift_x,
    r_y: shift_y,
    r_w: shift_w,
    r_h: shift_h,
    rotation: rotation,
    yuv_limited: yuv_limited
  };

  _JsMediaEngine_Variables.default.mediaSDKHandle.VideoRenderObj.Get_Video_Data_From_Queue(message);
}

function Put_Sharing_Frame_Buffer(ssrc, buffer, time_stamp, sharing_width, sharing_heigth, shift_x, shift_y, shift_w, shift_h, logic_w, logic_h, yuv_limited) {
  if (!_JsMediaEngine_Variables.default.isSharingPlayWork) {
    return;
  }

  var message = {
    yuvdata: buffer,
    ntptime: time_stamp,
    ssrc: ssrc,
    width: sharing_width,
    height: sharing_heigth,
    r_x: shift_x,
    r_y: shift_y,
    r_w: shift_w,
    r_h: shift_h,
    logic_w: logic_w,
    logic_h: logic_h,
    yuv_limited: yuv_limited
  };

  _JsMediaEngine_Variables.default.mediaSDKHandle.SharingRenderObj.Get_Sharing_Data_From_Queue(message);
}

function Put_Mouse_Data_Buffer(ssrc, buffer, time_stamp, mouse_width, mouse_heigth, shift_x, shift_y, mLogic_w, mLogic_h, sync_id) {
  if (!_JsMediaEngine_Variables.default.isSharingPlayWork) {
    return;
  }

  var message = {
    buffer: buffer,
    ntptime: time_stamp,
    ssrc: ssrc,
    width: mouse_width,
    height: mouse_heigth,
    r_x: shift_x,
    r_y: shift_y,
    mLogic_w: mLogic_w,
    mLogic_h: mLogic_h,
    sync_id: sync_id
  };

  _JsMediaEngine_Variables.default.mediaSDKHandle.SharingRenderObj.Get_Mouse_Data_From_Queue(message);
}

function Put_Audio_Frame_Buffer(ssrc, buffer, time_stamp) {
  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (!_JsMediaEngine_Variables.default.isAudioPlayWork) {
    return;
  }

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    var ssrcqueue_ = _JsMediaEngine_Variables.default.localAudioDecMGR.AudioQueueMGR.GetQueue(ssrc); // need special ssrc, as audio had been Mixed.


    if (!ssrcqueue_) {
      ssrcqueue_ = _JsMediaEngine_Variables.default.localAudioDecMGR.AudioQueueMGR.AddQueue(ssrc);
    } // buffer = Uint8ToFloat32(buffer);


    if (time_stamp) {
      var timemap = new _map.default();
      var numberOfSSRC = time_stamp.length / 12;
      var index = 0;
      var i = 0;

      for (index = 0; index < numberOfSSRC; index++) {
        var ssrc = 0;

        for (i = index * 12 + 0; i < index * 12 + 4; i++) {
          ssrc += time_stamp[i] * Math.pow(256, i - index * 12);
        }

        ssrc = ssrc >> 10;
        var ts = 0;

        for (i = index * 12 + 4; i < index * 12 + 12; i++) {
          ts += time_stamp[i] * Math.pow(256, i - index * 12 - 4);
        }

        timemap.set(ssrc, ts);
      }

      var message = {
        buffer: buffer,
        ntptime: timemap
      };
    } else {
      var message = {
        buffer: buffer,
        ntptime: null
      };
    }

    ssrcqueue_.enqueue(message);
    var audioqueuelength = Get_Decoded_Audio_Buffer_Length(ssrc);
    if (audioqueuelength > _JsMediaEngine_Variables.default.audioBufferSize + 2) log("the length is " + audioqueuelength);

    if (audioqueuelength > 50) {
      var diff = audioqueuelength - _JsMediaEngine_Variables.default.audioBufferSize;

      while (diff >= 0) {
        Delete_Decoded_Audio_Frame(ssrc);
        diff--;
      }
    } else if (audioqueuelength > _JsMediaEngine_Variables.default.audioBufferSize) {
      var handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

      if (handle) {
        handle.postMessage({
          command: 'delay'
        });
      }
    }
  }
}

function Clear_Decoded_Sharing_Frame() {
  if (_JsMediaEngine_Variables.default.localSharingDecMGR) {
    return _JsMediaEngine_Variables.default.localSharingDecMGR.SharingQueueMGR.ClearQueue();
  }

  if (_JsMediaEngine_Variables.default.localMouseDecMGR) {
    return _JsMediaEngine_Variables.default.localMouseDecMGR.SharingQueueMGR.ClearQueue();
  }

  return 0;
}

function Get_Decoded_Audio_Buffer_Length(ssrc) {
  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    return _JsMediaEngine_Variables.default.localAudioDecMGR.AudioQueueMGR.GetQueueLength(ssrc);
  }

  return 0;
}

function Update_Audio_SSRC_Time(timemap) {
  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    _JsMediaEngine_Variables.default.localAudioDecMGR.UpdateSSRCTimeMap(timemap);
  }
}

function Delete_Decoded_Audio_Frame(ssrc) {
  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (!_JsMediaEngine_Variables.default.localAudioDecMGR) {
    return;
  }

  var ssrc_queue_ = _JsMediaEngine_Variables.default.localAudioDecMGR.AudioQueueMGR.GetQueue(ssrc);

  if (ssrc_queue_) {
    var data_node = ssrc_queue_.dequeue();
    return data_node;
  }

  return null;
}

function Get_Decoded_Audio_Frame(ssrc, time_stamp, Audio_Node_Buffer_Size) {
  if (!_JsMediaEngine_Variables.default.localAudioDecMGR) {
    return;
  }

  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;
  var audio_length = Audio_Node_Buffer_Size;

  var ssrc_queue = _JsMediaEngine_Variables.default.localAudioDecMGR.AudioQueueMGR.GetQueue(ssrc);

  var audio_data = null; //var Allocate_Buffer = new Float32Array(Audio_Node_Buffer_Size);

  if (ssrc_queue) {
    if (ssrc_queue.residue) {
      if (ssrc_queue.residue.buffer.length > Audio_Node_Buffer_Size) {
        // let local_residue_length = ssrc_queue.residue.buffer.length;
        audio_data = ssrc_queue.residue.buffer.slice(0, Audio_Node_Buffer_Size);
        ssrc_queue.residue.buffer = ssrc_queue.residue.buffer.slice(Audio_Node_Buffer_Size);
        Update_Audio_SSRC_Time(ssrc_queue.residue.ntptime);
        return audio_data;
      } else if (ssrc_queue.residue.buffer.length === Audio_Node_Buffer_Size) {
        audio_data = ssrc_queue.residue.buffer;
        Update_Audio_SSRC_Time(ssrc_queue.residue.ntptime);
        ssrc_queue.residue = null;
        return audio_data;
      } else {
        audio_data = ssrc_queue.residue.buffer;
        Update_Audio_SSRC_Time(ssrc_queue.residue.ntptime);
        ssrc_queue.residue = null;
        Audio_Node_Buffer_Size = Audio_Node_Buffer_Size - audio_data.length;
      }
    }

    var data_node = ssrc_queue.dequeue();

    while (data_node && data_node.buffer.length < Audio_Node_Buffer_Size) {
      Update_Audio_SSRC_Time(data_node.ntptime);
      audio_data = Float32Concat(audio_data, data_node.buffer);
      Audio_Node_Buffer_Size = Audio_Node_Buffer_Size - data_node.buffer.length;
      data_node = ssrc_queue.dequeue();
    }

    if (data_node) {
      Update_Audio_SSRC_Time(data_node.ntptime);

      if (Audio_Node_Buffer_Size !== 0 && data_node.buffer.length === Audio_Node_Buffer_Size) {
        audio_data = Float32Concat(audio_data, data_node.buffer);
      } else if (Audio_Node_Buffer_Size !== 0 && data_node.buffer.length > Audio_Node_Buffer_Size) {
        audio_data = Float32Concat(audio_data, data_node.buffer.slice(0, Audio_Node_Buffer_Size));
        ssrc_queue.residue = {
          buffer: data_node.buffer.slice(Audio_Node_Buffer_Size),
          ntptime: data_node.ntptime
        };
      }
    }

    if (audio_data) {
      if (audio_data.length < audio_length) {
        ssrc_queue.residue = {
          buffer: audio_data,
          ntptime: null
        };
        return null;
      } else if (audio_data.length == audio_length) {
        return audio_data;
      }
    }
  }

  return null;
}

function Video_Decode_Post_message() {
  if (!_JsMediaEngine_Variables.default.localVideoDecMGR) {
    return;
  }

  var handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

  if (handle && _JsMediaEngine_Variables.default.isVideoDecodeWASMOK && !_JsMediaEngine_Variables.default.isVideoDecodePostStart && _JsMediaEngine_Variables.default.localVideoPara) {
    handle.postMessage({
      command: 'startMedia',
      websocket_ip_address: _JsMediaEngine_Variables.default.Video_WebSocket_Ip_Address + "&mode=5",
      confId: _JsMediaEngine_Variables.default.localVideoPara.confId,
      confKey: "",
      logon: _JsMediaEngine_Variables.default.localVideoPara.logon,
      mtu_size: 0,
      meetingid: _JsMediaEngine_Variables.default.localVideoPara.meetingid,
      meetingnumb: _JsMediaEngine_Variables.default.localVideoPara.meetingnumb,
      multiThreadNum: 1
    });
    _JsMediaEngine_Variables.default.isVideoDecodePostStart = true;
  } else if (!_JsMediaEngine_Variables.default.isVideoDecodePostStart) {
    setTimeout(Video_Decode_Post_message, 100);
  }
}

function Add_Video_Decode_Thread(ssrc, ip_address, sdkInstance, workerParameters) {
  if (sdkInstance && sdkInstance.isDestroy) {
    return log("WorkerType:videoDec;The relative SDK instance is destroy, don't start relative worker, avoid multiple same workers. ");
  }

  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (!_JsMediaEngine_Variables.default.localVideoDecMGR) {
    return;
  }

  if (_JsMediaEngine_Variables.default.isVideoDecodeThreadStart) {
    setTimeout(Video_Decode_Post_message, 100);
  } else {
    _JsMediaEngine_Variables.default.isVideoDecodeThreadStart = true;

    if (_JsMediaEngine_Variables.default.videoDecWorkerPath != "") {
      WorkerStart(workerParameters, _JsMediaEngine_Variables.default.localVideoDecMGR, VideoDec_Listener, _CommonEnums.WORKER_TYPE.VIDEO_DECODE, sdkInstance);
    } else {
      console.error("Worker Path Error!");
      return;
    }
  }
}

function Video_Encode_Post_message() {
  if (!_JsMediaEngine_Variables.default.localVideoEncMGR) {
    return;
  }

  var handle = _JsMediaEngine_Variables.default.localVideoEncMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

  if (handle && _JsMediaEngine_Variables.default.isVideoEncodeWASMOK && !_JsMediaEngine_Variables.default.isVideoEncodePostStart && _JsMediaEngine_Variables.default.localVideoPara) {
    var mtu_size = 0;

    if (_util.default.browserType.browser === "firefox") {
      mtu_size = 1080;
    } else {
      mtu_size = 1070;
    }

    _JsMediaEngine_Variables.default.mediaSDKHandle.mtu_size = mtu_size;
    var iv = null;

    if (_JsMediaEngine_Variables.default.ivObj) {
      iv = _JsMediaEngine_Variables.default.ivObj[_CommonEnums.WORKER_TYPE.VIDEO_ENCODE]; // if modify {@link util.stringSplitByComma2Buffer),
      // must also modify {@link util.buffer2stringSplitByComma}

      iv = _util.default.stringSplitByComma2Buffer(iv);
    }

    handle.postMessage({
      command: 'startMedia',
      websocket_ip_address: _JsMediaEngine_Variables.default.Video_WebSocket_Ip_Address + "&mode=2",
      confId: _JsMediaEngine_Variables.default.localVideoPara.confId,
      confKey: "",
      logon: _JsMediaEngine_Variables.default.localVideoPara.logon,
      sendvideo: true,
      isChromeOrEdge: _util.default.browser.isEdge || _util.default.browser.isChrome,
      mtu_size: mtu_size,
      meetingid: _JsMediaEngine_Variables.default.localVideoPara.meetingid,
      meetingnumb: _JsMediaEngine_Variables.default.localVideoPara.meetingnumb,
      multiThreadNum: 1,
      iv: iv
    });
    _JsMediaEngine_Variables.default.isVideoEncodePostStart = true;
  } else if (!_JsMediaEngine_Variables.default.isVideoEncodePostStart) {
    setTimeout(Video_Encode_Post_message, 100);
  }
}

function Add_Video_Encode_Thread(ssrc, ip_address, sdkInstance, workerParameters) {
  if (sdkInstance && sdkInstance.isDestroy) {
    return log("WorkerType:videoEnc;The relative SDK instance is destroy, don't start relative worker, avoid multiple same workers. ");
  }

  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (!_JsMediaEngine_Variables.default.localVideoEncMGR) {
    return;
  }

  if (!_JsMediaEngine_Variables.default.isVideoEncodeThreadStart) {
    _JsMediaEngine_Variables.default.isVideoEncodeThreadStart = true;
    WorkerStart(workerParameters, _JsMediaEngine_Variables.default.localVideoEncMGR, VideoEnc_Listener, _CommonEnums.WORKER_TYPE.VIDEO_ENCODE, sdkInstance);
  }
}

function Delete_Video_Decode_Thread(ssrc) {
  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localVideoDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'closeMedia'
      });

      _JsMediaEngine_Variables.default.localVideoDecMGR.map.delete(ssrc);
    }

    _JsMediaEngine_Variables.default.isVideoDecodePostStart = false;
  }
}

function downloadBlob(data, fileName, mimeType) {
  var blob, url;
  blob = new Blob([data], {
    type: mimeType
  });
  url = window.URL.createObjectURL(blob);
  downloadURL(url, fileName, mimeType);
  setTimeout(function () {
    return window.URL.revokeObjectURL(url);
  }, 1000);
}

;

function downloadURL(data, fileName) {
  var a;
  a = document.createElement('a');
  a.href = data;
  a.download = fileName;
  document.body.appendChild(a);
  a.style = 'display: none';
  a.click();
  a.remove();
}

;

function Clear_Audio_Interval() {
  Start_PostMessage_Audio_Pcm();
  clearInterval(_JsMediaEngine_Variables.default.audioPostInterval);
  _JsMediaEngine_Variables.default.audioPostInterval = null;
}

function Start_PostMessage_Audio_Pcm() {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (!_JsMediaEngine_Variables.default.localAudioEncMGR) {
    return;
  }

  var data = _JsMediaEngine_Variables.default.audio_pcm_queue.dequeue();

  while (data) {
    var audio_encode_handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (_JsMediaEngine_Variables.default.isAudioEncodeWASMOK && audio_encode_handle) {
      audio_encode_handle.postMessage(data, [data.data.buffer]); //use transferable object;
    } // log("PostMessage :"+ (new Date().getTime() - now));


    data = _JsMediaEngine_Variables.default.audio_pcm_queue.dequeue();
  }
}

function Audio_Decode_Post_message() {
  if (!_JsMediaEngine_Variables.default.localAudioDecMGR) {
    return;
  }

  var handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

  if (_JsMediaEngine_Variables.default.localAudioPara && handle && _JsMediaEngine_Variables.default.isAudioDecodeWASMOK && !_JsMediaEngine_Variables.default.isAudioDecodePostStart) {
    handle.postMessage({
      command: 'startMedia',
      websocket_ip_address: _JsMediaEngine_Variables.default.Audio_WebSocket_Ip_Address + "&mode=5",
      sampleRate: _JsMediaEngine_Variables.default.localAudioPara.sampleRate,
      userid: _JsMediaEngine_Variables.default.localAudioPara.userid,
      logon: _JsMediaEngine_Variables.default.localAudioPara.logon,
      isEdge: _util.default.browser.isEdge,
      decode: 1,
      meetingid: _JsMediaEngine_Variables.default.localAudioPara.meetingid,
      meetingnumb: _JsMediaEngine_Variables.default.localAudioPara.meetingnumb
    });

    if (_JsMediaEngine_Variables.default.sharedBuffer) {
      try {
        // Try new API (clone)
        handle.postMessage({
          command: 'sharedBuffer',
          data: _JsMediaEngine_Variables.default.sharedBuffer
        });
      } catch (e) {
        // Fall back to old API (transfer)
        handle.postMessage({
          command: 'sharedBuffer',
          data: _JsMediaEngine_Variables.default.sharedBuffer
        }, [_JsMediaEngine_Variables.default.sharedBuffer]);
      }
    }

    _JsMediaEngine_Variables.default.isAudioDecodePostStart = true;
  } else if (!_JsMediaEngine_Variables.default.isAudioDecodePostStart) {
    setTimeout(Audio_Decode_Post_message, 100);
  }
}

function Add_Audio_Decode_Thread(ssrc, user_id, sdkInstance, workerParameters) {
  if (sdkInstance && sdkInstance.isDestroy) {
    return log("WorkerType:audioDec;The relative SDK instance is destroy, don't start relative worker, avoid multiple same workers. ");
  }

  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (!_JsMediaEngine_Variables.default.localAudioDecMGR) {
    return;
  }

  if (!_JsMediaEngine_Variables.default.isAudioDecodeThreadStart) {
    _JsMediaEngine_Variables.default.isAudioDecodeThreadStart = true;
    WorkerStart(workerParameters, _JsMediaEngine_Variables.default.localAudioDecMGR, AudioDec_Listener, _CommonEnums.WORKER_TYPE.AUDIO_DECODE, sdkInstance);
  }
}

function Get_SSRC_Latest_Time(ssrc) {
  ssrc = ssrc >> 10;

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    var localtime = _JsMediaEngine_Variables.default.localAudioDecMGR.GetSSRCTimeMap(ssrc);

    if (localtime === null) {
      return 0;
    } else {
      return localtime;
    }
  }
}

function Get_Video_SSRC_Latest_Time(ssrc) {
  var timestamp;

  if (typeof AudioWorklet === 'function') {
    timestamp = _JsMediaEngine_Variables.default.CurrentSSRCTime;
  } else {
    timestamp = Get_SSRC_Latest_Time(ssrc);
  }

  return timestamp;
}

function Delete_Audio_Decode_Thread(ssrc) {
  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

    if (handle) {
      handle.postMessage({
        command: 'closeMedia' //websocket keepalive, keep handle,

      });

      _JsMediaEngine_Variables.default.localAudioDecMGR.map.delete(ssrc);
    }

    _JsMediaEngine_Variables.default.isAudioDecodePostStart = false;
  }
}

function Meeting_Fail_Over(audio_websocket_address, video_websocket_address) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  var handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(ssrc);

  handle.postMessage({
    command: 'failover',
    websocket_ip_address: video_websocket_address
  });
  handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(ssrc);
  handle.postMessage({
    command: 'failover',
    websocket_ip_address: audio_websocket_address
  });
}

function Audio_Encode_Post_message() {
  var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(_JsMediaEngine_Variables.default.SPECIAL_ID);

  if (_JsMediaEngine_Variables.default.localAudioPara && handle && _JsMediaEngine_Variables.default.isAudioEncodeWASMOK && !_JsMediaEngine_Variables.default.isAudioEncodePostStart) {
    var iv = null;

    if (_JsMediaEngine_Variables.default.ivObj) {
      iv = _JsMediaEngine_Variables.default.ivObj[_CommonEnums.WORKER_TYPE.AUDIO_ENCODE]; // if modify {@link util.stringSplitByComma2Buffer),
      // must also modify {@link util.buffer2stringSplitByComma}

      iv = _util.default.stringSplitByComma2Buffer(iv);
    }

    handle.postMessage({
      command: 'startMedia',
      websocket_ip_address: _JsMediaEngine_Variables.default.Audio_WebSocket_Ip_Address + "&mode=2",
      sampleRate: _JsMediaEngine_Variables.default.localAudioPara.sampleRate,
      userid: _JsMediaEngine_Variables.default.localAudioPara.userid,
      encode: 1,
      meetingid: _JsMediaEngine_Variables.default.localAudioPara.meetingid,
      meetingnumb: _JsMediaEngine_Variables.default.localAudioPara.meetingnumb,
      iv: iv
    });

    if (_JsMediaEngine_Variables.default.sharedBuffer) {
      try {
        // Try new API (clone)
        handle.postMessage({
          command: 'sharedBuffer',
          data: _JsMediaEngine_Variables.default.sharedBuffer
        });
      } catch (e) {
        // Fall back to old API (transfer)
        handle.postMessage({
          command: 'sharedBuffer',
          data: _JsMediaEngine_Variables.default.sharedBuffer
        }, [_JsMediaEngine_Variables.default.sharedBuffer]);
      }
    }

    _JsMediaEngine_Variables.default.isAudioEncodePostStart = true;
  } else {
    setTimeout(Audio_Encode_Post_message, 100);
  }
}

function Add_Audio_Encode_Thread(ssrc, sdkInstance, workerParameters) {
  if (sdkInstance && sdkInstance.isDestroy) {
    return log("WorkerType:audioEnc;The relative SDK instance is destroy, don't start relative worker, avoid multiple same workers. ");
  }

  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (!_JsMediaEngine_Variables.default.isAudioEncodeThreadStart) {
    _JsMediaEngine_Variables.default.isAudioEncodeThreadStart = true;
    WorkerStart(workerParameters, _JsMediaEngine_Variables.default.localAudioEncMGR, AudioEnc_Listener, _CommonEnums.WORKER_TYPE.AUDIO_ENCODE, sdkInstance);
  }
}

function Modify_Audio_SampleRate(sampleRate) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  var data = _JsMediaEngine_Variables.default.audio_pcm_queue.dequeue();

  while (data) {
    data = _JsMediaEngine_Variables.default.audio_pcm_queue.dequeue();
  }

  var handle;

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      if (_JsMediaEngine_Variables.default.isAudioEncodePostStart) {
        handle.postMessage({
          command: 'modifySampleRate',
          sampleRate: sampleRate
        });
      }
    }
  }

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(ssrc);

    if (handle) {
      if (_JsMediaEngine_Variables.default.isAudioDecodePostStart) {
        handle.postMessage({
          command: 'modifySampleRate',
          sampleRate: sampleRate
        });
      }
    }
  }
}

function Delete_Audio_Encode_Thread(ssrc) {
  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'closeMedia'
      });

      _JsMediaEngine_Variables.default.localAudioEncMGR.map.delete(ssrc);
    }

    _JsMediaEngine_Variables.default.isAudioEncodePostStart = false;
  }
}

function Notify_Audio_Thread_Status(ssrc, status) {
  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'mute',
        bOn: status
      });
    }
  }

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'mute',
        bOn: status
      });
    }
  }
}

function Notify_Audio_Thread_Msg_Channel(decode, encode) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'decodeAudioPort'
      }, [decode.port2]);
    }
  }

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'encodeAudioPort'
      }, [encode.port1]);
    }
  }
}

function Notify_Audio_Thread_Msg_Channel2(decode) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'decodeAudioPort2'
      }, [decode.port2]);
    }
  }
}

function Notify_Audio_Video_Thread_Msg_Channel(decode) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localVideoDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'decodeVideoPortWithAudio',
        port: decode.port1
      }, [decode.port1]);
    }
  }
}

function Notify_Video_Encode_Thread(para) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localVideoEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localVideoEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage(para);
    }
  }
}

function Notify_Video_Decode_Thread(para) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localVideoDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage(para);
    }
  }
}

function Notify_Sharing_Decode_Thread(para) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localSharingDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localSharingDecMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage(para);
    }
  }
}

function Notify_Audio_Thread_CurrentSSRC(currentSSRC) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioDecMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioDecMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'updateCurrentSSRC',
        SSRC: currentSSRC
      });
    }
  }
}

function Notify_Audio_Encode_Thread(para) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage(para);
    }
  }
}

function Reset_Aec() {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'resetAec'
      });
    }
  }
}

function Set_Aec_Delay() {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;
  var delay = 20;

  if (_JsMediaEngine_Variables.default.audioDelay) {
    delay = _JsMediaEngine_Variables.default.audioDelay;
  }

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: 'SetAECDelay',
        delay: delay
      });
    }
  }
}

function CurentTime() {
  var now = new Date();
  var year = now.getFullYear();
  var month = now.getMonth() + 1;
  var day = now.getDate();
  var hh = now.getHours();
  var mm = now.getMinutes();
  var second = now.getSeconds();
  var mill = now.getMilliseconds();
  var clock = "";
  if (month < 10) clock += "0";
  clock += month + "/";
  if (day < 10) clock += "0";
  clock += day + "/";
  clock += year + " ";
  if (hh < 10) clock += "0";
  clock += hh + ":";
  if (mm < 10) clock += '0';
  clock += mm + ":";
  if (second < 10) clock += '0';
  clock += second + ":";
  if (mill < 100) clock += '0';else if (mill < 10) clock += '00';
  clock += mill;
  return clock;
}

function Monitor_Slim(log, numb) {
  if (numb <= 0) {
    return log;
  }

  var index = 0;

  for (; index < numb - 1; index++) {
    log += ",";
  }

  log += ",0";
  return log;
}

function _listenWindowErrorEvent(ev) {
  try {
    if (_Monitor.default && ev) {
      var logRawData = ["ERR:", ev.message, "f"].join("");

      var returnObj = _Monitor.default.checkIsNecessaryExceptionLogAndReturnRepeatTimes(logRawData);

      if (returnObj.isNecessary) {
        log("error repeat ".concat(returnObj.repeatNumber), logRawData);

        _Monitor.default.add_monitor(logRawData + "(repeat:".concat(returnObj.repeatNumber, ")"));
      } else {
        log("error but ignore", ev.message);
      }
    }
  } catch (ex) {
    log("_listenWindowErrorEvent error", ex);
  }
}

function listenWindowErrorEvent() {
  window.addEventListener("error", _listenWindowErrorEvent);
}

function removeWindowErrorEventListener() {
  window.removeEventListener("error", _listenWindowErrorEvent);
}

function saveBrowserInfo() {
  try {
    _Monitor.default.add_monitor(["BSAGT:", navigator.userAgent].join(""));

    _Monitor.default.add_monitor("BSLITEND:" + (_util.default.isLittleEndian() ? 1 : 0));

    if (window.navigator.hardwareConcurrency) {
      _Monitor.default.add_monitor("OSCPUS:" + window.navigator.hardwareConcurrency);
    }
  } catch (ex) {}
}

function Start_Monitor() {
  // log("Start_Monitor")
  _Monitor.default.init();

  listenWindowErrorEvent();
  saveBrowserInfo();
  _JsMediaEngine_Variables.default.monitorIntervalHandle = setInterval(function () {
    var zm = _Monitor.default.get_monitor();

    if (zm) {
      _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
        "evt": 4167,
        "seq": 1,
        "body": {
          "data": zm
        }
      });
    }

    if (_JsMediaEngine_Variables.default.monitorAudioCapture == null && _JsMediaEngine_Variables.default.monitorEncodeVideo == null && _JsMediaEngine_Variables.default.monitorDecodeVideo == null && _JsMediaEngine_Variables.default.monitorVideoCapture == null && _JsMediaEngine_Variables.default.monitorEncodeSharing == null && _JsMediaEngine_Variables.default.monitorDecodeSharing == null && _JsMediaEngine_Variables.default.monitorSharingEncodeAPPInfo == null && _JsMediaEngine_Variables.default.monitorVideoDecodeAPPInfo == null && _JsMediaEngine_Variables.default.monitorVideoEncodeAPPInfo == null) {
      return;
    } // var now_time = CurentTime()
    // now_time = "";


    var monitor_buffer;
    {
      //monitorVideoCapture
      if (_JsMediaEngine_Variables.default.monitorVideoCapture != null) {
        monitor_buffer = "CAMERA," + _JsMediaEngine_Variables.default.monitorVideoUserID + ",0" + ",webcam" + "," + _JsMediaEngine_Variables.default.monitorVideoCapture; // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"

        monitor_buffer = Monitor_Slim(monitor_buffer, 7);
        monitor_buffer = monitor_buffer + ",{[END]}";

        _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
          "evt": 4167,
          "seq": 1,
          "body": {
            "data": monitor_buffer
          }
        });

        _JsMediaEngine_Variables.default.monitorVideoCapture = null; // console.error(monitor_buffer)
      }
    }
    {
      //monitorAudioCapture
      // monitor_buffer = now_time+" "
      if (_JsMediaEngine_Variables.default.monitorAudioCapture != null) {
        monitor_buffer = "AUDIOD," + _JsMediaEngine_Variables.default.monitorAudioUserID + ",1" // 0:Render 1: capture
        + ",0" + ",wclaudi" // audio device type
        + ",0" + "," + _JsMediaEngine_Variables.default.monitorAudioCapture + ",0"; // monitor_buffer = Monitor_Slim(monitor_buffer,3)

        monitor_buffer = monitor_buffer + ",{[END]}";

        _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
          "evt": 4167,
          "seq": 1,
          "body": {
            "data": monitor_buffer
          }
        });

        _JsMediaEngine_Variables.default.monitorAudioCapture = null; // console.error(monitor_buffer)
      }
    }

    if (!(_JsMediaEngine_Variables.default.monitorEncodeVideo == null && _JsMediaEngine_Variables.default.monitorDecodeVideo == null || _JsMediaEngine_Variables.default.monitorVideoUserID == null)) {
      {
        //video
        // export var monitorEncodeVideo = null;
        // export var monitorDecodeVideo = null;
        // export var monitorVideoCapture = null;
        // monitor_buffer =now_time+" "
        monitor_buffer = "MCM_VIDEO," //type
        + _JsMediaEngine_Variables.default.monitorVideoUserID //userid
        + ",0" // static performance
        + ",0" //active status (valid only for mobile
        + ",0"; //session option

        if (_JsMediaEngine_Variables.default.monitorEncodeVideo != null) {
          monitor_buffer = monitor_buffer + ",{[SEND]}" + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.monitor_video_max_sub_for_me //Max sub for me
          + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_width + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_height + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.max_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.min_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.avg_fps;
          monitor_buffer = Monitor_Slim(monitor_buffer, 12); // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"

          monitor_buffer = monitor_buffer + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_encoded_max_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_encoded_min_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_encoded_avg_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_encoded_width + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_encoded_heigth + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_total_encoded_frames + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.video_send_buffer;
        } else {
          monitor_buffer = monitor_buffer + ",{[SEND]}";
          monitor_buffer = Monitor_Slim(monitor_buffer, 25);
        }

        monitor_buffer += ",{[RTS]}"; // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"

        monitor_buffer = Monitor_Slim(monitor_buffer, 5);
        monitor_buffer = monitor_buffer + ",{[VC]}"; // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"

        monitor_buffer = Monitor_Slim(monitor_buffer, 12);

        if (_JsMediaEngine_Variables.default.monitorEncodeVideo != null) {
          monitor_buffer += ",{[ENCO]}" + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.monitor_video_max_encode_time + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.monitor_video_min_encode_time + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.monitor_video_avg_encode_time + "," + _JsMediaEngine_Variables.default.monitorEncodeVideo.monitor_video_sdev_encode_time;
        } else {
          monitor_buffer += ",{[ENCO]}";
          monitor_buffer = Monitor_Slim(monitor_buffer, 4);
        }

        if (_JsMediaEngine_Variables.default.monitorDecodeVideo != null) {
          monitor_buffer += ",{[RECV]}"; // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"

          monitor_buffer = Monitor_Slim(monitor_buffer, 16);
          monitor_buffer = monitor_buffer + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.max_fps + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.min_fps + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.avg_fps + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.video_width + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.video_height + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.monitor_video_max_size; // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"
          // +",0"

          monitor_buffer = Monitor_Slim(monitor_buffer, 5);
          monitor_buffer = monitor_buffer + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.monitor_video_max_size;
        } else {
          monitor_buffer += ",{[RECV]}";
          monitor_buffer = Monitor_Slim(monitor_buffer, 28);
        }

        monitor_buffer += ",{[VQ]}"; // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"
        // +",0"

        monitor_buffer = Monitor_Slim(monitor_buffer, 13);

        if (_JsMediaEngine_Variables.default.monitorDecodeVideo != null) {
          monitor_buffer += ",{[DECO]}" + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.monitor_video_max_decoding_time + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.monitor_video_min_decoding_time + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.monitor_video_avg_decoding_time + "," + _JsMediaEngine_Variables.default.monitorDecodeVideo.monitor_video_sdev_decoding_time;
        } else {
          monitor_buffer += ",{[DECO]}";
          monitor_buffer = Monitor_Slim(monitor_buffer, 4);
        }

        _JsMediaEngine_Variables.default.monitorDecodeVideo = null;
        _JsMediaEngine_Variables.default.monitorEncodeVideo = null;
        monitor_buffer = monitor_buffer + ",{[END]}"; // console.error(monitor_buffer)

        _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
          "evt": 4167,
          "seq": 1,
          "body": {
            "data": monitor_buffer
          }
        });
      }
    }

    if (!(_JsMediaEngine_Variables.default.monitorEncodeSharing == null && _JsMediaEngine_Variables.default.monitorDecodeSharing == null || _JsMediaEngine_Variables.default.monitorSharingUserID == null)) {
      //send sharing
      monitor_buffer = "MCM_AS," //type
      + _JsMediaEngine_Variables.default.monitorSharingUserID //userid
      + "," // static performance
      + ","; //session option

      if (_JsMediaEngine_Variables.default.monitorEncodeSharing) {
        {
          //SEND SCOPE
          monitor_buffer = monitor_buffer + ",{[SEND]}" + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_max_sub_for_me //Max sub for me
          + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_width + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_height + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.max_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.min_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.avg_fps + "," + "," + "," + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_encoded_max_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_encoded_min_fps + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_encoded_avg_fps + "," + "," + "," + "," + "," + "," + "," + "," + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_encode_total_frames + "," + "," + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.monitor_stream_index;
        } // {
        //     monitor_buffer = monitor_buffer
        //         +",{[VC]}"
        // }

        {
          monitor_buffer = monitor_buffer + ",{[ENCO]}" + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_max_encoding_time + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_min_encoding_time + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_avg_encoding_time + "," + _JsMediaEngine_Variables.default.monitorEncodeSharing.sharing_sdev_encoding_time;
        } // {
        //     monitor_buffer = monitor_buffer
        //         +",{[RECV_INDEX]}"
        //     monitor_buffer = Monitor_Slim(monitor_buffer,14)
        //
        // }
        // {
        //     monitor_buffer = monitor_buffer
        //         +",{[RECV_INDEX]}"
        //     monitor_buffer = Monitor_Slim(monitor_buffer,14)
        // }
        // {
        //     monitor_buffer = monitor_buffer
        //         +",{[RECV_INDEX]}"
        //     monitor_buffer = Monitor_Slim(monitor_buffer,14)
        // }
        // {
        //     monitor_buffer = monitor_buffer
        //         +",{[VQ]}"
        //     monitor_buffer = Monitor_Slim(monitor_buffer,14)
        // }
        // {
        //     monitor_buffer = monitor_buffer
        //         +",{[VQ]}"
        //     monitor_buffer = Monitor_Slim(monitor_buffer,14)
        // }
        // {
        //     monitor_buffer = monitor_buffer
        //         +",{[VQ]}"
        //     monitor_buffer = Monitor_Slim(monitor_buffer,14)
        // }
        // {
        //     monitor_buffer = monitor_buffer
        //         +",{[DECO]}"
        //     monitor_buffer = Monitor_Slim(monitor_buffer,5)
        // }
        // {
        //     monitor_buffer = monitor_buffer
        //         +",{[DECO]}"
        //     monitor_buffer = Monitor_Slim(monitor_buffer,5)
        // }
      }

      if (_JsMediaEngine_Variables.default.monitorDecodeSharing) {
        monitor_buffer = monitor_buffer + ",{[RECV]}" + "," + _JsMediaEngine_Variables.default.monitorDecodeSharing.max_fps + "," + _JsMediaEngine_Variables.default.monitorDecodeSharing.min_fps + "," + _JsMediaEngine_Variables.default.monitorDecodeSharing.avg_fps + "," + _JsMediaEngine_Variables.default.monitorDecodeSharing.sharing_decode_width + "," + _JsMediaEngine_Variables.default.monitorDecodeSharing.sharing_decode_height + "," + _JsMediaEngine_Variables.default.monitorDecodeSharing.monitor_sharing_max_size;
      }

      _JsMediaEngine_Variables.default.monitorEncodeSharing = null;
      _JsMediaEngine_Variables.default.monitorDecodeSharing = null;
      monitor_buffer = monitor_buffer + ",{[END]}";

      _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
        "evt": 4167,
        "seq": 1,
        "body": {
          "data": monitor_buffer
        }
      });
    }

    if (_JsMediaEngine_Variables.default.monitorSharingEncodeAPPInfo != null) {
      _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
        "evt": 4167,
        "seq": 1,
        "body": {
          "data": _JsMediaEngine_Variables.default.monitorSharingEncodeAPPInfo.data
        }
      });

      _JsMediaEngine_Variables.default.monitorSharingEncodeAPPInfo = null;
    }

    if (_JsMediaEngine_Variables.default.monitorVideoDecodeAPPInfo != null) {
      _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
        "evt": 4167,
        "seq": 1,
        "body": {
          "data": _JsMediaEngine_Variables.default.monitorVideoDecodeAPPInfo.data
        }
      });

      _JsMediaEngine_Variables.default.monitorVideoDecodeAPPInfo = null;
    }

    if (_JsMediaEngine_Variables.default.monitorVideoEncodeAPPInfo != null) {
      _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.MONITOR_LOG, {
        "evt": 4167,
        "seq": 1,
        "body": {
          "data": _JsMediaEngine_Variables.default.monitorVideoEncodeAPPInfo.data
        }
      });

      _JsMediaEngine_Variables.default.monitorVideoEncodeAPPInfo = null;
    }
  }, 1000 * 10);
}

function Send_Render_Monitor_Log(log) {
  _Monitor.default.add_monitor2(log);
}

function Stop_Monitor() {
  removeWindowErrorEventListener();
  clearInterval(_JsMediaEngine_Variables.default.monitorIntervalHandle);

  _Monitor.default.send_instant_monitor();
}

function Update_Video_Encrpt(value) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localVideoEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localVideoEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: "ENCRYPT",
        encrypt: value
      });
    }
  }
}

function Update_Sharing_Encrpt(value) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localSharingEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localSharingEncMGR.Get(ssrc);

    if (handle) {
      handle.postMessage({
        command: "ENCRYPT",
        encrypt: value
      });
    }
  }
}

function Update_Sharing_Encode_Status(value) {
  if (!_JsMediaEngine_Variables.default.localSharingEncMGR) {
    return;
  }

  var handle = _JsMediaEngine_Variables.default.localSharingEncMGR.Get(_JsMediaEngine_Variables.default.SPECIAL_ID);

  if (handle) {
    handle.postMessage(value);
  }
}

function Notify_Sharing_Encode_Thread(value) {
  if (!_JsMediaEngine_Variables.default.localSharingEncMGR) {
    return;
  }

  var handle = _JsMediaEngine_Variables.default.localSharingEncMGR.Get(_JsMediaEngine_Variables.default.SPECIAL_ID);

  if (handle) {
    handle.postMessage(value);
  }
}

function Update_Audio_Encrpt(value) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localAudioEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localAudioEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: "ENCRYPT",
        encrypt: value
      });
    }
  }
}

function disableSocketReconnect() {
  var id = _JsMediaEngine_Variables.default.SPECIAL_ID;
  var handlerList = [_JsMediaEngine_Variables.default.localAudioDecMGR, _JsMediaEngine_Variables.default.localAudioEncMGR, _JsMediaEngine_Variables.default.localVideoDecMGR, _JsMediaEngine_Variables.default.localVideoEncMGR, _JsMediaEngine_Variables.default.localSharingDecMGR, _JsMediaEngine_Variables.default.localSharingEncMGR];
  handlerList.forEach(function (item) {
    if (item && item.map.get(id)) {
      var handle = item.map.get(id);
      handle.postMessage({
        command: "SOCKET_RECONNECT",
        disable: true
      });
    }
  });
}

function destroyAllWorkers() {
  var id = _JsMediaEngine_Variables.default.SPECIAL_ID;
  var handlerList = [_JsMediaEngine_Variables.default.localAudioDecMGR, _JsMediaEngine_Variables.default.localAudioEncMGR, _JsMediaEngine_Variables.default.localVideoDecMGR, _JsMediaEngine_Variables.default.localVideoEncMGR, _JsMediaEngine_Variables.default.localSharingDecMGR, _JsMediaEngine_Variables.default.localSharingEncMGR];
  handlerList.forEach(function (item) {
    if (item && item.map.get(id)) {
      var handle = item.map.get(id);
      handle.terminate();
    }
  });
}

function onWorkerHandlerOK(workerType) {
  return new _promise.default(function (resolve, reject) {
    var tryIntervalMS = 500;
    var maxTry = 20 * 1000 / tryIntervalMS;
    var tryCount = 0;

    function foo() {
      tryCount++;

      if (tryCount >= maxTry) {
        return reject("Timeout. wait for worker ".concat(workerType, " to be ready."));
      }

      if (getHandle(workerType)) {
        resolve(getHandle(workerType));
      } else {
        setTimeout(foo, tryIntervalMS);
      }
    }

    foo();
  });
}
/**
 * @param workerType {WORKER_TYPE}
 * @returns worker {Worker} - instanse or null
 */


function getHandle(workerType) {
  var handlerMap = new _map.default();
  handlerMap.set(_CommonEnums.WORKER_TYPE.AUDIO_DECODE, _JsMediaEngine_Variables.default.localAudioDecMGR);
  handlerMap.set(_CommonEnums.WORKER_TYPE.AUDIO_ENCODE, _JsMediaEngine_Variables.default.localAudioEncMGR);
  handlerMap.set(_CommonEnums.WORKER_TYPE.VIDEO_DECODE, _JsMediaEngine_Variables.default.localVideoDecMGR);
  handlerMap.set(_CommonEnums.WORKER_TYPE.VIDEO_ENCODE, _JsMediaEngine_Variables.default.localVideoEncMGR);
  handlerMap.set(_CommonEnums.WORKER_TYPE.SHARING_DECODE, _JsMediaEngine_Variables.default.localSharingDecMGR);
  handlerMap.set(_CommonEnums.WORKER_TYPE.SHARING_ENCODE, _JsMediaEngine_Variables.default.localSharingEncMGR);
  var id = _JsMediaEngine_Variables.default.SPECIAL_ID;
  var handler = handlerMap.get(workerType);

  if (handler && handler.map.get(id)) {
    return handler.map.get(id);
  } else {
    return null;
  }
}
/**
 * @param workerType
 * @param message
 * @param command
 * @param transfer
 * @returns {Promise<void>}
 */


function pushMessageToWorker(_x23, _x24) {
  return _pushMessageToWorker.apply(this, arguments);
}

function _pushMessageToWorker() {
  _pushMessageToWorker = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee13(workerType, message) {
    var command,
        transfer,
        isWaitForWorkerOK,
        handle,
        _args13 = arguments;
    return _regenerator.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            command = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : "PUSH_MESSAGE_FROM_MAIN_TO_WORKER";
            transfer = _args13.length > 3 && _args13[3] !== undefined ? _args13[3] : false;
            isWaitForWorkerOK = _args13.length > 4 && _args13[4] !== undefined ? _args13[4] : false;
            _context13.prev = 3;
            handle = getHandle(workerType);

            if (handle) {
              _context13.next = 15;
              break;
            }

            if (isWaitForWorkerOK) {
              _context13.next = 11;
              break;
            }

            log("worker handle not ready, drop!", workerType, message, command);
            return _context13.abrupt("return");

          case 11:
            log.warn("worker handle not ready, waiting!", workerType, message, command);
            _context13.next = 14;
            return onWorkerHandlerOK(workerType);

          case 14:
            handle = _context13.sent;

          case 15:
            if (!transfer) {
              handle.postMessage({
                command: command,
                data: message
              });
            } else {
              handle.postMessage({
                command: command,
                data: message
              }, [message]);
            }

            _context13.next = 22;
            break;

          case 18:
            _context13.prev = 18;
            _context13.t0 = _context13["catch"](3);
            log.warn("try to push message to workerType:".concat(workerType, ", but it does not exist. Command: ").concat(command, "; Message: ").concat(message));
            log.warn(_context13.t0);

          case 22:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13, this, [[3, 18]]);
  }));
  return _pushMessageToWorker.apply(this, arguments);
}

function isVideoEncodeHandleReady() {
  return getHandle(_CommonEnums.WORKER_TYPE.VIDEO_ENCODE) !== null;
}

function transportOfflineCanvas(canvas, canvasname) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localVideoEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localVideoEncMGR.map.get(ssrc);

    if (handle) {
      handle.postMessage({
        command: "OfflineCanvas",
        canvas: canvas,
        canvasname: canvasname
      }, [canvas]);
    }
  }
}

function transportImageBitMap(canvas, data) {
  var ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

  if (_JsMediaEngine_Variables.default.localVideoEncMGR) {
    var handle = _JsMediaEngine_Variables.default.localVideoEncMGR.map.get(ssrc);

    if (handle) {
      if (data) {
        handle.postMessage({
          command: "imagebitmap",
          data: data,
          canvasname: canvas
        }, [data]);
      } else {
        handle.postMessage({
          command: "imagebitmap"
        });
      }
    }
  }
}

/***/ }),

/***/ "./src/lib/JsMediaSDK.js":
/*!*******************************!*\
  !*** ./src/lib/JsMediaSDK.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _promise = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/promise */ "./node_modules/@babel/runtime/core-js/promise.js"));

var _keys = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/object/keys */ "./node_modules/@babel/runtime/core-js/object/keys.js"));

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _assign = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/core-js/object/assign */ "./node_modules/@babel/runtime/core-js/object/assign.js"));

var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js"));

var _ZoomAudioWorkletNode = _interopRequireDefault(__webpack_require__(/*! ./ZoomAudioWorkletNode */ "./src/lib/ZoomAudioWorkletNode"));

var _util = _interopRequireDefault(__webpack_require__(/*! ../common/util */ "./src/common/util.js"));

var jsEvent = _interopRequireWildcard(__webpack_require__(/*! ../common/jsEvent */ "./src/common/jsEvent.js"));

var _JsMediaEngine_Variables = _interopRequireDefault(__webpack_require__(/*! ../inside/JsMediaEngine_Variables */ "./src/inside/JsMediaEngine_Variables.js"));

var jsMediaEngine = _interopRequireWildcard(__webpack_require__(/*! ./JsMediaEngine */ "./src/lib/JsMediaEngine.js"));

var _Error = __webpack_require__(/*! ../common/Error */ "./src/common/Error.js");

var _log = _interopRequireDefault(__webpack_require__(/*! ../common/log */ "./src/common/log.js"));

var _pubSub = _interopRequireDefault(__webpack_require__(/*! ../common/pubSub */ "./src/common/pubSub.js"));

var _detectWasmFeatures = _interopRequireDefault(__webpack_require__(/*! ../common/detectWasmFeatures */ "./src/common/detectWasmFeatures.js"));

var _Video = __webpack_require__(/*! ../inside/Video */ "./src/inside/Video.js");

var _AudioService = __webpack_require__(/*! ../inside/AudioService */ "./src/inside/AudioService.js");

var _Sharing = __webpack_require__(/*! ../inside/Sharing */ "./src/inside/Sharing.js");

var _isFunction = _interopRequireDefault(__webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js"));

var _RemoteControl = _interopRequireDefault(__webpack_require__(/*! ../inside/RemoteControl */ "./src/inside/RemoteControl.js"));

var _CommonEnums = __webpack_require__(/*! ../common/enums/CommonEnums */ "./src/common/enums/CommonEnums.js");

var _once = _interopRequireDefault(__webpack_require__(/*! lodash/once */ "./node_modules/lodash/once.js"));

var _isBoolean = _interopRequireDefault(__webpack_require__(/*! lodash/isBoolean */ "./node_modules/lodash/isBoolean.js"));

var _isNumber = _interopRequireDefault(__webpack_require__(/*! lodash/isNumber */ "./node_modules/lodash/isNumber.js"));

var _throttle = _interopRequireDefault(__webpack_require__(/*! lodash/throttle */ "./node_modules/lodash/throttle.js"));

__webpack_require__(/*! ../inside/ZoomRTC */ "./src/inside/ZoomRTC.js");

var _Monitor = _interopRequireDefault(__webpack_require__(/*! ../inside/Monitor */ "./src/inside/Monitor.js"));

var _RTCPeerConnectionUtil = __webpack_require__(/*! ../common/RTCPeerConnectionUtil */ "./src/common/RTCPeerConnectionUtil.js");

var _JsMediaSDK_VideoRender = _interopRequireDefault(__webpack_require__(/*! ../inside/JsMediaSDK_VideoRender */ "./src/inside/JsMediaSDK_VideoRender.js"));

var _JsMediaSDK_SharingRender = _interopRequireDefault(__webpack_require__(/*! ../inside/JsMediaSDK_SharingRender */ "./src/inside/JsMediaSDK_SharingRender.js"));

var _WebGLCanvas = _interopRequireDefault(__webpack_require__(/*! ../common/WebGLCanvas */ "./src/common/WebGLCanvas.js"));

/// JsMediaSDK init
var log = (0, _log.default)('sdk');
/**
 * interface IVMapType {
 *   [key: WORKER_TYPE]: string;
 * }
 *
 * @param sdkProps.ivObj {IVMapType} - for wasm aes gcm, iv would be passed to wasm
 *
 * Map<nodeid, userid>
 * @constructor
 */

var JsMediaSDK_Instance = function JsMediaSDK_Instance() {
  var sdkProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  log("sdkProps", sdkProps);

  try {
    _Monitor.default.add_monitor("JSBN:".concat(JsMediaSDK_Instance.buildNumber));

    log("JSBN:".concat(JsMediaSDK_Instance.buildNumber));
  } catch (e) {
    log(e);
  }

  this.isSupportThread = (typeof WebAssembly === "undefined" ? "undefined" : (0, _typeof2.default)(WebAssembly)) === 'object' && typeof Worker === 'function';

  if (!this.isSupportThread) {
    throw new Error("Webassemly or worker is not supported on this browser");
  }

  _JsMediaEngine_Variables.default.reinit();

  this.audioCtx = new (window.AudioContext || window.webkitAudioContext)();
  this.audioPlayNode = null;
  this.audioRecordNode = null;
  this.webrtcAudioNode = null;
  this.videoRenderArray = [];
  this.videoCaptureValue = null;
  this.audioRenderArray = [];
  this.audioCapture = null;
  this.display = [];
  this.AudioMediaStream = null;
  this.VideoMediaStram = null;
  this.isMediaStart = false;
  this.sampleRate = this.audioCtx.sampleRate;
  this.videoRenderIntervalHandle = null;
  this.audioDomNode = null;
  this.audioSpeakerValue = null;
  this.audionodebuffersize = this.sampleRate <= 32000 || _util.default.browser.isSafari ? 2048 : 1024; // play buffer

  this.audionoderecordbuffersize = 2048; // record buffer

  this.lastresidual = null;
  this.currentactive = 0;
  this.audioPlay = false;
  this.sharingInterval = null;
  this.sharingIntervalTime = 100; // sharing render interval 100ms

  this.sharingDisplay = null;
  this.currentshareactive = 0;
  this.videorenderinterval = 10; // render interval 10ms

  this.waterMarkCanvas = document.createElement('canvas');
  this.isSetCursor = false;
  this.captureAudioStatus = jsEvent.AUDIO_ILLEGAL;
  this.logon = false;
  this.canvas = null;
  this.firstSetDelay = true;
  this.isSupportAudioWorklet = typeof AudioWorklet === 'function';
  this.isSupportImageCapture = _util.default.isSupportImageCapture();
  this.isSupportOffscreenCanvas = typeof OffscreenCanvas == "function" && !_util.default.isOpera65();
  this.isCaputureNodeConnect = false;
  this.audioWorkletJsPath = null;
  this.videoCaptureInterval = 0;
  this.isStartVideoCapture = false;
  this.videoCaptureWidth = 0;
  this.videoCaptureHeight = 0;
  this.videoCaptureContext = null;
  this.isCreateVideoWaterMark = false;
  this.videoWaterMarkName = "";
  this.sharingWaterMarkName = "";
  this.isCreateSharingWaterMark = false; //for desktop sharing

  this.isStartDesktopSharing = false;
  this.desktopSharingValue = null; // this.desktopCaptureWidth = 0;
  // this.desktopCaptureWidth = 0;

  this.desktopCaptureContext = null;
  this.desktopSharingMediaStram = null;
  this.desktopSharingCaptureWidth = 0;
  this.desktopSharingCaptureHeight = 0;
  this.desktopSharingSend = false;
  this.isdesktopCaptureLoadedmetadata = false;
  this.captureVideoOutputCanvasDomList = []; // Determine whether the video loading camera data stream is complete

  this.isVideoCaptureLoadedmetadata = false; // cache value variable from calling method START_CAPTURE_VIDEO

  this.VALUE_CACHE_FOR_START_CAPTURE_VIDEO = {};
  this.isMediaDevicesGetUserMediaNow = false;
  this.vMonitorCount = 0;
  this.sMonitorCount = 0;
  this.mMonitorCount = 0;
  this.videoImageCapture;
  this.wecancapturevideo = true;
  this.isSendVideoOfflineCanvas = false;
  _JsMediaEngine_Variables.default.mediaSDKHandle = this;
  this._preloadMeetingParam = null;
  this.is32bitbrowser = navigator.userAgent.indexOf("WOW64") != -1;
  this.flipSend = true;
  this.mtu_size = 0;
  this.sharingImageCapture = null;
  this.sharingRenderCanvas = null;
  this.VideoRenderObj = null;
  this.SharingRenderObj = null;
  this.rtcConnectionA = null;
  this.rtcConnectionB = null; // this.deststream = null;

  this.sharingWidthAndHeightInfo = {
    ctiveNodeID: 0,
    height: 0,
    logicHeight: 0,
    logicWidth: 0,
    width: 0
  };
  this.remoteControl = null;
  this.listenInitEvent = (0, _once.default)(function () {
    this._listenInitEvent();
  }).bind(this);
  /**
   * indicate if the dataChannel for video decode/encode is inited, video decode/encode use the same dataChannel
   * so only one dataChannel is required.
   */

  this.isInitVideoDataChannel = false;
  this.isInitAudioDataChannel = false;
  this.rtcPeerConnectionList = []; // isDestroy is changed by "destroy" method

  this.isDestroy = false;
  this.rwgAgentMessageListenerWrapper = this.rwgAgentMessageListener.bind(this);

  if (sdkProps.ivObj) {
    _JsMediaEngine_Variables.default.ivObj = sdkProps.ivObj;
  }
}; // __JENKINS_SDK_BUILD_NUMBER__ will be replaced by webpack


JsMediaSDK_Instance.buildNumber = 5791;
JsMediaSDK_Instance.version = "7.0.5791";
JsMediaSDK_Instance.prototype = {
  JsMediaSDK_Log: function JsMediaSDK_Log(e) {
    if (this.logon) {
      log(e);
    }
  },

  /**
   * Pre-load the JS files, which are entered into the worker to run
   * @param meeting_param.videoEncWorkerPath {String}
   * @param meeting_param.videoDecWorkerPath {String}
   * @param meeting_param.audioEncWorkerPath {String}
   * @param meeting_param.audioDecWorkerPath {String}
   * @param meeting_param.imageDecWorkerPath {String} sharing decode websocket url
   * @param call_back
   * @constructor
   */
  JsMediaSDK_PreLoad: function JsMediaSDK_PreLoad(meeting_param, call_back) {
    this.setPropsBeforeInit({
      callback: call_back,
      audioWorkletPath: meeting_param.audioWorkletPath,
      isEnableListenInitEvent: true
    });
    this._preloadMeetingParam = meeting_param;
    jsMediaEngine.Start_Monitor();

    _Monitor.default.add_monitor("JSPLD");
  },

  /**
   * during sharing / remote control
   * there is some important information about width/height and so on about the destination media stream
   * these info is from sharing websocket, the method is for recording these info
   */
  recordSharingParamInfo: function recordSharingParamInfo() {
    var self = this;

    _pubSub.default.on(jsEvent.SHARING_PARAM_INFO_FROM_SOCKET, function (msg, data) {
      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.SHARING_PARA, data.body);

      (0, _assign.default)(self.sharingWidthAndHeightInfo, data.body);
    });
  },
  throwErrorWhenParameterIsEmpty: function throwErrorWhenParameterIsEmpty(val) {
    if (!val) throw new Error("parameter can not be empty");
  },

  /**
   * set notify callback for video init success, start camera success , start remote control success or not...
   * every message should be exported will be exported through the callback function
   * @param callback function
   */
  setCallback: function setCallback(callback) {
    if (!(0, _isFunction.default)(callback)) {
      throw new Error("callback must be function");
    }

    _JsMediaEngine_Variables.default._Notify_APPUI = callback;
  },

  /**
   * @param props.callback {Function}
   * @param props.audioWorkerPath {String}
   * @param props.isEnableListenInitEvent {String}
   */
  setPropsBeforeInit: function setPropsBeforeInit(props) {
    props.callback && this.setCallback(props.callback);
    props.audioWorkletPath && (this.audioWorkletJsPath = props.audioWorkletPath);
    props.isEnableListenInitEvent && this.listenInitEvent();

    if (props.e2eEncrypt) {
      _JsMediaEngine_Variables.default.e2eencrypt = true;
    } else {
      _JsMediaEngine_Variables.default.e2eencrypt = false;
    }
  },

  /**
   * @param rwgAgent  {@link https://git.zoom.us/web/web-sdk-core/tree/alpha/src/agents/rwg-agent}
   */
  setRWGAgent: function setRWGAgent(rwgAgent) {
    _JsMediaEngine_Variables.default.rwgAgent = rwgAgent;
    this.addEventListenerForRWGAgent(rwgAgent);
  },
  addEventListenerForRWGAgent: function addEventListenerForRWGAgent(rwgAgent) {
    rwgAgent.on("message", this.rwgAgentMessageListenerWrapper);
  },
  rwgAgentMessageListener: function rwgAgentMessageListener(event) {
    if (typeof event.data !== 'string') return;
    var message = JSON.parse(event.data);

    if (!this.isDestroy) {
      switch (message.evt) {
        case jsEvent.EVT_TYPE_WS_VIDEO_DATACHANNEL_ANSWER:
          {
            this.setRTCPeerConnectionDatachannelAnswer(message);
            break;
          }

        default:
          break;
      }
    }
  },
  setRTCPeerConnectionDatachannelAnswer: function setRTCPeerConnectionDatachannelAnswer(value) {
    if (value.evt === jsEvent.ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT || value.evt === jsEvent.ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT) {
      log("rwg answer", value);
      if (!value.answer) return;

      switch (value.answer.type) {
        case _CommonEnums.ZOOM_CONNECTION_TYPE.ZOOM_CONNECTION_VIDEO:
          _pubSub.default.trigger(jsEvent.PUBSUB_EVT.ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT, value);

          break;

        case _CommonEnums.ZOOM_CONNECTION_TYPE.ZOOM_CONNECTION_AUDIO:
          _pubSub.default.trigger(jsEvent.PUBSUB_EVT.ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT, value);

          break;
      }
    }
  },
  checkISDatachannelOrWebsocket: function checkISDatachannelOrWebsocket() {
    var res = (0, _throttle.default)(function () {
      console.log("Datachannel Return Message");
    }, 1000);
    var req = (0, _throttle.default)(function () {
      console.log("Datachannel Send Message");
    }, 1000);

    _pubSub.default.on(jsEvent.PUBSUB_EVT.DC_COMING_MESSAGE, function () {
      res();
    });

    _pubSub.default.on(jsEvent.VIDEO_DATA_FROM_WORKER, function (msg, data) {
      if ([2, 7].indexOf(data[0]) !== -1) {
        req();
      }
    });
  },

  /**
   * video datachannel support both video pull and push
   * Although video is transfered though datachannel, the old original websockets in web worker still reserve
   * There are some signals still transfer though websocket.
   * @param connectionID id is from RWG command socket
   */
  initVideoDataChannel: function () {
    var _initVideoDataChannel = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(connectionID, userid) {
      var rtc;
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.isInitVideoDataChannel) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              this.isInitVideoDataChannel = true;

              _Monitor.default.add_monitor("INITVDC");

              log("initVideoDataChannel", connectionID);
              rtc = new _RTCPeerConnectionUtil.RTCPeerConnectionUtil();
              rtc.setUserid(userid);
              rtc.setConnectionType(_CommonEnums.ConnectionType.VIDEO);
              log("rtc", rtc);
              rtc.onConnectionCreated(
              /*#__PURE__*/
              function () {
                var _ref = (0, _asyncToGenerator2.default)(
                /*#__PURE__*/
                _regenerator.default.mark(function _callee(rtcPeerConnection) {
                  var localDesc, message, candidate;
                  return _regenerator.default.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          localDesc = rtcPeerConnection.localDescription;
                          log("localDesc", localDesc);

                          _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.SEND_MESSAGE_TO_RWG, {
                            evt: jsEvent.ZOOM_CONNECTION_VIDEO_OFFER_EVT,
                            offer: {
                              sdp: localDesc.sdp,
                              type: _CommonEnums.ZOOM_CONNECTION_TYPE.ZOOM_CONNECTION_VIDEO
                            }
                          });

                          _context.next = 5;
                          return rtc.waitForAnswerFromRWG(jsEvent.PUBSUB_EVT.ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT);

                        case 5:
                          message = _context.sent;
                          log("jsEvent.PUBSUB_EVT.ZOOM_CONNECTION_VIDEO_OFFER_RESPONSE_EVT", message);
                          rtc.setRemoteDescription(message.answer);
                          rtc.closeIfTimeout();
                          candidate = message.answer.sdp.match(/a=candidate:.+/)[0];
                          log("received candidate", candidate);
                          candidate = candidate.replace(/^a=/, "");
                          rtc.addIceCandidate(candidate);
                          rtc.listenOnDataAndSend(jsEvent.VIDEO_DATA_FROM_WORKER);
                          rtc.onMessage(function (message) {
                            var o = new Uint8Array(message);

                            _pubSub.default.trigger(jsEvent.PUBSUB_EVT.DC_COMING_MESSAGE);

                            if (o[0] == jsEvent.MEDIA_VIDEO_REPORT_DROP_RATIO || o[0] == jsEvent.MEDIA_VIDEO_REPORT_RTT) {
                              jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.VIDEO_ENCODE, message, undefined, true);
                            } else {
                              jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.VIDEO_DECODE, message, undefined, true);
                            }
                          });
                          rtc.dataChannel.addEventListener("open", function () {
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.VIDEO_DECODE, {
                              isDataChannelOpen: true
                            }, "UPDATE_DATACHANNEL_STATUS", false, true);
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.VIDEO_ENCODE, {
                              isDataChannelOpen: true
                            }, "UPDATE_DATACHANNEL_STATUS", false, true);
                          });
                          rtc.dataChannel.addEventListener("close", function () {
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.VIDEO_DECODE, {
                              isDataChannelOpen: false
                            }, "UPDATE_DATACHANNEL_STATUS");
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.VIDEO_ENCODE, {
                              isDataChannelOpen: false
                            }, "UPDATE_DATACHANNEL_STATUS");
                            var lostrate_buffer = new ArrayBuffer(12);
                            var lostrate = new Uint8Array(lostrate_buffer);
                            lostrate[0] = 100;
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.VIDEO_ENCODE, lostrate_buffer, undefined, true);
                          });

                        case 17:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, this);
                }));

                return function (_x3) {
                  return _ref.apply(this, arguments);
                };
              }());
              rtc.initConnection(connectionID).catch(function (ex) {
                log.warn("initConnection", ex);

                _Monitor.default.add_monitor("INITVDCERR:" + ex.message);
              });
              this.rtcPeerConnectionList.push(rtc);

              _pubSub.default.on(jsEvent.PUBSUB_EVT.VIDEO_DATACHANNEL_SPEED, function (msg, speed) {
                log("VIDEO_DATACHANNEL_SPEED", speed); // VIDEO decode does not need `Bandwidth calculation`
                // VIDEO encode needs

                jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.VIDEO_ENCODE, {
                  speed: speed
                }, "UPDATE_BANDWIDTH_SPEED");
              });

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function initVideoDataChannel(_x, _x2) {
      return _initVideoDataChannel.apply(this, arguments);
    };
  }(),
  initAudioDataChannel: function () {
    var _initAudioDataChannel = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee4(connectionID, userid) {
      var rtc;
      return _regenerator.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!this.isInitAudioDataChannel) {
                _context4.next = 2;
                break;
              }

              return _context4.abrupt("return");

            case 2:
              this.isInitAudioDataChannel = true;

              _Monitor.default.add_monitor("INITADC");

              log("initAudioDataChannel", connectionID);
              rtc = new _RTCPeerConnectionUtil.RTCPeerConnectionUtil();
              rtc.setUserid(userid);
              rtc.setConnectionType(_CommonEnums.ConnectionType.AUDIO);
              log("rtc", rtc);
              rtc.onConnectionCreated(
              /*#__PURE__*/
              function () {
                var _ref2 = (0, _asyncToGenerator2.default)(
                /*#__PURE__*/
                _regenerator.default.mark(function _callee3(rtcPeerConnection) {
                  var localDesc, message, candidate;
                  return _regenerator.default.wrap(function _callee3$(_context3) {
                    while (1) {
                      switch (_context3.prev = _context3.next) {
                        case 0:
                          localDesc = rtcPeerConnection.localDescription;
                          log("localDesc", localDesc);

                          _JsMediaEngine_Variables.default.sendMessageToRwg(jsEvent.SEND_MESSAGE_TO_RWG, {
                            evt: jsEvent.ZOOM_CONNECTION_VIDEO_OFFER_EVT,
                            offer: {
                              sdp: localDesc.sdp,
                              type: _CommonEnums.ZOOM_CONNECTION_TYPE.ZOOM_CONNECTION_AUDIO
                            }
                          });

                          _context3.next = 5;
                          return rtc.waitForAnswerFromRWG(jsEvent.PUBSUB_EVT.ZOOM_CONNECTION_AUDIO_OFFER_RESPONSE_EVT);

                        case 5:
                          message = _context3.sent;
                          log("answer", message);
                          rtc.setRemoteDescription(message.answer);
                          rtc.closeIfTimeout();
                          candidate = message.answer.sdp.match(/a=candidate:.+/)[0];
                          log("received candidate", candidate);
                          candidate = candidate.replace(/^a=/, "");
                          rtc.addIceCandidate(candidate);
                          rtc.listenOnDataAndSendAudio(jsEvent.AUDIO_DATA_FROM_WORKER);
                          rtc.onMessage(function (message) {
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.AUDIO_DECODE, message, undefined, true);
                          });
                          rtc.dataChannel.addEventListener("open", function () {
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.AUDIO_DECODE, {
                              isDataChannelOpen: true
                            }, "UPDATE_DATACHANNEL_STATUS", false, true);
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.AUDIO_ENCODE, {
                              isDataChannelOpen: true
                            }, "UPDATE_DATACHANNEL_STATUS", false, true);
                          });
                          rtc.dataChannel.addEventListener("close", function () {
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.AUDIO_DECODE, {
                              isDataChannelOpen: false
                            }, "UPDATE_DATACHANNEL_STATUS");
                            jsMediaEngine.pushMessageToWorker(_CommonEnums.WORKER_TYPE.AUDIO_ENCODE, {
                              isDataChannelOpen: false
                            }, "UPDATE_DATACHANNEL_STATUS");
                          });

                        case 17:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  }, _callee3, this);
                }));

                return function (_x6) {
                  return _ref2.apply(this, arguments);
                };
              }());
              rtc.initConnection(connectionID, "ZoomWebclientAudioDataChannel").catch(function (ex) {
                log.warn("initConnection", ex);

                _Monitor.default.add_monitor("INITADCERR:" + ex.message);
              });
              this.rtcPeerConnectionList.push(rtc);

            case 12:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function initAudioDataChannel(_x4, _x5) {
      return _initAudioDataChannel.apply(this, arguments);
    };
  }(),
  initVideoEncode: function () {
    var _initVideoEncode = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee5(urlParameters, websocketUrl, userid) {
      var logon,
          meetingid,
          meetingnumb,
          isSupportMultiThread,
          isSupportSIMD,
          workerParameters,
          cid,
          videopara,
          _args5 = arguments;
      return _regenerator.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              logon = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : false;
              meetingid = _args5.length > 4 ? _args5[4] : undefined;
              meetingnumb = _args5.length > 5 ? _args5[5] : undefined;
              log("initVideoEncode");

              _Monitor.default.add_monitor("INITVE");

              _context5.next = 7;
              return _util.default.isSDKSupportMultiThread();

            case 7:
              isSupportMultiThread = _context5.sent;
              _context5.next = 10;
              return _util.default.isSDKSupportSIMD();

            case 10:
              isSupportSIMD = _context5.sent;
              workerParameters = {};

              if (isSupportMultiThread) {
                workerParameters.workerJsFileUrl = urlParameters.videoMtWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoMtWasm;
              } else if (isSupportSIMD) {
                workerParameters.workerJsFileUrl = urlParameters.videoSIMDWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoSIMDWasm;
              } else {
                workerParameters.workerJsFileUrl = urlParameters.videoWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoWasm;
              } //console.log(workerParameters.workerJsFileUrl,workerParameters.workerWasmFileUrl)


              this.throwErrorWhenParameterIsEmpty(workerParameters.workerJsFileUrl);
              this.throwErrorWhenParameterIsEmpty(workerParameters.workerWasmFileUrl);
              cid = new URL(websocketUrl).searchParams.get("cid");
              this.initVideoDataChannel(cid, userid);
              _JsMediaEngine_Variables.default.monitorCid = cid;
              videopara = {
                log: logon,
                confId: userid,
                meetingid: meetingid,
                meetingnumb: meetingnumb
              };
              jsMediaEngine.setVideoEngineInitProperties(websocketUrl, videopara);
              _context5.next = 22;
              return jsMediaEngine.initVideoEncode(workerParameters, this);

            case 22:
              _context5.next = 24;
              return _Video.Video.waitVideoEncodeInitResult();

            case 24:
              return _context5.abrupt("return", _context5.sent);

            case 25:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    return function initVideoEncode(_x7, _x8, _x9) {
      return _initVideoEncode.apply(this, arguments);
    };
  }(),
  initVideoDecode: function () {
    var _initVideoDecode = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee6(urlParameters, websocketUrl, userid) {
      var logon,
          meetingid,
          meetingnumb,
          isSupportMultiThread,
          isSupportSIMD,
          workerParameters,
          cid,
          videopara,
          _args6 = arguments;
      return _regenerator.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              logon = _args6.length > 3 && _args6[3] !== undefined ? _args6[3] : false;
              meetingid = _args6.length > 4 ? _args6[4] : undefined;
              meetingnumb = _args6.length > 5 ? _args6[5] : undefined;
              log("initVideoDecode");

              _Monitor.default.add_monitor("INITVD");

              _context6.next = 7;
              return _util.default.isSDKSupportMultiThread();

            case 7:
              isSupportMultiThread = _context6.sent;
              _context6.next = 10;
              return _util.default.isSDKSupportSIMD();

            case 10:
              isSupportSIMD = _context6.sent;
              workerParameters = {};

              if (isSupportMultiThread) {
                workerParameters.workerJsFileUrl = urlParameters.videoMtWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoMtWasm;
              } else if (isSupportSIMD) {
                workerParameters.workerJsFileUrl = urlParameters.videoSIMDWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoSIMDWasm;
              } else {
                workerParameters.workerJsFileUrl = urlParameters.videoWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoWasm;
              } //console.log(workerParameters.workerJsFileUrl,workerParameters.workerWasmFileUrl)


              this.throwErrorWhenParameterIsEmpty(workerParameters.workerJsFileUrl);
              this.throwErrorWhenParameterIsEmpty(workerParameters.workerWasmFileUrl);
              cid = new URL(websocketUrl).searchParams.get("cid");
              this.initVideoDataChannel(cid, userid);
              _JsMediaEngine_Variables.default.monitorCid = cid;
              videopara = {
                log: logon,
                confId: userid,
                meetingid: meetingid,
                meetingnumb: meetingnumb
              };
              jsMediaEngine.setVideoEngineInitProperties(websocketUrl, videopara);
              _context6.next = 22;
              return jsMediaEngine.initVideoDecode(workerParameters, this);

            case 22:
              _context6.next = 24;
              return _Video.Video.waitVideoDecodeInitResult();

            case 24:
              return _context6.abrupt("return", _context6.sent);

            case 25:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    return function initVideoDecode(_x10, _x11, _x12) {
      return _initVideoDecode.apply(this, arguments);
    };
  }(),
  initAudioEncode: function () {
    var _initAudioEncode = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee7(urlParameters, websocketUrl, userid) {
      var logon,
          meetingid,
          meetingnumb,
          workerParameters,
          audiopara,
          _args7 = arguments;
      return _regenerator.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              logon = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : false;
              meetingid = _args7.length > 4 ? _args7[4] : undefined;
              meetingnumb = _args7.length > 5 ? _args7[5] : undefined;
              log("initAudioEncode");

              _Monitor.default.add_monitor("INITAE");

              _JsMediaEngine_Variables.default.monitorCid = new URL(websocketUrl).searchParams.get("cid");
              this.initAudioDataChannel(_JsMediaEngine_Variables.default.monitorCid, userid);
              workerParameters = {};
              workerParameters.workerJsFileUrl = urlParameters.audioWorkerPath;
              workerParameters.workerWasmFileUrl = urlParameters.audioWasm;
              this.throwErrorWhenParameterIsEmpty(workerParameters.workerJsFileUrl);
              this.throwErrorWhenParameterIsEmpty(workerParameters.workerWasmFileUrl);
              audiopara = {
                sampleRate: this.audioCtx.sampleRate,
                userid: userid,
                log: logon,
                meetingid: meetingid,
                meetingnumb: meetingnumb
              };
              jsMediaEngine.setAudioEngineInitProperties(websocketUrl, audiopara);
              _context7.next = 16;
              return jsMediaEngine.initAudioEncode(workerParameters, this);

            case 16:
              _context7.next = 18;
              return _AudioService.AudioService.waitAudioEncodeInitResult();

            case 18:
              return _context7.abrupt("return", _context7.sent);

            case 19:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    return function initAudioEncode(_x13, _x14, _x15) {
      return _initAudioEncode.apply(this, arguments);
    };
  }(),
  initAudioDecode: function () {
    var _initAudioDecode = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee8(urlParameters, websocketUrl, userid) {
      var logon,
          meetingid,
          meetingnumb,
          workerParameters,
          audiopara,
          _args8 = arguments;
      return _regenerator.default.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              logon = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : false;
              meetingid = _args8.length > 4 ? _args8[4] : undefined;
              meetingnumb = _args8.length > 5 ? _args8[5] : undefined;
              log("initAudioDecode");

              _Monitor.default.add_monitor("INITAD");

              _JsMediaEngine_Variables.default.monitorCid = new URL(websocketUrl).searchParams.get("cid");
              this.initAudioDataChannel(_JsMediaEngine_Variables.default.monitorCid, userid);
              workerParameters = {};
              workerParameters.workerJsFileUrl = urlParameters.audioWorkerPath;
              workerParameters.workerWasmFileUrl = urlParameters.audioWasm;
              this.throwErrorWhenParameterIsEmpty(workerParameters.workerJsFileUrl);
              this.throwErrorWhenParameterIsEmpty(workerParameters.workerWasmFileUrl);
              audiopara = {
                sampleRate: this.audioCtx.sampleRate,
                userid: userid,
                log: logon,
                meetingid: meetingid,
                meetingnumb: meetingnumb
              };
              jsMediaEngine.setAudioEngineInitProperties(websocketUrl, audiopara);
              _context8.next = 16;
              return jsMediaEngine.initAudioDecode(workerParameters, this);

            case 16:
              _context8.next = 18;
              return _AudioService.AudioService.waitAudioDecodeInitResult();

            case 18:
              return _context8.abrupt("return", _context8.sent);

            case 19:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    return function initAudioDecode(_x16, _x17, _x18) {
      return _initAudioDecode.apply(this, arguments);
    };
  }(),
  initSharingDecode: function () {
    var _initSharingDecode = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee9(urlParameters, websocketUrl, userid) {
      var logon,
          meetingid,
          meetingnumb,
          isSupportMultiThread,
          isSupportSIMD,
          workerParameters,
          sharingpara,
          _args9 = arguments;
      return _regenerator.default.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              logon = _args9.length > 3 && _args9[3] !== undefined ? _args9[3] : false;
              meetingid = _args9.length > 4 ? _args9[4] : undefined;
              meetingnumb = _args9.length > 5 ? _args9[5] : undefined;
              log("initSharingDecode");

              _Monitor.default.add_monitor("INITSD");

              this.recordSharingParamInfo();
              _JsMediaEngine_Variables.default.monitorCid = new URL(websocketUrl).searchParams.get("cid");
              _context9.next = 9;
              return _util.default.isSDKSupportMultiThread();

            case 9:
              isSupportMultiThread = _context9.sent;
              _context9.next = 12;
              return _util.default.isSDKSupportSIMD();

            case 12:
              isSupportSIMD = _context9.sent;
              workerParameters = {};

              if (isSupportMultiThread) {
                workerParameters.workerJsFileUrl = urlParameters.sharingMtWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoMtWasm;
              } else if (isSupportSIMD) {
                workerParameters.workerJsFileUrl = urlParameters.sharingSIMDWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoSIMDWasm;
              } else {
                workerParameters.workerJsFileUrl = urlParameters.sharingWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoWasm;
              } //console.log(workerParameters.workerJsFileUrl,workerParameters.workerWasmFileUrl)


              this.throwErrorWhenParameterIsEmpty(workerParameters.workerJsFileUrl);
              this.throwErrorWhenParameterIsEmpty(workerParameters.workerWasmFileUrl);
              sharingpara = {
                log: logon,
                userid: userid,
                meetingid: meetingid,
                meetingnumb: meetingnumb,
                isSupportMultiThread: isSupportMultiThread
              };
              jsMediaEngine.setSharingEngineInitProperties(websocketUrl, sharingpara);
              _context9.next = 21;
              return jsMediaEngine.initSharingDecode(workerParameters, this);

            case 21:
              _context9.next = 23;
              return _Sharing.Sharing.waitSharingDecodeResult();

            case 23:
              return _context9.abrupt("return", _context9.sent);

            case 24:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this);
    }));

    return function initSharingDecode(_x19, _x20, _x21) {
      return _initSharingDecode.apply(this, arguments);
    };
  }(),
  initSharingEncode: function () {
    var _initSharingEncode = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee10(urlParameters, websocketUrl, userid) {
      var logon,
          meetingid,
          meetingnumb,
          isSupportMultiThread,
          isSupportSIMD,
          workerParameters,
          sharingpara,
          _args10 = arguments;
      return _regenerator.default.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              logon = _args10.length > 3 && _args10[3] !== undefined ? _args10[3] : false;
              meetingid = _args10.length > 4 ? _args10[4] : undefined;
              meetingnumb = _args10.length > 5 ? _args10[5] : undefined;
              log("initSharingEncode");

              _Monitor.default.add_monitor("INITSE"); // this.recordSharingParamInfo();


              _context10.next = 7;
              return _util.default.isSDKSupportMultiThread();

            case 7:
              isSupportMultiThread = _context10.sent;
              _context10.next = 10;
              return _util.default.isSDKSupportSIMD();

            case 10:
              isSupportSIMD = _context10.sent;
              workerParameters = {};

              if (isSupportMultiThread) {
                workerParameters.workerJsFileUrl = urlParameters.sharingMtWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoMtWasm;
              } else if (isSupportSIMD) {
                workerParameters.workerJsFileUrl = urlParameters.sharingSIMDWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoSIMDWasm;
              } else {
                workerParameters.workerJsFileUrl = urlParameters.sharingWorkerPath;
                workerParameters.workerWasmFileUrl = urlParameters.videoWasm;
              }

              this.throwErrorWhenParameterIsEmpty(workerParameters.workerJsFileUrl);
              this.throwErrorWhenParameterIsEmpty(workerParameters.workerWasmFileUrl); //console.log(workerParameters.workerJsFileUrl,workerParameters.workerWasmFileUrl)

              _JsMediaEngine_Variables.default.monitorCid = new URL(websocketUrl).searchParams.get("cid");
              sharingpara = {
                log: logon,
                userid: userid,
                meetingid: meetingid,
                meetingnumb: meetingnumb,
                isSupportMultiThread: isSupportMultiThread
              };
              jsMediaEngine.setSharingEngineInitProperties(websocketUrl, sharingpara);
              _context10.next = 20;
              return jsMediaEngine.initSharingEncode(workerParameters, this);

            case 20:
              _context10.next = 22;
              return _Sharing.Sharing.waitSharingEncodeResult();

            case 22:
              return _context10.abrupt("return", _context10.sent);

            case 23:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this);
    }));

    return function initSharingEncode(_x22, _x23, _x24) {
      return _initSharingEncode.apply(this, arguments);
    };
  }(),

  /**
   * it will call Notify_APPUI to publish init success event
   * 2019.05.20 updated
   * do not return boolean value to indicate if "all init" is successful,
   * because the Initialization strategy is different in some browsers.
   * for example : safari doesn't have sharingEncode
   */
  _listenInitEvent: function _listenInitEvent() {
    var self = this;
    var map = {
      "VIDEO_ENCODE_INIT": _Video.VIDEO_EVENT.VIDEO_ENCODE_INIT_SUCCESS,
      "VIDEO_DECODE_INIT": _Video.VIDEO_EVENT.VIDEO_DECODE_INIT_SUCCESS,
      "AUDIO_ENCODE": _AudioService.AUDIO_INIT_EVENT.AUDIO_ENCODE_SUCCESS,
      "AUDIO_DECODE": _AudioService.AUDIO_INIT_EVENT.AUDIO_DECODE_SUCCESS,
      "SHARING_DECODE": _Sharing.SHARING_INIT_EVENT.SHARING_DECODE_SUCCESS,
      "SHARING_ENCODE": _Sharing.SHARING_INIT_EVENT.SHARING_ENCODE_SUCCESS
    };
    var mapFailed = {
      "VIDEO_ENCODE_INIT": _Video.VIDEO_EVENT.VIDEO_ENCODE_INIT_FAILED,
      "VIDEO_DECODE_INIT": _Video.VIDEO_EVENT.VIDEO_DECODE_INIT_FAILED,
      "AUDIO_ENCODE": _AudioService.AUDIO_INIT_EVENT.AUDIO_ENCODE_FAILED,
      "AUDIO_DECODE": _AudioService.AUDIO_INIT_EVENT.AUDIO_DECODE_FAILED,
      "SHARING_DECODE": _Sharing.SHARING_INIT_EVENT.SHARING_DECODE_FAILED,
      "SHARING_ENCODE": _Sharing.SHARING_INIT_EVENT.SHARING_ENCODE_FAILED
    };
    var eachInitSuccessCallback = {
      "VIDEO_ENCODE_INIT": {
        success: jsEvent.INIT_SUCCESS_VIDEO,
        failed: jsEvent.INIT_FAILED_VIDEO,
        callbackDataValue: _CommonEnums.EncodeDecodeEnum.encode
      },
      "VIDEO_DECODE_INIT": {
        success: jsEvent.INIT_SUCCESS_VIDEO,
        failed: jsEvent.INIT_FAILED_VIDEO,
        callbackDataValue: _CommonEnums.EncodeDecodeEnum.decode
      },
      "AUDIO_ENCODE": {
        success: jsEvent.INIT_SUCCESS_AUDIO,
        failed: jsEvent.INIT_FAILED_AUDIO,
        callbackDataValue: _CommonEnums.EncodeDecodeEnum.encode
      },
      "AUDIO_DECODE": {
        success: jsEvent.INIT_SUCCESS_AUDIO,
        failed: jsEvent.INIT_FAILED_AUDIO,
        callbackDataValue: _CommonEnums.EncodeDecodeEnum.decode
      },
      "SHARING_DECODE": {
        success: jsEvent.INIT_SUCCESS_SHARING,
        failed: jsEvent.INIT_FAILED_SHARING,
        callbackDataValue: _CommonEnums.EncodeDecodeEnum.decode
      },
      "SHARING_ENCODE": {
        success: jsEvent.INIT_SUCCESS_SHARING,
        failed: jsEvent.INIT_FAILED_SHARING,
        callbackDataValue: _CommonEnums.EncodeDecodeEnum.encode
      }
    };
    var kPromiseList = (0, _keys.default)(map).map(function (k) {
      return {
        k: k,
        promise: new _promise.default(function (resolve, reject) {
          _pubSub.default.on(map[k], function () {
            resolve(true);
          });

          _pubSub.default.on(mapFailed[k], function () {
            resolve(false);
          });
        })
      };
    }).map(function (item) {
      item.promise = item.promise.then(function (bool) {
        log("init => ".concat(item.k, " => ").concat(bool));

        if (bool) {
          eachInitSuccessCallback[item.k] && eachInitSuccessCallback[item.k].success && _JsMediaEngine_Variables.default.Notify_APPUI(eachInitSuccessCallback[item.k].success, eachInitSuccessCallback[item.k].callbackDataValue);
        } else {
          eachInitSuccessCallback[item.k] && eachInitSuccessCallback[item.k].failed && _JsMediaEngine_Variables.default.Notify_APPUI(eachInitSuccessCallback[item.k].failed, eachInitSuccessCallback[item.k].callbackDataValue);
        }

        return bool;
      });
      return item;
    });
    var mediaTypes = {
      'video': {
        success: jsEvent.INIT_SUCCESS_VIDEO,
        failed: jsEvent.INIT_FAILED_VIDEO
      },
      'audio': {
        success: jsEvent.INIT_SUCCESS_AUDIO,
        failed: jsEvent.INIT_FAILED_AUDIO
      },
      'sharing': {
        success: jsEvent.INIT_SUCCESS_SHARING,
        failed: jsEvent.INIT_FAILED_SHARING
      }
    };
    var promises = (0, _keys.default)(mediaTypes).map(function (k) {
      var promiseList = kPromiseList.filter(function (item) {
        return item.k.toLowerCase().indexOf(k) !== -1;
      }).map(function (item) {
        return item.promise;
      });
      return _promise.default.all(promiseList).then(function (booleanList) {
        if (booleanList.filter(function (bool) {
          return !bool;
        }).length > 0) {
          //jsMediaEngineVariables.Notify_APPUI(mediaTypes[k].failed);
          return false;
        } else {
          //jsMediaEngineVariables.Notify_APPUI(mediaTypes[k].success);
          return true;
        }
      });
    });
  },

  /**
   * JsMediaSDK_UnInit is different from "destroy" method,
   * JsMediaSDK_UnInit does not terminate WebWorkers
   * But "destroy" method does.
   * @constructor
   */
  JsMediaSDK_UnInit: function JsMediaSDK_UnInit() {
    jsMediaEngine.Stop_Monitor();
    jsMediaEngine.JsAudioEngine_UnInit();
    jsMediaEngine.JsVideoEngine_UnInit();
    jsMediaEngine.JsSharingEngine_UnInit();

    if (this.videoRenderArray.length) {
      this.videoRenderArray.forEach(function (element) {
        if (element.display) {
          element.display.cleanup();
          element.display = null;
        }
      });
    }

    _JsMediaEngine_Variables.default._Notify_APPUI = null;
  },
  StartAudioMediaCapture: function StartAudioMediaCapture() {
    this.EndAudioMediaStream();
    var audioSource = null;
    var constraints = null;
    var audioPara = null;
    var i = 0;

    if (this.audioCapture) {
      audioSource = this.audioCapture.AudioSelectValue;
    }

    if (this.audioCapture) {
      audioPara = {
        deviceId: audioSource ? {
          exact: audioSource
        } : undefined,
        autoGainControl: true,
        noiseSuppression: true,
        latency: 0,
        echoCancellation: true
      };
    } else {
      audioPara = false;
    } //  var that = this;
    //We Need to use Webrtc to get media data.


    constraints = {
      audio: audioPara,
      video: false
    };
    var localHandleCapture = this.handleAudioCapture.bind(this);
    var localHandleError = this.handleAudioError.bind(this);
    navigator.mediaDevices.getUserMedia(constraints).then(localHandleCapture, localHandleError);
  },
  StartDesktopMediaCapture: function () {
    var _StartDesktopMediaCapture = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee11() {
      var that, localHandleCapture, localHandleError, _localHandleCapture, _localHandleError;

      return _regenerator.default.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              that = this;

              if (_util.default.browser.isEdge) {
                localHandleCapture = this.handleDesktopCapture.bind(this);
                localHandleError = this.handleCaptureError.bind(this);
                navigator.getDisplayMedia({
                  video: true
                }).then(localHandleCapture, localHandleError);
              } else if (navigator.mediaDevices.getDisplayMedia) {
                _localHandleCapture = this.handleDesktopCapture.bind(this);
                _localHandleError = this.handleCaptureError.bind(this);
                navigator.mediaDevices.getDisplayMedia({
                  video: true
                }).then(_localHandleCapture, _localHandleError);
              } else {
                window.getScreenId(function (error, sourceId, screen_constraints) {
                  if (!error) {
                    navigator.mediaDevices.getUserMedia(screen_constraints).then(function (stream) {
                      that.desktopSharingMediaStram = stream;

                      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.DESKTOP_SHARING_CAPTURE_SUCCESS, null);

                      that.desktopSharingMediaStram.getVideoTracks()[0].onended = function () {
                        // console.error("stop")
                        _Monitor.default.add_monitor("SSBB");

                        _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.USER_STOP_DESKTOP_SHARING, null);

                        that.StopSharingCapture();
                      };

                      that.Start_Desktop_Sharing();
                    }).catch(function (error) {
                      _Monitor.default.add_monitor("SCCF");

                      that.StopSharingCapture();

                      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.DESKTOP_SHARING_ERROR, null);
                    });
                  } else {
                    var typeEvent;

                    switch (error) {
                      case "WCL.userCancel":
                        {
                          typeEvent = jsEvent.USER_CANCEL_PERMISSION_REQUEST;
                        }
                        break;

                      case "WCL.extensionUninstalled":
                        {
                          typeEvent = jsEvent.DESKTOP_SHARING_CHROME_EXTENSION_UNINSTALLED;
                        }
                        break;

                      case "WCL.PermissionDeniedError":
                        {
                          typeEvent = jsEvent.DESKTOP_SHARING_PERMISSION_DENIED;
                        }
                        break;
                    }

                    that.StopSharingCapture();

                    if (typeEvent) {
                      _Monitor.default.add_monitor("SCSF");

                      _JsMediaEngine_Variables.default.Notify_APPUI(typeEvent, null);
                    }
                  }
                });
              }

            case 2:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    return function StartDesktopMediaCapture() {
      return _StartDesktopMediaCapture.apply(this, arguments);
    };
  }(),
  StartVideoMediaCapture: function () {
    var _StartVideoMediaCapture = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee12() {
      var videoSource, constraints, videoPara, i, videoCaptureValue, mediaStream, isSuccess;
      return _regenerator.default.wrap(function _callee12$(_context12) {
        while (1) {
          switch (_context12.prev = _context12.next) {
            case 0:
              this.EndVideoMediaStream();
              videoSource = null;
              constraints = null;
              videoPara = null;
              i = 0;

              if (this.videoCaptureValue) {
                videoSource = this.videoCaptureValue.VideoSelectValue;
              }

              if (this.videoCaptureValue) {
                if (_util.default.browser.isSafari) {
                  videoPara = true;
                } else {
                  videoPara = {
                    width: this.videoCaptureValue.width ? this.videoCaptureValue.width : 320,
                    height: this.videoCaptureValue.height ? this.videoCaptureValue.height : 180,
                    deviceId: videoSource ? {
                      exact: videoSource
                    } : undefined
                  };
                }
              } else {
                videoPara = false;
              } //  var that = this;
              //We Need to use Webrtc to get media data.


              constraints = {
                audio: false,
                video: videoPara
              };
              log('try to getusermedia', constraints);
              _context12.prev = 9;
              videoCaptureValue = this.videoCaptureValue;
              this.isMediaDevicesGetUserMediaNow = true;
              _context12.prev = 12;
              _context12.next = 15;
              return navigator.mediaDevices.getUserMedia(constraints);

            case 15:
              mediaStream = _context12.sent;
              _context12.next = 23;
              break;

            case 18:
              _context12.prev = 18;
              _context12.t0 = _context12["catch"](12);
              _context12.next = 22;
              return navigator.mediaDevices.getUserMedia((0, _assign.default)({}, constraints, {
                video: true
              }));

            case 22:
              mediaStream = _context12.sent;

            case 23:
              this.isMediaDevicesGetUserMediaNow = false;
              log("mediaStream is ok"); // This is very confusing but `this.videoCaptureValue` will NULL without the following code

              this.videoCaptureValue = videoCaptureValue;
              _context12.next = 28;
              return this.handleVideoCapture(mediaStream);

            case 28:
              isSuccess = _context12.sent;

              if (isSuccess) {
                _JsMediaEngine_Variables.default.monitorVideoCapture = true;

                _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.START_VIDEO_CAPTURE_SUCCESS, null);
              }

              _context12.next = 35;
              break;

            case 32:
              _context12.prev = 32;
              _context12.t1 = _context12["catch"](9);
              this.handleVideoError(_context12.t1);

            case 35:
            case "end":
              return _context12.stop();
          }
        }
      }, _callee12, this, [[9, 32], [12, 18]]);
    }));

    return function StartVideoMediaCapture() {
      return _StartVideoMediaCapture.apply(this, arguments);
    };
  }(),
  Start_Audio_Play: function Start_Audio_Play() {
    this.audioPlay = true;

    if (!this.isSupportAudioWorklet) {
      if (this.audioPlayNode && this.audioCtx) {
        //Maybe we should return back directly.
        //this.Stop_Audio_Play();
        this.audioPlayNode.connect(this.audioCtx.destination);
      } else {
        this.audioPlayNode = this.audioCtx.createScriptProcessor(this.audionodebuffersize, 1, 1);
        var that = this;

        this.audioPlayNode.onaudioprocess = function (ev) {
          that.JsMediaSDK_OnAudioprocess(ev);
        };

        this.audioPlayNode.connect(this.audioCtx.destination);
      }
    } else {
      if (_JsMediaEngine_Variables.default.AudioNode) {
        _JsMediaEngine_Variables.default.AudioNode.postCMD("startPlayAudio", null);
      }
    }

    jsMediaEngine.UpdateAudioPlayStatus(true);
    return;
  },
  Stop_Audio_Play: function Stop_Audio_Play() {
    jsMediaEngine.UpdateAudioPlayStatus(false);

    if (!this.isSupportAudioWorklet) {
      this.audioPlay = false;

      if (this.audioPlayNode) {
        try {
          this.audioPlayNode.disconnect(this.audioCtx.destination);
        } catch (e) {
          this.JsMediaSDK_Log(e);
        }
      }
    } else {
      if (_JsMediaEngine_Variables.default.AudioNode) _JsMediaEngine_Variables.default.AudioNode.postCMD("stopPlayAudio", null);
    }
  },
  Remove_Audio_Play: function Remove_Audio_Play() {
    jsMediaEngine.UpdateAudioPlayStatus(false);
    this.audioPlay = false;

    if (!this.isSupportAudioWorklet) {
      if (this.audioPlayNode) {
        try {
          this.audioPlayNode.disconnect(this.audioCtx.destination);
        } catch (e) {
          this.JsMediaSDK_Log(e);
        }

        this.audioPlayNode = null;
      }
    } else {
      if (_JsMediaEngine_Variables.default.AudioNode) {
        _JsMediaEngine_Variables.default.AudioNode.postCMD("stopPlayAudio", null);
      }
    }
  },
  Meeting_Fail_Over: function Meeting_Fail_Over(audio_websocket_addresss, video_websocket_address) {
    jsMediaEngine.Meeting_Fail_Over(audio_websocket_addresss, video_websocket_address);
  },
  Start_Audio_Capture: function Start_Audio_Capture() {
    if (this.audioRecordNode && this.audioCtx.destination && this.AudioMediaStream) {
      //now, we will not disconnect destination to stop the captured audio. we use status to represent the audio state.
      // jsMediaEngine.Notify_Audio_Thread_Status(jsMediaEngineVariables.SPECIAL_ID, jsEvent.AUDIO_START);
      //this.audioRecordNode.connect(this.audioCtx.destination);
      return;
    } else {
      if (this.AudioMediaStream) {
        // jsMediaEngine.Notify_Audio_Thread_Status(jsMediaEngineVariables.SPECIAL_ID, jsEvent.AUDIO_START);
        var audioInput = this.audioCtx.createMediaStreamSource(this.AudioMediaStream);
        this.webrtcAudioNode = audioInput;

        if (this.isSupportAudioWorklet) {
          if (!this.isCaputureNodeConnect) {
            this.webrtcAudioNode.connect(_JsMediaEngine_Variables.default.AudioNode);

            _JsMediaEngine_Variables.default.AudioNode.postCMD("StartCaptureAudio", null);

            this.isCaputureNodeConnect = true;
          }
        } else {
          this.audioRecordNode = this.audioCtx.createScriptProcessor(this.audionoderecordbuffersize, 1, 1);
          audioInput.connect(this.audioRecordNode);
          this.audioRecordNode.connect(this.audioCtx.destination);
          var that = this;

          this.audioRecordNode.onaudioprocess = function (e) {
            if (that.captureAudioStatus === jsEvent.AUDIO_REMOVE) {} else {
              var buffer = e.inputBuffer.getChannelData(0);
              var float32 = new Float32Array(buffer);
              jsMediaEngine.Audio_Encode_Frame(that.audioCapture.ssrc, float32, buffer.length, 0); // capture a audio frame
            }
          };
        }

        return;
      } else {
        this.StartAudioMediaCapture();
      }
    }

    this.captureAudioStatus = jsEvent.AUDIO_START;
  },
  Stop_Audio_Capture: function Stop_Audio_Capture() {
    /*this.captureAudioStatus = false;
    Clear_Audio_Interval();
    if (this.audioRecordNode) {
        try {
            this.audioRecordNode.disconnect(this.audioCtx.destination);
        } catch (e) {
            this.JsMediaSDK_Log(e);
        }
    }*/
    this.captureAudioStatus = jsEvent.AUDIO_STOP;
    jsMediaEngine.Notify_Audio_Thread_Status(_JsMediaEngine_Variables.default.SPECIAL_ID, jsEvent.AUDIO_STOP); //0 --- stop audio capture
  },
  Start_Video_Capture: function Start_Video_Capture() {
    var _this = this;

    if (this.VideoMediaStram) {
      var that = this;
      return new _promise.default(function (resolve, reject) {
        var loadedmetadata = function loadedmetadata() {
          var w, h;

          if (that.isSupportImageCapture) {
            w = that.videoCaptureWidth;
            h = that.videoCaptureHeight;
          } else {
            that.isVideoCaptureLoadedmetadata = true;
            w = that.videoCaptureValue.videoCtrl.videoWidth;
            h = that.videoCaptureValue.videoCtrl.videoHeight;
            that.videoCaptureValue.canvasCtrl.width = w;
            that.videoCaptureValue.canvasCtrl.height = h;
            that.videoCaptureWidth = w;
            that.videoCaptureHeight = h; // if(that.videoCaptureWidth * 9 < that.videoCaptureHeight * 16){
            //     that.videoCaptureHeight = 9 * (that.videoCaptureWidth / 16)
            // }else if(that.videoCaptureWidth * 9 > that.videoCaptureHeight * 16){
            //     that.videoCaptureWidth = 16 * (that.videoCaptureHeight / 9)
            // }

            that.videoCaptureContext = that.videoCaptureValue.canvasCtrl.getContext('2d'); // Set width height for each video stream output source
            // otherwise video will be reduced by the browser's default behavior due to size issues

            that.captureVideoOutputCanvasDomList.forEach(function (item) {
              item.width = w;
              item.height = h;
            });
            that.videoCaptureValue.videoCtrl.removeEventListener('loadedmetadata', loadedmetadata);
          }

          jsMediaEngine.Notify_Video_Encode_Thread({
            command: "startVideoEncode",
            width: that.videoCaptureWidth,
            height: that.videoCaptureHeight,
            fps: that.videoCaptureValue.fps,
            ssid: that.videoCaptureValue.ssid,
            mtu_size: that.mtu_size
          }); // when start second time, width height won't work by `startVideoEncode`
          // so we need update width/height.

          jsMediaEngine.Notify_Video_Encode_Thread({
            command: "updateVideoPara",
            width: w,
            height: h,
            fps: that.videoCaptureValue.fps
          });
          _JsMediaEngine_Variables.default.monitorVideoUserID = that.videoCaptureValue.ssid; // Tell the callback function to tell videoWidth and videoHeight

          _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.CURRENT_CAPTURE_VIDEO_WIDTH_HEIGHT, {
            width: w,
            height: h
          });
        };

        if (_this.isSupportImageCapture) {
          loadedmetadata(); // debugger

          that.videoCaptureValue.videoCtrl.srcObject = that.VideoMediaStram;
          resolve(true);
          return;
        } else {
          that.videoCaptureValue.videoCtrl.addEventListener('loadedmetadata', loadedmetadata);
        } // onended | onaddtrack | onremovetrack  all of them cannot detect whether MediaStream is active or not
        // following code is a trick


        setTimeout(function () {
          if (_this.VideoMediaStram) {
            if (_this.VideoMediaStram.active === false) {
              reject(new _Error.CameraOccupiedError("VideoMediaStram.active equals false"));
            } else {
              resolve(true);
            }
          } else {
            reject(false);
          }
        }, 1000);
        that.videoCaptureValue.videoCtrl.setAttribute("playsinline", true); // that.videoCaptureValue.videoCtrl.src = window.URL.createObjectURL(stream);

        try {
          that.videoCaptureValue.videoCtrl.srcObject = that.VideoMediaStram;
        } catch (error) {
          that.videoCaptureValue.videoCtrl.src = URL.createObjectURL(_this.VideoMediaStram);
        }

        that.videoCaptureValue.videoCtrl.play();
      });
    } else {
      this.StartVideoMediaCapture();
    }
  },
  Stop_Video_Capture: function Stop_Video_Capture() {
    jsMediaEngine.Notify_Video_Encode_Thread({
      command: "stopVideoEncode"
    });
    this.isStartVideoCapture = false;
    this.isVideoCaptureLoadedmetadata = false;
    clearInterval(this.videoCaptureInterval);
    this.videoCaptureInterval = 0;
    this.EndVideoMediaStream();

    if (this.videoCaptureValue && this.videoCaptureValue.videoCtrl) {
      this.videoCaptureValue.videoCtrl.pause();
    }

    this.videoCaptureValue = null;
  },
  Remove_Video_Capture: function Remove_Video_Capture() {
    var that = this;
    clearInterval(this.videoCaptureInterval);
    this.videoCaptureInterval = 0;
    this.EndVideoMediaStream();
    this.videoCaptureValue = null;

    if (that.videoCaptureValue.videoCtrl) {
      that.videoCaptureValue.videoCtrl.pause();
    }
  },
  Start_Desktop_Sharing: function Start_Desktop_Sharing() {
    if (this.desktopSharingMediaStram) {
      var that = this;
      return new _promise.default(function (resolve, reject) {
        var loadedmetadata =
        /*#__PURE__*/
        function () {
          var _ref3 = (0, _asyncToGenerator2.default)(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee13(e) {
            var w, h, track, imageBitmap, ssrc, handle, data;
            return _regenerator.default.wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    if (!that.isSupportImageCapture) {
                      _context13.next = 13;
                      break;
                    }

                    track = that.desktopSharingMediaStram.getVideoTracks()[0];
                    that.sharingImageCapture = new ImageCapture(track);
                    _context13.next = 5;
                    return that.sharingImageCapture.grabFrame();

                  case 5:
                    imageBitmap = _context13.sent;
                    that.desktopSharingCaptureWidth = imageBitmap.width;
                    that.desktopSharingCaptureHeight = imageBitmap.height;
                    w = imageBitmap.width;
                    h = imageBitmap.height;

                    try {
                      that.sharingOffscreenCanvas = that.desktopSharingValue.canvas.transferControlToOffscreen();
                      ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

                      if (_JsMediaEngine_Variables.default.localSharingEncMGR) {
                        handle = _JsMediaEngine_Variables.default.localSharingEncMGR.map.get(ssrc);

                        if (handle) {
                          data = {
                            command: "newSharingPara",
                            data: that.sharingOffscreenCanvas,
                            width: w,
                            height: h,
                            flipSend: that.flipSend,
                            is32bitbrowser: that.is32bitbrowser
                          };
                          handle.postMessage(data, [data.data]);
                        }
                      }
                    } catch (e) {
                      ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

                      if (_JsMediaEngine_Variables.default.localSharingEncMGR) {
                        handle = _JsMediaEngine_Variables.default.localSharingEncMGR.map.get(ssrc);

                        if (handle) {
                          data = {
                            command: "newSharingPara",
                            flipSend: that.flipSend,
                            is32bitbrowser: that.is32bitbrowser
                          };
                          handle.postMessage(data);
                        }
                      }
                    }

                    _context13.next = 22;
                    break;

                  case 13:
                    that.isdesktopCaptureLoadedmetadata = true;
                    w = that.desktopSharingValue.video.videoWidth;
                    h = that.desktopSharingValue.video.videoHeight;
                    that.desktopSharingValue.canvas.width = w;
                    that.desktopSharingValue.canvas.height = h;
                    that.desktopSharingCaptureWidth = w;
                    that.desktopSharingCaptureHeight = h;
                    that.desktopCaptureContext = that.desktopSharingValue.canvas.getContext('2d');
                    that.desktopSharingValue.video.removeEventListener('loadedmetadata', loadedmetadata);

                  case 22:
                    _JsMediaEngine_Variables.default.monitorSharingUserID = that.desktopSharingValue.ssid;
                    jsMediaEngine.Notify_Sharing_Encode_Thread({
                      command: "startSharingEncode",
                      width: w,
                      height: h,
                      fps: 8,
                      ssid: that.desktopSharingValue.ssid
                    }); // Tell the callback function to tell videoWidth and videoHeight

                    _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.CURRENT_DESKTOP_SHARING_WIDTH_HEIGHT, {
                      width: w,
                      height: h
                    });

                  case 25:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this);
          }));

          return function loadedmetadata(_x25) {
            return _ref3.apply(this, arguments);
          };
        }();

        if (that.isSupportImageCapture) {
          loadedmetadata();

          try {
            that.desktopSharingValue.video.srcObject = that.desktopSharingMediaStram;
          } catch (error) {
            that.desktopSharingValue.video.src = URL.createObjectURL(that.desktopSharingMediaStram);
          }

          resolve(true);
          return;
        } else {
          that.desktopSharingValue.video.addEventListener('loadedmetadata', loadedmetadata);
        }

        that.desktopSharingValue.video.setAttribute("playsinline", true);

        try {
          that.desktopSharingValue.video.srcObject = that.desktopSharingMediaStram;
        } catch (error) {
          that.desktopSharingValue.video.src = URL.createObjectURL(that.desktopSharingMediaStram);
        }

        that.desktopSharingValue.video.play();
        resolve(true);
      });
    } else {
      this.StartDesktopMediaCapture();
    }
  },
  Process_Sharing: function () {
    var _Process_Sharing = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee14() {
      var w, h, video, that, imageBitmap, ssrc, handle, data, context, img;
      return _regenerator.default.wrap(function _callee14$(_context14) {
        while (1) {
          switch (_context14.prev = _context14.next) {
            case 0:
              if (!(!this.desktopSharingValue || !this.desktopSharingSend)) {
                _context14.next = 2;
                break;
              }

              return _context14.abrupt("return");

            case 2:
              that = this;

              if (!this.isSupportImageCapture) {
                _context14.next = 21;
                break;
              }

              _context14.prev = 4;
              _context14.next = 7;
              return this.sharingImageCapture.grabFrame();

            case 7:
              imageBitmap = _context14.sent;
              w = imageBitmap.width;
              h = imageBitmap.height;
              ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

              if (_JsMediaEngine_Variables.default.localSharingEncMGR) {
                handle = _JsMediaEngine_Variables.default.localSharingEncMGR.map.get(ssrc);

                if (handle) {
                  data = {
                    command: "encodeSharingFrame",
                    data: imageBitmap,
                    isImage: true
                  };
                  handle.postMessage(data, [data.data]);
                }
              }

              _context14.next = 19;
              break;

            case 14:
              _context14.prev = 14;
              _context14.t0 = _context14["catch"](4);

              _Monitor.default.add_monitor3("SICF");

              ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

              if (_JsMediaEngine_Variables.default.localSharingEncMGR) {
                handle = _JsMediaEngine_Variables.default.localSharingEncMGR.map.get(ssrc);

                if (handle) {
                  data = {
                    command: "encodeSharingFrame"
                  };
                  handle.postMessage(data);
                }
              }

            case 19:
              _context14.next = 24;
              break;

            case 21:
              video = this.desktopSharingValue.video;
              w = video.videoWidth;
              h = video.videoHeight;

            case 24:
              if (w != this.desktopSharingCaptureWidth || h != this.desktopSharingCaptureHeight) {
                _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.CURRENT_DESKTOP_SHARING_WIDTH_HEIGHT, {
                  width: w,
                  height: h
                });

                this.desktopSharingCaptureWidth = w;
                this.desktopSharingCaptureHeight = h;
              }

              try {
                if (this.isdesktopCaptureLoadedmetadata && video) {
                  this.desktopSharingValue.canvas.width = w;
                  this.desktopSharingValue.canvas.height = h;
                  context = this.desktopCaptureContext; // 1.Video stream output to canvas

                  if (!this.is32bitbrowser || this.flipSend) {
                    context.drawImage(video, 0, 0, w, h, 0, 0, w, h);
                    img = context.getImageData(0, 0, w, h);
                    jsMediaEngine.Sharing_Encode_Frame(_JsMediaEngine_Variables.default.SPECIAL_ID, img.data, img.data.length, 0, w, h);
                    this.flipSend = false;
                  } else {
                    this.flipSend = true;
                    jsMediaEngine.Sharing_Encode_Frame(_JsMediaEngine_Variables.default.SPECIAL_ID, null, 0, 0, 0, 0);
                  }
                }
              } catch (e) {
                _Monitor.default.add_monitor3("GIDF");

                setTimeout(function () {
                  jsMediaEngine.Sharing_Encode_Frame(_JsMediaEngine_Variables.default.SPECIAL_ID, null, 0, 0, 0, 0);
                }, 1000);
              }

            case 26:
            case "end":
              return _context14.stop();
          }
        }
      }, _callee14, this, [[4, 14]]);
    }));

    return function Process_Sharing() {
      return _Process_Sharing.apply(this, arguments);
    };
  }(),
  Process_Video: function () {
    var _Process_Video = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee15() {
      var that, vw, vh, w, h, video, imageBitmap, img;
      return _regenerator.default.wrap(function _callee15$(_context15) {
        while (1) {
          switch (_context15.prev = _context15.next) {
            case 0:
              if (!this.isSupportImageCapture) {
                _context15.next = 6;
                break;
              }

              if (!this.wecancapturevideo) {
                _context15.next = 5;
                break;
              }

              // console.error("equal false")
              this.wecancapturevideo = false;
              _context15.next = 6;
              break;

            case 5:
              return _context15.abrupt("return");

            case 6:
              if (!(!this.videoCaptureValue || !this.isStartVideoCapture)) {
                _context15.next = 9;
                break;
              }

              this.wecancapturevideo = true; // console.error("equal return 1117")

              return _context15.abrupt("return");

            case 9:
              // console.error("equal return 1120")
              that = this;
              w = this.videoCaptureWidth;
              h = this.videoCaptureHeight;
              vw = w;
              vh = h;

              if (this.isSupportImageCapture) {// let imageProfile = await this.videoImageCapture.getPhotoSettings()
                // vw = imageProfile.imageWidth;
                // vh = imageProfile.imageHeight;
              } else {
                video = this.videoCaptureValue.videoCtrl;
                vw = video.videoWidth;
                vh = video.videoHeight;
              } // console.error("equal return 1136")


              if (w && h && (vw !== w || vh !== h)) {
                log("video width/height changed old => begin", w, h, vw, vh);

                _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.CURRENT_CAPTURE_VIDEO_WIDTH_HEIGHT, {
                  width: vw,
                  height: vh
                });

                jsMediaEngine.Notify_Video_Encode_Thread({
                  command: "updateVideoPara",
                  width: vw,
                  height: vh,
                  fps: this.videoCaptureValue.fps
                });
                this.videoCaptureWidth = vw;
                this.videoCaptureHeight = vh;
              }

              if (!this.isSupportImageCapture) {
                _context15.next = 31;
                break;
              }

              _context15.prev = 17;

              if (this.VideoMediaStram.getVideoTracks()[0].muted == true) {// this.VideoMediaStram.getVideoTracks()[0].muted = false
                //todo
              }

              _context15.next = 21;
              return this.videoImageCapture.grabFrame();

            case 21:
              imageBitmap = _context15.sent;
              jsMediaEngine.transportImageBitMap(this.captureVideoOutputCanvasDomList[0].id, imageBitmap); // console.error("CAPTURED")

              _context15.next = 29;
              break;

            case 25:
              _context15.prev = 25;
              _context15.t0 = _context15["catch"](17);

              _Monitor.default.add_monitor3("VICF");

              jsMediaEngine.transportImageBitMap(this.captureVideoOutputCanvasDomList[0].id, null); // console.error("The imagecapture error: ",e)

            case 29:
              // console.error("equal return 1160")
              this.wecancapturevideo = true; // that.Process_Video();
              // setTimeout(function () {
              //     that.Process_Video();
              // }, 0)

              return _context15.abrupt("return");

            case 31:
              // var source_x = 0;
              // var source_y = 0;
              // if(that.videoCaptureWidth != w || that.videoCaptureHeight != h){
              //     if(that.videoCaptureWidth < w){
              //         source_x = (w - that.videoCaptureWidth) / 2
              //     }else if(that.videoCaptureHeight < h){
              //         source_y = (h - that.videoCaptureHeight) / 2
              //     }
              // }
              if (this.isVideoCaptureLoadedmetadata && video) {
                if (video.paused || video.ended) {
                  video.play();
                }

                that.captureVideoOutputCanvasDomList[0].height = vh;
                that.captureVideoOutputCanvasDomList[0].width = vw;
                that.videoCaptureContext.drawImage(video, 0, 0, that.videoCaptureWidth, that.videoCaptureHeight, 0, 0, that.videoCaptureWidth, that.videoCaptureHeight);
                img = that.videoCaptureContext.getImageData(0, 0, that.videoCaptureWidth, that.videoCaptureHeight);
                jsMediaEngine.Video_Encode_Frame(_JsMediaEngine_Variables.default.SPECIAL_ID, img.data, img.data.length, 0);
              }

            case 32:
            case "end":
              return _context15.stop();
          }
        }
      }, _callee15, this, [[17, 25]]);
    }));

    return function Process_Video() {
      return _Process_Video.apply(this, arguments);
    };
  }(),
  Remove_Audio_Capture: function Remove_Audio_Capture() {
    jsMediaEngine.Notify_Audio_Thread_Status(_JsMediaEngine_Variables.default.SPECIAL_ID, jsEvent.AUDIO_REMOVE); //2 --- remove audio capture

    this.captureAudioStatus = jsEvent.AUDIO_REMOVE;
    this.firstSetDelay = true;

    if (this.audioRecordNode) {
      try {
        this.audioRecordNode.disconnect(this.audioCtx.destination);
      } catch (e) {
        this.JsMediaSDK_Log(e);
      }

      this.audioRecordNode = null;
    } //By now, we only support audioworklet-audio-capture


    if (this.webrtcAudioNode && this.isSupportAudioWorklet && _JsMediaEngine_Variables.default.AudioNode) {
      try {
        this.webrtcAudioNode.disconnect(_JsMediaEngine_Variables.default.AudioNode);
      } catch (e) {
        this.JsMediaSDK_Log(e);
      }

      this.webrtcAudioNode = null;
    }
  },
  Start_Video_Play: function Start_Video_Play() {
    if (this.videoRenderIntervalHandle) {
      return;
    }

    this.videoRenderIntervalHandle = this.JsMediaSDK_VideoRenderInterval(this.videorenderinterval);
  },
  Stop_Video_Play: function Stop_Video_Play() {
    jsMediaEngine.UpdateVideoPlayStatus(false); // jsMediaEngine.Clear_Decoded_Video_Frame();

    if (this.VideoRenderObj) {
      this.VideoRenderObj.ClearQueue();
      this.VideoRenderObj.Set_WaterMark_Info(this.waterMarkCanvas, this.isCreateVideoWaterMark, this.videoWaterMarkName);
    }

    if (this.videoRenderIntervalHandle) {
      clearInterval(this.videoRenderIntervalHandle);
      this.videoRenderIntervalHandle = null;
    }
  },
  Remove_Video_Play: function Remove_Video_Play() {
    jsMediaEngine.UpdateVideoPlayStatus(false);

    if (this.videoRenderIntervalHandle) {
      clearInterval(this.videoRenderIntervalHandle);
      this.videoRenderIntervalHandle = null;
    }

    jsMediaEngine.Notify_Video_Decode_Thread({
      command: "removeVideoPlay"
    });
  },
  EndMedia: function EndMedia() {
    try {
      _JsMediaEngine_Variables.default.rwgAgent.off("message", this.rwgAgentMessageListenerWrapper);
    } catch (e) {
      log.error('rwgAgent.off error', e);
    }

    try {
      this.rtcPeerConnectionList.forEach(function (rtc) {
        if (rtc) {
          rtc.forceClose();
          rtc = null;
        }
      });
      this.rtcPeerConnectionList = [];
    } catch (e) {
      log.error('clear rtcPeerConnectionList err', e);
    }

    try {
      if (this.AudioMediaStream) {
        this.AudioMediaStream.getTracks().forEach(function (track) {
          track.stop();
        });
        this.AudioMediaStream = null;
      } // maybe leakmemory!!!!!should test carefully.
      //Audio


      this.Remove_Audio_Play();
      this.Remove_Audio_Capture(); //Video

      this.Remove_Video_Play(); // this.Remove_Video_Capture();

      if (this.audioCtx) {
        this.audioCtx.close();
        this.audioCtx = null;
      }

      this.EndVideoMediaStream();
      this.EndSharingMediaStream();
      this.CloseBoringPeerConnection();
    } catch (ex) {
      log("endMedia", ex);
    }

    try {
      jsMediaEngine.disableSocketReconnect();
    } catch (ex) {
      log("endMedia", ex);
    }

    try {
      if (this.remoteControl) {
        this.remoteControl.destroy();
      }
    } catch (ex) {
      log("endMedia", ex);
    }
  },
  EndAudioMediaStream: function EndAudioMediaStream() {
    if (this.AudioMediaStream) {
      this.AudioMediaStream.getTracks().forEach(function (track) {
        track.stop();
      });
      this.AudioMediaStream = null;
    }
  },
  EndVideoMediaStream: function EndVideoMediaStream() {
    if (this.VideoMediaStram) {
      this.VideoMediaStram.getTracks().forEach(function (track) {
        track.stop();
      });
      this.VideoMediaStram = null;
    }
  },
  EndSharingMediaStream: function EndSharingMediaStream() {
    if (this.desktopSharingMediaStram) {
      this.desktopSharingMediaStram.getTracks().forEach(function (track) {
        track.stop();
      });
      this.desktopSharingMediaStram = null;
    }
  },
  StopSharingCapture: function StopSharingCapture() {
    this.EndSharingMediaStream();
    this.desktopSharingSend = false;
    this.isStartDesktopSharing = false;
    this.desktopSharingMediaStram = null;
    this.desktopSharingValue = null;
  },
  CloseBoringPeerConnection: function CloseBoringPeerConnection() {
    try {
      if (this.rtcConnectionB) {
        this.rtcConnectionB.close();
        this.rtcConnectionB = null;
      }

      if (this.rtcConnectionA) {
        this.rtcConnectionA.close();
        this.rtcConnectionA = null;
      }
    } catch (e) {
      log(e);
    }
  },
  UnMuteAudio: function UnMuteAudio() {
    this.captureAudioStatus = jsEvent.AUDIO_START;
    jsMediaEngine.Notify_Audio_Thread_Status(_JsMediaEngine_Variables.default.SPECIAL_ID, jsEvent.AUDIO_START);
  },
  MuteAudio: function MuteAudio() {
    this.Stop_Audio_Capture(); // this.captureAudioStatus = 1;
    // jsMediaEngine.Notify_Audio_Thread_Status(jsMediaEngineVariables.SPECIAL_ID, jsEvent.AUDIO_STOP)
  },
  handleDesktopCapture: function handleDesktopCapture(stream) {
    this.desktopSharingMediaStram = stream;
    var that = this;

    this.desktopSharingMediaStram.getVideoTracks()[0].onended = function () {
      // console.error("stop")
      _Monitor.default.add_monitor("SSBB");

      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.USER_STOP_DESKTOP_SHARING, null);

      that.StopSharingCapture();
    };

    this.Start_Desktop_Sharing();

    _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.DESKTOP_SHARING_CAPTURE_SUCCESS, null);
  },
  handleCaptureError: function handleCaptureError(error) {
    this.StopSharingCapture();

    _Monitor.default.add_monitor("SCCF");

    if (error.message == "Permission denied by system") {
      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.DESKTOP_SHARING_SYSTEM_ERROR, null);
    } else {
      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.DESKTOP_SHARING_ERROR, null);
    }
  },
  handleAudioCapture: function handleAudioCapture(stream) {
    _JsMediaEngine_Variables.default.monitorAudioCapture = true;

    _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.USER_GRANT_CAPTURE_AUDIO, null);

    this.AudioMediaStream = stream;
    this.Start_Audio_Capture(); // this.Start_Video_Capture();

    return;
  },
  handleVideoCapture: function handleVideoCapture(stream) {
    var _this2 = this;

    var that = this;
    return new _promise.default(
    /*#__PURE__*/
    function () {
      var _ref4 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee16(resolve, reject) {
        var isSuccess;
        return _regenerator.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                if (stream) {
                  _context16.next = 2;
                  break;
                }

                return _context16.abrupt("return", reject(new Error('no stream')));

              case 2:
                that.VideoMediaStram = stream;

                if (that.isSupportImageCapture) {
                  _this2.videoImageCapture = new ImageCapture(stream.getVideoTracks()[0]); // let imageProfile = await this.videoImageCapture.getPhotoSettings()

                  _this2.videoCaptureWidth = 640;
                  _this2.videoCaptureHeight = 360;
                }

                _context16.prev = 4;
                _context16.next = 7;
                return that.Start_Video_Capture();

              case 7:
                isSuccess = _context16.sent;
                resolve(isSuccess);
                _context16.next = 15;
                break;

              case 11:
                _context16.prev = 11;
                _context16.t0 = _context16["catch"](4);
                log("Start_Video_Capture", _context16.t0);
                reject(new Error('media stream is ok, but start video capture fail'));

              case 15:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this, [[4, 11]]);
      }));

      return function (_x26, _x27) {
        return _ref4.apply(this, arguments);
      };
    }());
  },
  handleAudioError: function handleAudioError(error) {
    //No Device
    //open
    _Monitor.default.add_monitor("HADF");

    this.AudioMediaStream = null;
    _JsMediaEngine_Variables.default.monitorAudioCapture = false;

    _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.USER_FORBIDDED_CAPTURE_AUDIO, null);
  },

  /**
   * @param error Error | MediaStream
   */
  handleVideoError: function handleVideoError(error) {
    // camera occupied scene
    // error.name == NotReadableError  Chrome
    // error.name == NotReadableError  firefox
    // error.name == SourceUnavailableError  edge
    // not allowed
    // error.name == NotAllowedError   Chrome
    // error.name == NotAllowedError   firefox
    // error.name == PermissionDeniedError   edge
    _JsMediaEngine_Variables.default.monitorVideoCapture = false;
    log("handleVideoError", error);
    var occupy = ['NotReadableError', 'SourceUnavailableError'];
    var notAllowed = ['NotAllowedError', 'PermissionDeniedError'];

    if (error instanceof _Error.CameraOccupiedError || error.name && occupy.indexOf(error.name) !== -1) {
      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.USER_CAMERA_IS_TAKEN_BY_OTHER_PROGRAMS, null);
    } else {
      _Monitor.default.add_monitor("HVDF");

      _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.USER_FORBIDDED_CAPTURE_VIDEO, null);
    }

    this.Stop_Video_Capture();
  },
  chromeAecWorkAround: function () {
    var _chromeAecWorkAround = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee17(sourcestream) {
      var rtcConnection, rtcLoopbackConnection, loopbackStream, offerOptions, offer, answer;
      return _regenerator.default.wrap(function _callee17$(_context17) {
        while (1) {
          switch (_context17.prev = _context17.next) {
            case 0:
              if (!(this.rtcConnectionA || this.rtcConnectionB)) {
                _context17.next = 2;
                break;
              }

              return _context17.abrupt("return", false);

            case 2:
              rtcConnection = null;
              rtcLoopbackConnection = null;
              loopbackStream = new MediaStream(); // this is the stream you will read from for actual audio output

              offerOptions = {
                offerVideo: true,
                offerAudio: true,
                offerToReceiveAudio: false,
                offerToReceiveVideo: false
              };
              rtcConnection = new RTCPeerConnection();
              rtcLoopbackConnection = new RTCPeerConnection();

              rtcConnection.onicecandidate = function (e) {
                return e.candidate && rtcLoopbackConnection.addIceCandidate(new RTCIceCandidate(e.candidate));
              };

              rtcLoopbackConnection.onicecandidate = function (e) {
                return e.candidate && rtcConnection.addIceCandidate(new RTCIceCandidate(e.candidate));
              };

              rtcLoopbackConnection.ontrack = function (e) {
                e.streams[0].getTracks().forEach(function (track) {
                  loopbackStream.addTrack(track);
                });
              }; // setup the loopback


              rtcConnection.addStream(sourcestream); // this stream would be the processed stream coming out of Web Audio API destination node

              _context17.next = 14;
              return rtcConnection.createOffer(offerOptions);

            case 14:
              offer = _context17.sent;
              _context17.next = 17;
              return rtcConnection.setLocalDescription(offer);

            case 17:
              _context17.next = 19;
              return rtcLoopbackConnection.setRemoteDescription(offer);

            case 19:
              _context17.next = 21;
              return rtcLoopbackConnection.createAnswer();

            case 21:
              answer = _context17.sent;
              _context17.next = 24;
              return rtcLoopbackConnection.setLocalDescription(answer);

            case 24:
              _context17.next = 26;
              return rtcConnection.setRemoteDescription(answer);

            case 26:
              //end rtcloopbackhack.js
              this.rtcConnectionA = rtcConnection;
              this.rtcConnectionB = rtcLoopbackConnection;
              return _context17.abrupt("return", loopbackStream);

            case 29:
            case "end":
              return _context17.stop();
          }
        }
      }, _callee17, this);
    }));

    return function chromeAecWorkAround(_x28) {
      return _chromeAecWorkAround.apply(this, arguments);
    };
  }(),

  /**
   * switch canvas for video streaming output
   * @param dom  canvas Dom | Array<canvas Dom>
   */
  switchCanvasForVideoCapture: function switchCanvasForVideoCapture(dom) {
    var doms = [].concat(dom);
    var domFirst = doms[0];
    this.captureVideoOutputCanvasDomList = doms;
    this.videoCaptureValue.canvasCtrl = domFirst;

    if (!this.isSupportImageCapture) {
      var w = this.videoCaptureValue.videoCtrl.videoWidth;
      var h = this.videoCaptureValue.videoCtrl.videoHeight;
      doms.forEach(function (item) {
        item.width = w;
        item.height = h;
      });
      this.videoCaptureValue.canvasCtrl.width = w;
      this.videoCaptureValue.canvasCtrl.height = h;
      this.videoCaptureContext = domFirst.getContext('2d');
    }
  },
  //////////////////////////////////
  //
  //                  Notify_Event
  //          APP>>>>>>>>>>>>>>>>>>>>JsMediaSDK
  //
  //          type:
  //          0   :   Start_Media
  //          1   :   ADD_RENDER_VIDEO
  //          2   :   STOP_RENDER_VIDEO
  //          3   :   ADD_CAPTURE_VIDEO
  //          4   :   DELETE_CAPTURE_VIDEO
  //          5   :   ADD_Render_AUDIO
  //          6   :   STOP_RENDER_AUDIO
  //          7   :   Add_Capture_Audio
  //          8   :   STOP_CAPTURE_AUDIO
  //          9   :   Change_FrameRate
  //          10   :   Change_Resolution
  //          11   :   Change_Speaker
  //          12   :   End_Media
  //          Type value struct{
  //                ssrc
  //                width
  //                height
  //                framerate:
  //                VideoSelectValue: // video device
  //                AudioSelectValue:  // audio device
  //                canvas  //render canvas
  //                display
  //            }
  ////////////////////////////////////
  Notify_MeidaSDK: function () {
    var _Notify_MeidaSDK = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee18(type, value) {
      var _this3 = this;

      var i, rendercanvasID, ssrc, renderCanvas, handle, data, canvasIDlist, canvasCtrlList, canvasDomList, customVideoDom, that, config, audioContextConfigure, dest, workaroundstream, audio_decode_channel, audio_encode_channel, audio_video_decode_channel, sharingInfo, remoteControl, extensionid, image;
      return _regenerator.default.wrap(function _callee18$(_context18) {
        while (1) {
          switch (_context18.prev = _context18.next) {
            case 0:
              log(type, value);
              i = 0;

              _Monitor.default.add_monitor2("B" + type);

              _context18.t0 = type;
              _context18.next = _context18.t0 === jsEvent.START_MEDIA ? 6 : _context18.t0 === jsEvent.ADD_RENDER_VIDEO ? 9 : _context18.t0 === jsEvent.STOP_RENDER_VIDEO ? 13 : _context18.t0 === jsEvent.SWITCH_CANVAS_FOR_VIDEO_CAPTURE ? 18 : _context18.t0 === jsEvent.START_CAPTURE_VIDEO ? 24 : _context18.t0 === jsEvent.STOP_CAPTURE_VIDEO ? 32 : _context18.t0 === jsEvent.ADD_RENDER_AUDIO ? 35 : _context18.t0 === jsEvent.STOP_RENDER_AUDIO ? 37 : _context18.t0 === jsEvent.UNMUTE_AUDIO ? 39 : _context18.t0 === jsEvent.MUTE_AUDIO ? 41 : _context18.t0 === jsEvent.START_SHARING ? 43 : _context18.t0 === jsEvent.STOP_SHARING ? 49 : _context18.t0 === jsEvent.CHANGE_FRAME_RATE ? 57 : _context18.t0 === jsEvent.CHANGE_VIDEO_RESOLUTION ? 58 : _context18.t0 === jsEvent.CHANGE_AUDIO_SPEAKER ? 59 : _context18.t0 === jsEvent.CHANGE_VIDEO_CAPTURE_DEVICE ? 61 : _context18.t0 === jsEvent.CHANGE_CURRENT_ACTIVE_SSRC ? 65 : _context18.t0 === jsEvent.CHANGE_CURRENT_SHARING_ACTIVE_SSRC ? 69 : _context18.t0 === jsEvent.LEAVE_MEETING ? 72 : _context18.t0 === jsEvent.MEETING_FAIL_OVER ? 74 : _context18.t0 === jsEvent.END_MEDIA ? 76 : _context18.t0 === jsEvent.CHANGE_AUDIO_MIC ? 80 : _context18.t0 === jsEvent.WEBRTC_RESTART ? 83 : _context18.t0 === jsEvent.LEAVE_COMPUTER_AUDIO ? 85 : _context18.t0 === jsEvent.JOIN_COMPUTER_AUDIO ? 96 : _context18.t0 === jsEvent.START_REMOTE_CONTROL ? 147 : _context18.t0 === jsEvent.CANCEL_REMOTE_CONTROL ? 159 : _context18.t0 === jsEvent.UPDATE_REMOTE_CONTROL_PROPERTIES ? 161 : _context18.t0 === jsEvent.RESEND_REMOTE_CONTROL_POSITION_PDU ? 163 : _context18.t0 === jsEvent.START_DESKTOP_SHARING ? 165 : _context18.t0 === jsEvent.STOP_DESKTOP_SHARING ? 179 : _context18.t0 === jsEvent.PAUSE_DESKTOP_SHARING ? 188 : _context18.t0 === jsEvent.RESUME_DESKTOP_SHARING ? 196 : _context18.t0 === jsEvent.CHECK_CHROME_SHARING_EXTENSION ? 205 : _context18.t0 === jsEvent.COMMAND_SOCKET_MESSAGE_NOTIFY ? 211 : _context18.t0 === jsEvent.USER_NODE_LIST ? 213 : 215;
              break;

            case 6:
              this.isMediaStart = true;
              this.StartAudioMediaCapture(); //start media render and capture

              return _context18.abrupt("break", 216);

            case 9:
              this.isCreateVideoWaterMark = value.enableWaterMark;

              if (this.isCreateVideoWaterMark) {
                this.videoWaterMarkName = value.waterMarkText;
              } else {
                this.videoWaterMarkName = "";
              }

              if (this.isSupportOffscreenCanvas) {
                // value.display = null;
                try {
                  rendercanvasID = value.canvas.id;
                  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

                  if (_JsMediaEngine_Variables.default.localVideoDecMGR) {
                    renderCanvas = value.canvas.transferControlToOffscreen();
                    handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(ssrc);

                    if (handle) {
                      data = {
                        command: "renderOfflineCanvas",
                        ssrc: value.ssrc,
                        rendercanvasID: rendercanvasID,
                        canvas: renderCanvas,
                        isCreateVideoWaterMark: this.isCreateVideoWaterMark,
                        videoWaterMarkName: this.videoWaterMarkName
                      };
                      handle.postMessage(data, [renderCanvas]);
                    }
                  }
                } catch (e) {
                  // console.log(e);
                  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

                  if (_JsMediaEngine_Variables.default.localVideoDecMGR) {
                    handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(ssrc);

                    if (handle) {
                      data = {
                        command: "renderOfflineCanvas",
                        rendercanvasID: rendercanvasID,
                        ssrc: value.ssrc,
                        videoWaterMarkName: this.videoWaterMarkName,
                        isCreateVideoWaterMark: this.isCreateVideoWaterMark
                      };
                      handle.postMessage(data);
                    }
                  }
                }
              } else {
                // for (i = 0; i < this.videoRenderArray.length; i++) {
                //     if (this.videoRenderArray[i].ssrc == value.ssrc) {
                //         return;
                //     }
                // }
                this.videoRenderArray.push(value);

                if (!this.VideoRenderObj) {
                  this.VideoRenderObj = new _JsMediaSDK_VideoRender.default((0, _assign.default)({}, {
                    Notify_APPUI: _JsMediaEngine_Variables.default.Notify_APPUI.bind(_JsMediaEngine_Variables.default),
                    isSupportOffscreenCanvas: false,
                    jsMediaEngine: jsMediaEngine
                  }));
                }

                this.VideoRenderObj.Set_Render_Array(this.videoRenderArray);
                this.VideoRenderObj.Set_WaterMark_Info(this.waterMarkCanvas, this.isCreateVideoWaterMark, this.videoWaterMarkName);
                this.Start_Video_Play();
                jsMediaEngine.UpdateVideoPlayStatus(true);
              }

              return _context18.abrupt("break", 216);

            case 13:
              this.videoWaterMarkName = "";
              this.isCreateVideoWaterMark = false;

              if (this.isSupportOffscreenCanvas) {
                jsMediaEngine.Notify_Video_Decode_Thread({
                  command: "stopVideoRender",
                  ssrc: value.ssrc
                });
              }

              if (this.videoRenderArray.length) {
                for (i = 0; i < this.videoRenderArray.length; i++) {
                  if (this.videoRenderArray[i].ssrc == value.ssrc) {
                    if (this.videoRenderArray[i].display) {
                      this.videoRenderArray[i].display.cleanup();
                    }

                    this.videoRenderArray[i].display = null;
                    this.videoRenderArray.splice(i, 1);

                    if (this.videoRenderArray.length == 0) {
                      this.Stop_Video_Play();
                    }
                  }
                }
              }

              return _context18.abrupt("break", 216);

            case 18:
              canvasIDlist = [];

              if (value instanceof Array) {
                canvasIDlist = value;
              } else {
                canvasIDlist.push(value);
              }

              canvasCtrlList = this.videoCaptureValue.canvasCtrlList;
              canvasDomList = canvasCtrlList.filter(function (item) {
                return canvasIDlist.indexOf(item.k) !== -1;
              }).map(function (item) {
                return item.dom;
              });
              this.switchCanvasForVideoCapture(canvasDomList);
              return _context18.abrupt("break", 216);

            case 24:
              jsMediaEngine.Update_Video_Encrpt(_JsMediaEngine_Variables.default.e2eencrypt);

              if (value.mode) {
                this.isSupportImageCapture = _util.default.isSupportImageCapture();
              } else {
                this.isSupportImageCapture = false;
              }

              if (jsMediaEngine.isVideoEncodeHandleReady()) {
                _context18.next = 30;
                break;
              }

              log.warn("not isVideoEncodeHandleReady so return");

              _Monitor.default.add_monitor('not isVideoEncodeHandleReady so return');

              return _context18.abrupt("return");

            case 30:
              if (!this.isStartVideoCapture) {
                this.VALUE_CACHE_FOR_START_CAPTURE_VIDEO = (0, _assign.default)({}, value);
                this.isStartVideoCapture = true; // 2018.06.28 : A value.canvas can be either a collection (array) of canvas ids or a separate canvas id string

                value.canvasCtrlList = [];

                if (value.canvas instanceof Array) {
                  for (i = 0; i < value.canvas.length; i++) {
                    value.canvasCtrlList.push({
                      k: value.canvas[i],
                      dom: _util.default.getDocumentHandle(value.canvas[i])
                    });

                    if (this.isSupportImageCapture) {
                      if (true) {
                        try {
                          jsMediaEngine.transportOfflineCanvas(_util.default.getDocumentHandle(value.canvas[i]).transferControlToOffscreen(), value.canvas[i]);
                        } catch (e) {// console.error(e)
                        }
                      }
                    }
                  }

                  if (this.isSupportImageCapture) {
                    this.isSendVideoOfflineCanvas = true;
                  }
                } else {
                  value.canvasCtrlList.push({
                    k: value.canvas,
                    dom: _util.default.getDocumentHandle(value.canvas)
                  });
                }

                value.canvasCtrl = value.canvasCtrlList[0].dom; // By default, the first canvas dom is used as the output source of the video stream

                this.captureVideoOutputCanvasDomList = [].concat(value.canvasCtrl);
                /**
                 * from 2019.10.08 iPad os 13&13+ do not support "send video"
                 * if the video dom is "display:none;" or if the video dom is not in the document
                 */

                if (_util.default.browser.isSafari) {
                  customVideoDom = document.createElement("video");
                  customVideoDom.setAttribute("style", "position:fixed;top:-10000px;left:-10000px;visibility:hidden;");
                  document.body.appendChild(customVideoDom);
                  value.videoCtrl = customVideoDom;
                } else {
                  value.videoCtrl = _util.default.getDocumentHandle(value.video);
                }

                this.videoCaptureValue = value;
                this.Start_Video_Capture();
              } else {
                log.warn("video capture is already started, do not call again.");
              }

              return _context18.abrupt("break", 216);

            case 32:
              that = this;
              return _context18.abrupt("return", new _promise.default(function (resolve, reject) {
                try {
                  if (_this3.isMediaDevicesGetUserMediaNow) {
                    _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.STOP_VIDEO_CAPTURE_FAILED, null);

                    return reject(new Error("Too many calls : the device is opening camera now, cannot stop video capture"));
                  }

                  if (that.isStartVideoCapture) {
                    that.Stop_Video_Capture();
                  }

                  _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.STOP_VIDEO_CAPTURE_SUCCESS, null);

                  resolve(true);
                } catch (ex) {
                  _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.STOP_VIDEO_CAPTURE_FAILED, null);

                  reject(ex);
                }
              }));

            case 35:
              if (this.audioRenderArray.length == 0) {
                this.audioRenderArray.push(value);
                this.Start_Audio_Play(); // Add_Audio_Decode_Thread(value.ssrc, null);
              }

              return _context18.abrupt("break", 216);

            case 37:
              if (this.audioRenderArray.length > 0) {
                this.Stop_Audio_Play();

                for (i = 0; i < this.audioRenderArray.length; i++) {
                  if (this.audioRenderArray[i].ssrc == value.ssrc) {
                    this.audioRenderArray.splice(i, 1);
                  }
                }
              }

              return _context18.abrupt("break", 216);

            case 39:
              // if(this.captureAudioStatus == 2){
              //     this.EndAudioMediaStream();
              // }
              // if(this.firstSetDelay){
              //     this.firstSetDelay = false;
              //     jsMediaEngine.Set_Aec_Delay();
              //     jsMediaEngine.Reset_Aec();
              // }
              // if(value){
              //     this.audioCapture = value;
              //     this.Start_Audio_Capture();
              // }
              // return;
              this.UnMuteAudio();
              return _context18.abrupt("break", 216);

            case 41:
              // if (this.audioCapture) {
              //     this.Stop_Audio_Capture();
              // }
              this.MuteAudio();
              return _context18.abrupt("break", 216);

            case 43:
              // Zoom_Monitor.add_monitor("SARS");
              this.currentshareactive = value.ssrc;

              if (this.currentshareactive == undefined) {
                _Monitor.default.add_monitor2("SSRC");
              }

              this.isCreateSharingWaterMark = value.enableWaterMark;

              if (this.isCreateSharingWaterMark) {
                this.sharingWaterMarkName = value.waterMarkText;
              } else {
                this.sharingWaterMarkName = "";
              }

              if (this.isSupportOffscreenCanvas) {
                try {
                  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;
                  console.log(_JsMediaEngine_Variables.default.localSharingDecMGR);

                  if (_JsMediaEngine_Variables.default.localSharingDecMGR) {
                    this.sharingRenderCanvas = value.canvas.transferControlToOffscreen();
                    handle = _JsMediaEngine_Variables.default.localSharingDecMGR.map.get(ssrc);
                    data = {
                      command: "sharingRenderCanvas",
                      canvas: this.sharingRenderCanvas,
                      ssrc: this.currentshareactive,
                      isCreateSharingWaterMark: this.isCreateSharingWaterMark,
                      sharingWaterMarkName: this.sharingWaterMarkName
                    };
                    handle.postMessage(data, [data.canvas]);
                  }
                } catch (e) {
                  ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

                  if (_JsMediaEngine_Variables.default.localSharingDecMGR) {
                    handle = _JsMediaEngine_Variables.default.localSharingDecMGR.map.get(ssrc);
                    data = {
                      command: "sharingRenderCanvas",
                      ssrc: this.currentshareactive,
                      isCreateSharingWaterMark: this.isCreateSharingWaterMark,
                      sharingWaterMarkName: this.sharingWaterMarkName
                    };
                    handle.postMessage(data);
                  }
                }
              } else {
                if (!this.SharingRenderObj) {
                  this.SharingRenderObj = new _JsMediaSDK_SharingRender.default((0, _assign.default)({}, {
                    Notify_APPUI: _JsMediaEngine_Variables.default.Notify_APPUI.bind(_JsMediaEngine_Variables.default),
                    PubSub: _pubSub.default,
                    jsMediaEngine: jsMediaEngine
                  }));
                }

                this.sharingDisplay = new _WebGLCanvas.default(value.canvas);
                this.SharingRenderObj.Set_Render_WebGL(this.sharingDisplay);
                this.SharingRenderObj.Change_Current_SSRC(this.currentshareactive);
                this.SharingRenderObj.Set_WaterMark_Info(this.waterMarkCanvas, this.isCreateSharingWaterMark, this.sharingWaterMarkName);

                if (!this.sharingInterval) {
                  this.sharingInterval = this.JsMediaSDK_SharingRenderInterval(this.sharingIntervalTime);
                }

                jsMediaEngine.UpdateSharingPlayStatus(true);
              }

              return _context18.abrupt("break", 216);

            case 49:
              jsMediaEngine.UpdateSharingPlayStatus(false);

              if (this.isSupportOffscreenCanvas) {
                jsMediaEngine.Notify_Sharing_Decode_Thread({
                  command: "stopSharingRender"
                });
              }

              this.isCreateSharingWaterMark = false;
              this.sharingWaterMarkName = "";

              if (this.sharingInterval) {
                clearInterval(this.sharingInterval);
                this.sharingInterval = 0;
              }

              if (this.sharingDisplay) {
                this.sharingDisplay.clear();
                this.sharingDisplay.cleanup();
                this.sharingDisplay = null;
              }

              if (this.SharingRenderObj) {
                this.SharingRenderObj.ClearQueue();
                this.SharingRenderObj.Set_WaterMark_Info(this.waterMarkCanvas, this.isCreateSharingWaterMark, this.sharingWaterMarkName);
              }

              return _context18.abrupt("break", 216);

            case 57:
              return _context18.abrupt("break", 216);

            case 58:
              return _context18.abrupt("break", 216);

            case 59:
              if (value.AudioSelectValue && this.audioDomNode) {
                this.audioSpeakerValue = value.AudioSelectValue;
                this.audioDomNode.setSinkId(value.AudioSelectValue).catch(function (e) {
                  _Monitor.default.add_monitor("AODF");

                  _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.AUDIO_SPEAKER_SET_ERROR, null);
                });
              }

              return _context18.abrupt("break", 216);

            case 61:
              //Change_Capture_Devic:
              // value.VideoSelectValue
              config = (0, _assign.default)({}, this.VALUE_CACHE_FOR_START_CAPTURE_VIDEO, value);
              this.Stop_Video_Capture(); // this.Notify_MeidaSDK(jsEvent.START_CAPTURE_VIDEO, config);

              if (!this.isStartVideoCapture) {
                this.isStartVideoCapture = true;
                config.canvasCtrlList = [];

                if (config.canvas instanceof Array) {
                  for (i = 0; i < config.canvas.length; i++) {
                    config.canvasCtrlList.push({
                      k: config.canvas[i],
                      dom: _util.default.getDocumentHandle(config.canvas[i])
                    });
                  }
                } else {
                  config.canvasCtrlList.push({
                    k: config.canvas,
                    dom: _util.default.getDocumentHandle(config.canvas)
                  });
                }

                config.canvasCtrl = config.canvasCtrlList[0].dom;
                config.videoCtrl = _util.default.getDocumentHandle(config.video);
                this.videoCaptureValue = config;
                this.Start_Video_Capture();
              }

              return _context18.abrupt("break", 216);

            case 65:
              if (this.currentactive != value.ssrc) {
                // jsMediaEngine.Clear_Decoded_Video_Frame(); //clear the last SSRC video queue.
                this.currentactive = value.ssrc;
                _JsMediaEngine_Variables.default.CurrentSSRC = this.currentactive;
              }

              jsMediaEngine.Notify_Audio_Thread_CurrentSSRC(_JsMediaEngine_Variables.default.CurrentSSRC);

              if (this.isSupportOffscreenCanvas) {
                ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

                if (_JsMediaEngine_Variables.default.localVideoDecMGR) {
                  handle = _JsMediaEngine_Variables.default.localVideoDecMGR.map.get(ssrc);

                  if (handle) {
                    data = {
                      command: "CHANGE_CURRENT_ACTIVE_SSRC",
                      ssrc: value.ssrc
                    };
                    handle.postMessage(data);
                  }
                }
              } else {
                if (!this.VideoRenderObj) {
                  this.VideoRenderObj = new _JsMediaSDK_VideoRender.default((0, _assign.default)({}, {
                    Notify_APPUI: _JsMediaEngine_Variables.default.Notify_APPUI.bind(_JsMediaEngine_Variables.default),
                    isSupportOffscreenCanvas: false,
                    jsMediaEngine: jsMediaEngine
                  }));
                }

                this.VideoRenderObj.Change_Current_SSRC(this.currentactive);
              }

              return _context18.abrupt("break", 216);

            case 69:
              if (this.currentshareactive != value.ssrc) {
                // jsMediaEngine.Clear_Decoded_Sharing_Frame(); //clear the last SSRC sharing queue.
                this.currentshareactive = value.ssrc;
              }

              if (this.isSupportOffscreenCanvas) {
                ssrc = _JsMediaEngine_Variables.default.SPECIAL_ID;

                if (_JsMediaEngine_Variables.default.localSharingDecMGR) {
                  handle = _JsMediaEngine_Variables.default.localSharingDecMGR.map.get(ssrc);

                  if (handle) {
                    data = {
                      command: "CHANGE_CURRENT_SHARING_ACTIVE_SSRC",
                      ssrc: value.ssrc
                    };
                    handle.postMessage(data);
                  }
                }
              } else {
                if (!this.SharingRenderObj) {
                  this.SharingRenderObj = new _JsMediaSDK_SharingRender.default((0, _assign.default)({}, {
                    Notify_APPUI: _JsMediaEngine_Variables.default.Notify_APPUI.bind(_JsMediaEngine_Variables.default),
                    PubSub: _pubSub.default,
                    jsMediaEngine: jsMediaEngine
                  }));
                }

                this.SharingRenderObj.Change_Current_SSRC(this.currentshareactive);
              }

              return _context18.abrupt("break", 216);

            case 72:
              this.Stop_Audio_Play();
              return _context18.abrupt("break", 216);

            case 74:
              this.Meeting_Fail_Over(value.audio_websocket_address, value.video_websocket_address);
              return _context18.abrupt("break", 216);

            case 76:
              log("jsEvent.END_MEDIA");

              _pubSub.default.trigger(jsEvent.PUBSUB_EVT.END_MEDIA);

              this.destroy().catch(function (ex) {
                return log.error(ex);
              });
              return _context18.abrupt("break", 216);

            case 80:
              // Zoom_Monitor.add_monitor("CAMI");
              if (this.audioCapture && value && this.audioCtx) {
                // var isAudioPlaying = this.audioPlay;
                // this.Remove_Audio_Play();
                this.Remove_Audio_Capture();
                this.EndAudioMediaStream();

                try {
                  this.isCaputureNodeConnect = false;
                  this.audioCapture = value;

                  if (this.audioCtx.sampleRate != this.sampleRate) {
                    this.sampleRate = this.audioCtx.sampleRate;
                    jsMediaEngine.Modify_Audio_SampleRate(this.sampleRate);
                  }

                  if (this.isSupportAudioWorklet) {
                    this.Start_Audio_Capture();
                    jsMediaEngine.Notify_Audio_Thread_Status(_JsMediaEngine_Variables.default.SPECIAL_ID, jsEvent.AUDIO_START);
                    jsMediaEngine.Reset_Aec();
                  } else {
                    //By now, we turn off ScriptAudioNode Audio Capture.
                    // Need more test when use it.
                    if (isAudioPlaying) {
                      this.Start_Audio_Play();
                    }

                    this.Start_Audio_Capture();
                    jsMediaEngine.Reset_Aec();
                  }
                } catch (e) {
                  this.JsMediaSDK_Log(e);
                }
              }

              return _context18.abrupt("return");

            case 83:
              if (value) {
                jsMediaEngine.Notify_Audio_Thread_Status(_JsMediaEngine_Variables.default.SPECIAL_ID, jsEvent.AUDIO_START);
                this.EndAudioMediaStream();
                this.Remove_Audio_Capture();
                this.audioCapture = value;
                this.Start_Audio_Capture();
                jsMediaEngine.Reset_Aec();
              }

              return _context18.abrupt("break", 216);

            case 85:
              this.Remove_Audio_Capture();
              this.Remove_Audio_Play();
              this.EndAudioMediaStream();
              this.CloseBoringPeerConnection();

              try {
                if (_JsMediaEngine_Variables.default.AudioNode) {
                  _JsMediaEngine_Variables.default.AudioNode.port = null;
                }
              } catch (ex) {
                log("AudioNode.port", ex);
              }

              _JsMediaEngine_Variables.default.AudioNode = null;

              if (this.audioCtx) {
                this.audioCtx.close();
                this.isCaputureNodeConnect = false;
              }

              this.audioCtx = null;
              this.audioCapture = null;
              this.audioPlay = false;
              return _context18.abrupt("break", 216);

            case 96:
              _context18.prev = 96;
              _JsMediaEngine_Variables.default.monitorAudioUserID = value.CaptureAudioInfo.ssrc;
              jsMediaEngine.Notify_Audio_Encode_Thread({
                command: "startAudioEncode",
                ssid: value.CaptureAudioInfo.ssrc
              });
              jsMediaEngine.Update_Audio_Encrpt(_JsMediaEngine_Variables.default.e2eencrypt);
              this.Remove_Audio_Play();
              this.Remove_Audio_Capture();
              this.EndAudioMediaStream();
              this.CloseBoringPeerConnection();
              jsMediaEngine.Notify_Audio_Thread_Status(_JsMediaEngine_Variables.default.SPECIAL_ID, jsEvent.AUDIO_START);

              if (this.audioCtx) {
                this.audioCtx.close();
                this.isCaputureNodeConnect = false;
              }

              audioContextConfigure = {};

              if (_util.default.browser.isChrome && !_util.default.isAndroidBrowser() && _util.default.getBrowserVersion() > 74) {
                audioContextConfigure = {
                  sampleRate: 16000
                };
              }

              this.audioCtx = new (window.AudioContext || window.webkitAudioContext)(audioContextConfigure);

              if (this.audioCtx.sampleRate != this.sampleRate) {
                this.sampleRate = this.audioCtx.sampleRate;
                jsMediaEngine.Modify_Audio_SampleRate(this.sampleRate);
              }

              if (!this.isSupportAudioWorklet) {
                _context18.next = 139;
                break;
              }

              that = this;
              _context18.next = 114;
              return this.audioCtx.audioWorklet.addModule(that.audioWorkletJsPath);

            case 114:
              _JsMediaEngine_Variables.default.AudioNode = new _ZoomAudioWorkletNode.default(that.audioCtx); // jsMediaEngineVariables.AudioNode.connect(that.audioCtx.destination);

              if (!(_util.default.browser.isChrome && !_util.default.isAndroidBrowser())) {
                _context18.next = 127;
                break;
              }

              dest = that.audioCtx.createMediaStreamDestination();

              _JsMediaEngine_Variables.default.AudioNode.connect(dest);

              _context18.next = 120;
              return that.chromeAecWorkAround(dest.stream);

            case 120:
              workaroundstream = _context18.sent;

              if (!that.audioDomNode) {
                that.audioDomNode = new Audio();
              }

              that.audioDomNode.srcObject = workaroundstream;

              if (!value.speakerInfo || !value.speakerInfo.defaultDeviceId) {
                that.audioDomNode.setSinkId("default").catch(function (e) {
                  _Monitor.default.add_monitor("AODF");

                  _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.AUDIO_SPEAKER_SET_ERROR, null);
                });
              } else {
                that.audioDomNode.setSinkId(value.speakerInfo.defaultDeviceId).catch(function (e) {
                  _Monitor.default.add_monitor("AODF");

                  _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.AUDIO_SPEAKER_SET_ERROR, null);
                });
              }

              that.audioDomNode.play();
              _context18.next = 128;
              break;

            case 127:
              _JsMediaEngine_Variables.default.AudioNode.connect(that.audioCtx.destination);

            case 128:
              audio_decode_channel = new MessageChannel();
              audio_encode_channel = new MessageChannel();

              _JsMediaEngine_Variables.default.AudioNode.port.postMessage({
                status: "encodeAudioPort"
              }, [audio_encode_channel.port2]);

              _JsMediaEngine_Variables.default.AudioNode.port.postMessage({
                status: "decodeAudioPort"
              }, [audio_decode_channel.port1]);

              _JsMediaEngine_Variables.default.AudioNode.port.postMessage({
                status: "sampleRate",
                data: that.audioCtx.sampleRate
              });

              jsMediaEngine.Notify_Audio_Thread_Msg_Channel(audio_decode_channel, audio_encode_channel);
              that.Start_Audio_Play(); //msg channel create here!

              if (this.isSupportOffscreenCanvas) {
                audio_video_decode_channel = new MessageChannel(); // jsMediaEngineVariables.AudioNode.port.postMessage({status: "decodeAudioPortWithVideo"}, [audio_video_decode_channel.port2]);

                jsMediaEngine.Notify_Audio_Video_Thread_Msg_Channel(audio_video_decode_channel);
                jsMediaEngine.Notify_Audio_Thread_Msg_Channel2(audio_video_decode_channel);
              }

              if (value.CaptureAudio) {
                that.audioCapture = value.CaptureAudioInfo;
                that.Start_Audio_Capture();

                if (this.firstSetDelay) {
                  this.firstSetDelay = false;
                  jsMediaEngine.Reset_Aec();
                  jsMediaEngine.Set_Aec_Delay();
                }
              }

              _context18.next = 141;
              break;

            case 139:
              this.Start_Audio_Play();

              if (value.CaptureAudio) {
                this.audioCapture = value.CaptureAudioInfo;
                this.Start_Audio_Capture();

                if (this.firstSetDelay) {
                  this.firstSetDelay = false;
                  jsMediaEngine.Reset_Aec();
                  jsMediaEngine.Set_Aec_Delay();
                }
              }

            case 141:
              _context18.next = 146;
              break;

            case 143:
              _context18.prev = 143;
              _context18.t1 = _context18["catch"](96);
              this.JsMediaSDK_Log(_context18.t1);

            case 146:
              return _context18.abrupt("break", 216);

            case 147:
              /**
               socketURL
               meetingID
               condID
               scaleWidth : The exact width of the sharing video area in the web page, in pixels
               scaleHeight
               srcOffsetX : default 0  The top left vertex of video relative to the top left vertex of the webpage horizontal offset
               srcOffsetY : default 0
               os: {Number}
               dom: dom Object
               */
              log("sdk start remote control 1");
              sharingInfo = this.sharingWidthAndHeightInfo;
              remoteControl = new _RemoteControl.default((0, _assign.default)({
                dom: document
              }, value));
              this.remoteControl = remoteControl;
              log("sharingInfo", sharingInfo);
              remoteControl.setDstWidthAndHeight(sharingInfo.logicWidth, sharingInfo.logicHeight);
              remoteControl.setSrcWidthAndHeight(sharingInfo.logicWidth, sharingInfo.logicHeight);
              remoteControl.setSrcScaleWidthAndHeight(value.scaleWidth, value.scaleHeight);
              remoteControl.setSrcOffsetXY(value.srcOffsetX, value.srcOffsetY);
              remoteControl.setRemoteOS(value.os);
              return _context18.abrupt("return", remoteControl.start().then(function (isSuccess) {
                _JsMediaEngine_Variables.default.Notify_APPUI(isSuccess ? jsEvent.START_REMOTE_CONTROL_SUCCESS : jsEvent.START_REMOTE_CONTROL_FAILED);

                if (isSuccess) {
                  remoteControl.onPasteTextLengthOverflow(function () {
                    _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.REMOTE_CONTROL_PASTE_TEXT_LENGTH_OVERFLOW);
                  });
                  remoteControl.onReturnCopiedText(function (data) {
                    log(data);

                    _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.REMOTE_CONTROL_COPIED_TEXT_NOTIFY, data);
                  });
                }

                return isSuccess;
              }).catch(function (ex) {
                log(ex);

                _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.START_REMOTE_CONTROL_FAILED);

                _Monitor.default.add_monitor(["RMCT", ex.message, "f"].join(""));

                return _promise.default.reject(ex);
              }));

            case 159:
              return _context18.abrupt("return", this.remoteControl.destroy().then(function (isSuccess) {
                _JsMediaEngine_Variables.default.Notify_APPUI(isSuccess ? jsEvent.CANCEL_REMOTE_CONTROL_SUCCESS : jsEvent.CANCEL_REMOTE_CONTROL_FAILED);

                return isSuccess;
              }));

            case 161:
              /**
               * {Number} #{value.scaleWidth}
               * {Number} #{value.scaleHeight}
               * {Boolean} #{value.isControllerNow}
               * {String} #{value.os}
               */
              if (this.remoteControl) {
                if (value.scaleWidth && value.scaleHeight) {
                  this.remoteControl.setSrcScaleWidthAndHeight(value.scaleWidth, value.scaleHeight);
                }

                if (value.srcOffsetX || value.srcOffsetY) {
                  this.remoteControl.setSrcOffsetXYAndSendPDU(value.srcOffsetX, value.srcOffsetY);
                }

                if ((0, _isBoolean.default)(value.isControllerNow)) {
                  this.remoteControl.setIsControlerNow(value.isControllerNow);
                }

                if ((0, _isNumber.default)(value.os)) {
                  this.remoteControl.setRemoteOS(value.os);
                }
              }

              return _context18.abrupt("break", 216);

            case 163:
              if (this.remoteControl) {
                this.remoteControl.sendPostionPDU();
              }

              return _context18.abrupt("break", 216);

            case 165:
              this.flipSend = true;

              if (value.mode) {
                this.isSupportImageCapture = _util.default.isSupportImageCapture();
              } else {
                this.isSupportImageCapture = false;
              }

              if (this.isStartDesktopSharing) {
                _context18.next = 177;
                break;
              }

              jsMediaEngine.Update_Sharing_Encrpt(_JsMediaEngine_Variables.default.e2eencrypt);
              this.isStartDesktopSharing = true;
              this.desktopSharingSend = true;
              value.video = _util.default.getDocumentHandle(value.video);
              value.canvas = _util.default.getDocumentHandle(value.canvas);
              this.desktopSharingValue = value;
              this.Start_Desktop_Sharing();
              _context18.next = 178;
              break;

            case 177:
              return _context18.abrupt("return");

            case 178:
              return _context18.abrupt("break", 216);

            case 179:
              this.flipSend = true;

              if (!this.isStartDesktopSharing) {
                _context18.next = 186;
                break;
              }

              this.desktopSharingSend = false;
              this.StopSharingCapture();
              jsMediaEngine.Update_Sharing_Encode_Status({
                command: "stop"
              });
              _context18.next = 187;
              break;

            case 186:
              return _context18.abrupt("return");

            case 187:
              return _context18.abrupt("break", 216);

            case 188:
              // Zoom_Monitor.add_monitor("PADS");
              this.flipSend = true;

              if (!this.isStartDesktopSharing) {
                _context18.next = 194;
                break;
              }

              this.desktopSharingSend = false;
              jsMediaEngine.Update_Sharing_Encode_Status({
                command: "pause"
              });
              _context18.next = 195;
              break;

            case 194:
              return _context18.abrupt("return");

            case 195:
              return _context18.abrupt("break", 216);

            case 196:
              // Zoom_Monitor.add_monitor("REDS");
              this.flipSend = true;

              if (!this.isStartDesktopSharing) {
                _context18.next = 203;
                break;
              }

              this.desktopSharingSend = true;
              this.Process_Sharing();
              jsMediaEngine.Update_Sharing_Encode_Status({
                command: "resume"
              });
              _context18.next = 204;
              break;

            case 203:
              return _context18.abrupt("return");

            case 204:
              return _context18.abrupt("break", 216);

            case 205:
              // Zoom_Monitor.add_monitor("CCSE");
              extensionid = 'kgjfgplpablkjnlkjmjdecgdpfankdle';
              image = document.createElement('img');
              image.src = 'chrome-extension://' + extensionid + '/images/trash.png';

              image.onload = function () {
                _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.CHECK_CHROME_SHARING_EXTENSION_RESPONSE, true);
              };

              image.onerror = function () {
                _JsMediaEngine_Variables.default.Notify_APPUI(jsEvent.CHECK_CHROME_SHARING_EXTENSION_RESPONSE, false);
              };

              return _context18.abrupt("break", 216);

            case 211:
              log.warn("COMMAND_SOCKET_MESSAGE_NOTIFY is deprecated");
              return _context18.abrupt("break", 216);

            case 213:
              /**
               * @type value {USER_NODE[]}
               * @type USER_NODE {Object}
               * @type USER_NODE.userid {string}
               * @type USER_NODE.sn {string}
               * @type USER_NODE.bremove {boolean}
               */
              jsMediaEngine.setUserNodeListToWorker(value);
              return _context18.abrupt("break", 216);

            case 215:
              log("CAN NOT HANDLE THE EVENT!");

            case 216:
            case "end":
              return _context18.stop();
          }
        }
      }, _callee18, this, [[96, 143]]);
    }));

    return function Notify_MeidaSDK(_x29, _x30) {
      return _Notify_MeidaSDK.apply(this, arguments);
    };
  }(),
  JsMediaSDK_OnAudioprocess: function JsMediaSDK_OnAudioprocess(ev) {
    if (this.audioPlay) {
      var channel_number = ev.outputBuffer.numberOfChannels; //mix

      var audio_buf = jsMediaEngine.Get_Decoded_Audio_Frame(0, 0, this.audionodebuffersize);

      if (audio_buf) {
        if (audio_buf.length < this.audionodebuffersize) {
          this.JsMediaSDK_Log("Audio is Not enough! length:" + audio_buf.length);
        }

        for (var i = 0; i < channel_number; i++) {
          var ch = ev.outputBuffer.getChannelData(i);
          ch.set(audio_buf);

          for (var j = audio_buf.length; j < this.audionodebuffersize; j++) {
            ch[j] = 0;
          }
        }
      } else {
        this.JsMediaSDK_Log("Active Queue  audio:" + jsMediaEngine.Get_Decoded_Audio_Buffer_Length());

        for (var i = 0; i < channel_number; ++i) {
          var ch = ev.outputBuffer.getChannelData(i);
          var localData = new Uint8Array(ch.length);
          ch.set(localData);
        }
      }
    }
  },
  JsMediaSDK_VideoRenderInterval: function JsMediaSDK_VideoRenderInterval(time) {
    var videoRenderInterval = this.VideoRenderObj.JsMediaSDK_VideoRender.bind(this.VideoRenderObj);
    var interval = setInterval(videoRenderInterval, time);
    return interval;
  },
  JsMediaSDK_SharingRenderInterval: function JsMediaSDK_SharingRenderInterval(time) {
    var sharingRenderInterval = this.SharingRenderObj.JsMediaSDK_SharingRender.bind(this.SharingRenderObj);
    var interval = setInterval(sharingRenderInterval, time);
    return interval;
  },

  /**
   * destroy all workers
   */
  destroy: function () {
    var _destroy = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee19() {
      return _regenerator.default.wrap(function _callee19$(_context19) {
        while (1) {
          switch (_context19.prev = _context19.next) {
            case 0:
              log("destroy");
              /**
               * Before 2019-12-2, we ignore that "destroy" method could be called during audio/video/sharing initiation
               * "during" means that initXXXDecode/initXXXEncode is called but not finished,
               * then some intervals or async process could not be terminated after "destroy",
               * so we need "isDestroy", check this value before these intervals or async process.
               *
               * (This issue is found in "breakout room")
               * @type {boolean}
               */

              this.isDestroy = true;
              this.EndMedia();
              jsMediaEngine.Stop_Monitor();
              jsMediaEngine.destroyAllWorkers();

              _pubSub.default.clearAllSubscriptions();

            case 6:
            case "end":
              return _context19.stop();
          }
        }
      }, _callee19, this);
    }));

    return function destroy() {
      return _destroy.apply(this, arguments);
    };
  }()
};
module.exports = JsMediaSDK_Instance;

/***/ }),

/***/ "./src/lib/ZoomAudioWorkletNode":
/*!**************************************!*\
  !*** ./src/lib/ZoomAudioWorkletNode ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _JsMediaEngine__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JsMediaEngine */ "./src/lib/JsMediaEngine.js");
/* harmony import */ var _JsMediaEngine__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_JsMediaEngine__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _inside_JsMediaEngine_Variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../inside/JsMediaEngine_Variables */ "./src/inside/JsMediaEngine_Variables.js");
/* harmony import */ var _inside_JsMediaEngine_Variables__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_inside_JsMediaEngine_Variables__WEBPACK_IMPORTED_MODULE_1__);


let zoomAudioWorkletNode = null;

if ((typeof AudioWorklet === 'function')) {
    class ZoomAudioWorkletNode extends AudioWorkletNode {
        constructor(context) {
            super(context, 'zoomAudioWorklet');
            this.port.onmessage = this.handleMessage.bind(this);
        }

        handleMessage(event) {
            var data = event.data;
            switch (data.status) {
                case "delay": {
                    if (_inside_JsMediaEngine_Variables__WEBPACK_IMPORTED_MODULE_1___default.a.localAudioDecMGR) {
                        var f = _inside_JsMediaEngine_Variables__WEBPACK_IMPORTED_MODULE_1___default.a.localAudioDecMGR.map.get(0);
                        if (f) {
                            f.postMessage({command: "delay"})
                        }
                    }
                }
                    break;
                case "captureAudio": {
                    _JsMediaEngine__WEBPACK_IMPORTED_MODULE_0__["Audio_Encode_Frame"](0, data.data, data.data.length, 0)
                }
                    break;
                case "InstantAudioTime": {
                    _inside_JsMediaEngine_Variables__WEBPACK_IMPORTED_MODULE_1___default.a.CurrentSSRCTime = data.data;
                }
                    break;
            }
        }

        postData(status, data) {
            this.port.postMessage({
                status: status,
                data: data
            }, [data.data.buffer]);
        }

        postCMD(status, data) {
            this.port.postMessage({
                status: status,
                data: data
            })
        }
    }

    zoomAudioWorkletNode = ZoomAudioWorkletNode;
}

/* harmony default export */ __webpack_exports__["default"] = (zoomAudioWorkletNode);

/***/ }),

/***/ "./src/worker/common/consts.js":
/*!*************************************!*\
  !*** ./src/worker/common/consts.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serverHeartbeatMaxTimeoutSeconds = exports.CURRENT_SSRC_TIME = exports.AES_GCM_IV_CALLBACK_FROM_WASM = exports.AES_GCM_IV_TO_WASM = exports.SHARING_GET_IMAGE_DATA_WRONG = exports.SHARING_RENDER_MONITOR_LOG = exports.Sharing_Width_And_Height_Info = exports.VIDEO_RENDER_MONITOR_LOG = exports.CURRENT_VIDEO_RESOLUTION = exports.MEDIA_VIDEO_RTCP = exports.MEDIA_VIDEO_DATA = exports.MEDIA_AUDIO_RTCP = exports.MEDIA_AUDIO_DATA = exports.MEDIA_VIDEO_REPORT_DROP_RATIO = exports.AUDIO_CLIPPING = exports.Sharing_Dec_WebSocket_FAILED = exports.Sharing_Handle_FAILED = exports.Audio_Mute = exports.Sharing_Dec_WASM_FAILED = exports.Video_Enc_Handle_FAILED = exports.Video_Enc_WASM_FAILED = exports.Video_Dec_WebSocket_FAILED = exports.Video_Dec_Handle_FAILED = exports.Video_Dec_WASM_FAILED = exports.Audio_Enc_Handle_FAILED = exports.Audio_Enc_WASM_FAILED = exports.Audio_Dec_WebSocket_FAILED = exports.Audio_Dec_Handle_FAILED = exports.Audio_Dec_WASM_FAILED = exports.THREAD_STATE_CREATED = exports.THREAD_STATE_CREATING = exports.THREAD_STATE_IDLE = exports.AUDIO_ENCODED_DATA = exports.VIDEO_DATA_DROP_RATIO = exports.VIDEO_DROP_RATIO_FROM_WCL = exports.VIDEO_ENCODED_DATA = exports.SHARING_DECODE_MESSAGE = exports.MOUSE_DATA_VIDEO_MODE = exports.SHARING_DATA_VIDEO_MODE = exports.WCL_TROUBLESHOOTING_INFO = exports.DELTA_S = exports.DELTA_C = exports.DELTA_D = exports.APP_TROUBLESHOOTING_INFO = exports.DOWNLOAD_WASM_FROM_MAIN_THREAD = exports.MONITOR_MESSAGE = exports.Video_Capture_Tick = exports.DECODE_MESSAGE = exports.Sharing_Data = exports.Sharing_Handle_OK = exports.Sharing_Dec_WebSocket_OK = exports.AUDIO_DELAY = exports.Sharing_Dec_PICTURE = exports.Sharing_Dec_WASM_OK = exports.Video_Enc_Handle_OK = exports.Video_Enc_WASM_OK = exports.Video_Dec_WebSocket_OK = exports.Video_Dec_Handle_OK = exports.Video_Dec_WASM_OK = exports.Audio_Enc_Handle_OK = exports.Audio_Enc_WASM_OK = exports.Audio_Dec_WebSocket_OK = exports.Audio_Dec_Handle_OK = exports.Audio_Dec_WASM_OK = void 0;
//web work
//success
var Audio_Dec_WASM_OK = 1;
exports.Audio_Dec_WASM_OK = Audio_Dec_WASM_OK;
var Audio_Dec_Handle_OK = 2;
exports.Audio_Dec_Handle_OK = Audio_Dec_Handle_OK;
var Audio_Dec_WebSocket_OK = 3;
exports.Audio_Dec_WebSocket_OK = Audio_Dec_WebSocket_OK;
var Audio_Enc_WASM_OK = 4;
exports.Audio_Enc_WASM_OK = Audio_Enc_WASM_OK;
var Audio_Enc_Handle_OK = 5;
exports.Audio_Enc_Handle_OK = Audio_Enc_Handle_OK;
var Video_Dec_WASM_OK = 7;
exports.Video_Dec_WASM_OK = Video_Dec_WASM_OK;
var Video_Dec_Handle_OK = 8;
exports.Video_Dec_Handle_OK = Video_Dec_Handle_OK;
var Video_Dec_WebSocket_OK = 9;
exports.Video_Dec_WebSocket_OK = Video_Dec_WebSocket_OK;
var Video_Enc_WASM_OK = 10;
exports.Video_Enc_WASM_OK = Video_Enc_WASM_OK;
var Video_Enc_Handle_OK = 11;
exports.Video_Enc_Handle_OK = Video_Enc_Handle_OK;
var Sharing_Dec_WASM_OK = 12;
exports.Sharing_Dec_WASM_OK = Sharing_Dec_WASM_OK;
var Sharing_Dec_PICTURE = 13;
exports.Sharing_Dec_PICTURE = Sharing_Dec_PICTURE;
var AUDIO_DELAY = 14;
exports.AUDIO_DELAY = AUDIO_DELAY;
var Sharing_Dec_WebSocket_OK = 15;
exports.Sharing_Dec_WebSocket_OK = Sharing_Dec_WebSocket_OK;
var Sharing_Handle_OK = 16;
exports.Sharing_Handle_OK = Sharing_Handle_OK;
var Sharing_Data = 17;
exports.Sharing_Data = Sharing_Data;
var DECODE_MESSAGE = 18;
exports.DECODE_MESSAGE = DECODE_MESSAGE;
var Video_Capture_Tick = 20;
exports.Video_Capture_Tick = Video_Capture_Tick;
var MONITOR_MESSAGE = 21;
exports.MONITOR_MESSAGE = MONITOR_MESSAGE;
var DOWNLOAD_WASM_FROM_MAIN_THREAD = 30;
exports.DOWNLOAD_WASM_FROM_MAIN_THREAD = DOWNLOAD_WASM_FROM_MAIN_THREAD;
var APP_TROUBLESHOOTING_INFO = 31;
exports.APP_TROUBLESHOOTING_INFO = APP_TROUBLESHOOTING_INFO;
var DELTA_D = 32;
exports.DELTA_D = DELTA_D;
var DELTA_C = 33;
exports.DELTA_C = DELTA_C;
var DELTA_S = 34;
exports.DELTA_S = DELTA_S;
var WCL_TROUBLESHOOTING_INFO = 35;
exports.WCL_TROUBLESHOOTING_INFO = WCL_TROUBLESHOOTING_INFO;
var SHARING_DATA_VIDEO_MODE = 36;
exports.SHARING_DATA_VIDEO_MODE = SHARING_DATA_VIDEO_MODE;
var MOUSE_DATA_VIDEO_MODE = 37;
exports.MOUSE_DATA_VIDEO_MODE = MOUSE_DATA_VIDEO_MODE;
var SHARING_DECODE_MESSAGE = 38;
exports.SHARING_DECODE_MESSAGE = SHARING_DECODE_MESSAGE;
var VIDEO_ENCODED_DATA = 39;
exports.VIDEO_ENCODED_DATA = VIDEO_ENCODED_DATA;
var VIDEO_DROP_RATIO_FROM_WCL = 40;
exports.VIDEO_DROP_RATIO_FROM_WCL = VIDEO_DROP_RATIO_FROM_WCL;
var VIDEO_DATA_DROP_RATIO = 41;
exports.VIDEO_DATA_DROP_RATIO = VIDEO_DATA_DROP_RATIO;
var AUDIO_ENCODED_DATA = 42; // push encoded audio data from worker to main thread

exports.AUDIO_ENCODED_DATA = AUDIO_ENCODED_DATA;
var THREAD_STATE_IDLE = 43;
exports.THREAD_STATE_IDLE = THREAD_STATE_IDLE;
var THREAD_STATE_CREATING = 44;
exports.THREAD_STATE_CREATING = THREAD_STATE_CREATING;
var THREAD_STATE_CREATED = 45; //failed

exports.THREAD_STATE_CREATED = THREAD_STATE_CREATED;
var Audio_Dec_WASM_FAILED = -1;
exports.Audio_Dec_WASM_FAILED = Audio_Dec_WASM_FAILED;
var Audio_Dec_Handle_FAILED = -2;
exports.Audio_Dec_Handle_FAILED = Audio_Dec_Handle_FAILED;
var Audio_Dec_WebSocket_FAILED = -3;
exports.Audio_Dec_WebSocket_FAILED = Audio_Dec_WebSocket_FAILED;
var Audio_Enc_WASM_FAILED = -4;
exports.Audio_Enc_WASM_FAILED = Audio_Enc_WASM_FAILED;
var Audio_Enc_Handle_FAILED = -5;
exports.Audio_Enc_Handle_FAILED = Audio_Enc_Handle_FAILED;
var Video_Dec_WASM_FAILED = -7;
exports.Video_Dec_WASM_FAILED = Video_Dec_WASM_FAILED;
var Video_Dec_Handle_FAILED = -8;
exports.Video_Dec_Handle_FAILED = Video_Dec_Handle_FAILED;
var Video_Dec_WebSocket_FAILED = -9;
exports.Video_Dec_WebSocket_FAILED = Video_Dec_WebSocket_FAILED;
var Video_Enc_WASM_FAILED = -10;
exports.Video_Enc_WASM_FAILED = Video_Enc_WASM_FAILED;
var Video_Enc_Handle_FAILED = -11;
exports.Video_Enc_Handle_FAILED = Video_Enc_Handle_FAILED;
var Sharing_Dec_WASM_FAILED = -12;
exports.Sharing_Dec_WASM_FAILED = Sharing_Dec_WASM_FAILED;
var Audio_Mute = -13;
exports.Audio_Mute = Audio_Mute;
var Sharing_Handle_FAILED = -14;
exports.Sharing_Handle_FAILED = Sharing_Handle_FAILED;
var Sharing_Dec_WebSocket_FAILED = -15;
exports.Sharing_Dec_WebSocket_FAILED = Sharing_Dec_WebSocket_FAILED;
var AUDIO_CLIPPING = -23;
exports.AUDIO_CLIPPING = AUDIO_CLIPPING;
var MEDIA_VIDEO_REPORT_DROP_RATIO = 100;
exports.MEDIA_VIDEO_REPORT_DROP_RATIO = MEDIA_VIDEO_REPORT_DROP_RATIO;
var MEDIA_AUDIO_DATA = 1;
exports.MEDIA_AUDIO_DATA = MEDIA_AUDIO_DATA;
var MEDIA_AUDIO_RTCP = 6;
exports.MEDIA_AUDIO_RTCP = MEDIA_AUDIO_RTCP;
var MEDIA_VIDEO_DATA = 2;
exports.MEDIA_VIDEO_DATA = MEDIA_VIDEO_DATA;
var MEDIA_VIDEO_RTCP = 7;
exports.MEDIA_VIDEO_RTCP = MEDIA_VIDEO_RTCP;
var CURRENT_VIDEO_RESOLUTION = 50;
exports.CURRENT_VIDEO_RESOLUTION = CURRENT_VIDEO_RESOLUTION;
var VIDEO_RENDER_MONITOR_LOG = 51;
exports.VIDEO_RENDER_MONITOR_LOG = VIDEO_RENDER_MONITOR_LOG;
var Sharing_Width_And_Height_Info = 52;
exports.Sharing_Width_And_Height_Info = Sharing_Width_And_Height_Info;
var SHARING_RENDER_MONITOR_LOG = 53;
exports.SHARING_RENDER_MONITOR_LOG = SHARING_RENDER_MONITOR_LOG;
var SHARING_GET_IMAGE_DATA_WRONG = 54;
exports.SHARING_GET_IMAGE_DATA_WRONG = SHARING_GET_IMAGE_DATA_WRONG;
var AES_GCM_IV_TO_WASM = 55;
exports.AES_GCM_IV_TO_WASM = AES_GCM_IV_TO_WASM;
var AES_GCM_IV_CALLBACK_FROM_WASM = 56;
exports.AES_GCM_IV_CALLBACK_FROM_WASM = AES_GCM_IV_CALLBACK_FROM_WASM;
var CURRENT_SSRC_TIME = 57;
/**
 * webclient set 60 seconds, SDK set 65 seconds
 */

exports.CURRENT_SSRC_TIME = CURRENT_SSRC_TIME;
var serverHeartbeatMaxTimeoutSeconds = 65;
exports.serverHeartbeatMaxTimeoutSeconds = serverHeartbeatMaxTimeoutSeconds;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,